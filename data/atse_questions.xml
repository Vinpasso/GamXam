<?xml version="1.0" encoding="UTF-8" ?>

<exam xmlns="https://vpt1.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://vpt1.org questions.xsd">
    <head>
        <title>ATSE Review Question Catalog</title>
        <version>1.0</version>
        <!-- ID not found-->
        <id>404</id>
    </head>
    <body>
        <!-- TODO: Chapter Introduction -->
        <question type="extended-answer" id="500">
            <body>What are the four application domains?</body>
            <answers>
                <answer>
                    <body>Embedded systems, scientific software systems, cyber-physical systems, information systems
                    </body>
                    <marks>
                        <mark type="keyword">embed</mark>
                        <mark type="keyword">scien</mark>
                        <mark type="keyword">cyber-physic</mark>
                        <mark type="keyword">informat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="501">
            <body>What is an embedded system?</body>
            <answers>
                <answer>
                    <body>A computer system part of a larger system performing some requirements of the system.</body>
                    <marks>
                        <mark type="keyword">require</mark>
                        <mark type="keyword">large</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="502">
            <body>What are some characteristics of embedded systems?</body>
            <answers>
                <answer>
                    <body>Processing: ability to process analog/digital signals. Communication: transfer information
                        from/to outside world. Storage: Ability to preserve temporary information. User interfaces:
                        ability to communicate with the user.
                    </body>
                    <marks>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">stor</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="503">
            <body>What are three important quality attributes of (real-time) embedded systems?</body>
            <answers>
                <answer>
                    <body>Dependability, efficiency, real-time</body>
                    <marks>
                        <mark type="regex" regex-flags="i">depend|reliab</mark>
                        <mark type="keyword">efficien</mark>
                        <mark type="keyword">tim</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="504">
            <body>What type of constraint ist added in a real time system? What aspect is important?</body>
            <answers>
                <answer>
                    <body>Timing constraints. Predictability is very important.</body>
                    <marks>
                        <mark type="keyword">tim</mark>
                        <mark type="keyword">predict</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="505">
            <body>What is a reactive system?</body>
            <answers>
                <answer>
                    <body>A reactive system is one which is in continual interaction with its environment and executes
                        at a pace determined by the environment (typically ES are also reactive).
                    </body>
                    <marks>
                        <mark type="keyword">interact</mark>
                        <mark type="keyword">environment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="506">
            <body>What is an information system?</body>
            <answers>
                <answer>
                    <body>An integrated set of components for collecting, storing, processing data and for delivering
                        information, knowledge, digital products.
                    </body>
                    <marks>
                        <mark type="keyword">collect</mark>
                        <mark type="keyword">stor</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">inform</mark>
                        <mark type="keyword">know</mark>
                        <mark type="keyword">product</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="507">
            <body>What type of information systems are there?</body>
            <answers>
                <answer>
                    <body>Transaction processing systems (repetitive, high-volume tasks), management information systems
                        (support routine decision making in functional areas), decision support (complex non-routine
                        decision making support), end-user computing (systems for use by users such as analysts,
                        managers, other professionals), office automation systems (automate office tasks), intelligent
                        support systems (expert systems), knowledge management systems, data warehousing, enterprise
                        resource planning, mobile computing, e-business and e-commerce.
                    </body>
                    <marks>
                        <mark type="keyword">transaction</mark>
                        <mark type="keyword">decision support</mark>
                        <mark type="keyword">office</mark>
                        <mark type="keyword">enterprise resource planning</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="508">
            <body>What is a cyber-physical system?</body>
            <answers>
                <answer>
                    <body>A socio-technical system that integrates information systems, embedded systems, and humans.
                    </body>
                    <marks>
                        <mark type="keyword">socio</mark>
                        <mark type="keyword">technical</mark>
                        <mark type="keyword">embed</mark>
                        <mark type="keyword">info</mark>
                        <mark type="keyword">human</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="509">
            <body>What is software engineering?</body>
            <answers>
                <answer>
                    <body>A collection of techniques, methodologies and tools that aid the product of a high quality
                        software system with a given budget before a given deadline while change occurs.
                    </body>
                    <marks>
                        <mark type="keyword">tecnique</mark>
                        <mark type="keyword">method</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">budget</mark>
                        <mark type="keyword">deadline</mark>
                        <mark type="keyword">change</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="510">
            <body>What is a process model?</body>
            <answers>
                <answer>
                    <body>It describes the systematic, engineering-based, and quantifiable approach to solve a
                        particular
                        class of repeatable problems. It is an abstract representation of the software process.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">engineer</mark>
                        <mark type="keyword">quantif</mark>
                        <mark type="keyword">class</mark>
                        <mark type="keyword">problem</mark>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">represent</mark>
                        <mark type="keyword">process</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="511">
            <body>What process models are covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Waterfall model, V-model, spiral-model, unified process, scrum</body>
                    <marks>
                        <mark type="keyword">waterfall</mark>
                        <mark type="keyword">v</mark>
                        <mark type="keyword">spiral</mark>
                        <mark type="keyword">unified</mark>
                        <mark type="keyword">scrum</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="512">
            <body>What are two problems with the waterfall model?</body>
            <answers>
                <answer>
                    <body>It is inflexible due to the strictly sequential process and it is risky because it detects
                        problems late.
                    </body>
                    <marks>
                        <mark type="keyword">flex</mark>
                        <mark type="keyword">risk</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="513">
            <body>What are the concepts behind the spiral model and what is the aim?</body>
            <answers>
                <answer>
                    <body>Incremental, iterative development and evolutionary models to minimize risk.</body>
                    <marks>
                        <mark type="keyword">increment</mark>
                        <mark type="keyword">iter</mark>
                        <mark type="keyword">evolut</mark>
                        <mark type="keyword">risk</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="514">
            <body>What is emphasized in the unified process and what are the essential components?</body>
            <answers>
                <answer>
                    <body>Places emphasis on construction of architecture and early demonstrations. Has 4 phases
                        (inception, elaboration, construction, transition), 7 workflows (management, environment,
                        requirements, design, implementation, assessment, deployment), and 5 artifact sets (management
                        set, requirements set, design set, implementation set, deployment set). Based on iteration.
                    </body>
                    <marks>
                        <mark type="keyword">architect</mark>
                        <mark type="keyword">demonstrat</mark>
                        <mark type="keyword">phase</mark>
                        <mark type="keyword">workflow</mark>
                        <mark type="keyword">artifact</mark>
                        <mark type="keyword">iterat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="515">
            <body>What are the four paradigms of agile development?</body>
            <answers>
                <answer>
                    <body>Individuals and interactions over processes and tools. Working software over comprehensive
                        documentation, customer collaboration over contract negotiation. Responding to change over
                        following a plan.
                    </body>
                    <marks>
                        <mark type="keyword">individual</mark>
                        <mark type="keyword">interact</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">software</mark>
                        <mark type="keyword">document</mark>
                        <mark type="keyword">customer</mark>
                        <mark type="keyword">contract</mark>
                        <mark type="keyword">change</mark>
                        <mark type="keyword">plan</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="516">
            <body>What are the essential components of scrum?
            </body>
            <answers>
                <answer>
                    <body>Product requirements are collected in the product backlog. Development is divided into sprints
                        with
                        sprint planning and retrospective meetings. Daily standup meetings are held. There are three
                        roles:
                        product owner, development team, and scum master
                    </body>
                    <marks>
                        <mark type="keyword">backlog</mark>
                        <mark type="keyword">sprint</mark>
                        <mark type="keyword">planning</mark>
                        <mark type="keyword">retrospective</mark>
                        <mark type="keyword">standup</mark>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">develop</mark>
                        <mark type="keyword">master</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="517">
            <body>What are some issues with the agile approach?</body>
            <answers>
                <answer>
                    <body>Scalability, feature interaction, maintainability, technical debt.</body>
                    <marks>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">interact</mark>
                        <mark type="keyword">maintain</mark>
                        <mark type="keyword">debt</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="518">
            <body>What are some artifacts generated in requirements engineering?</body>
            <answers>
                <answer>
                    <body>Feasibility report, system models, user and system requirements, requirements document</body>
                    <marks>
                        <mark type="keyword">feasib</mark>
                        <mark type="keyword">model</mark>
                        <mark type="keyword">requirement</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="519">
            <body>What are some input/output artifacts in software design?</body>
            <answers>
                <answer>
                    <body>Input: Platform information, requirements specification, data description. Output: System
                        architecture, database specification, interface specification, component specification.
                    </body>
                    <marks>
                        <mark type="keyword">platform</mark>
                        <mark type="keyword">requirement</mark>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">architect</mark>
                        <mark type="keyword">database</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">component</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="520">
            <body>What are some artifacts generated in testing?</body>
            <answers>
                <answer>
                    <body>Acceptance test plan, system integration test plan, sub-system integration test plan.</body>
                    <marks>
                        <mark type="keyword">accept</mark>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">integrat</mark>
                        <mark type="keyword">sub-system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="521">
            <body>What is software quality?</body>
            <answers>
                <answer>
                    <body>All characteristics of a software product that influence its ability to fulfill specified
                        requirements and stakeholder expectations (can refer to both process and product).
                    </body>
                    <marks>
                        <mark type="keyword">characteristic</mark>
                        <mark type="keyword">influenc</mark>
                        <mark type="keyword">require</mark>
                        <mark type="keyword">stakeholder</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="522">
            <body>What is the difference between quality and non-functional requirements?</body>
            <answers>
                <answer>
                    <body>Quality = Process Quality + Product Quality (NFRs)</body>
                    <marks>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">product</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="523">
            <body>What types of interdependencies between quality aspects exist? Which one is problematic?</body>
            <answers>
                <answer>
                    <body>Positive: improving one aspects improves another. Negative: improving one aspect interferes
                        with the other. The negative correlation causes issues that need to be solved in tradeoffs.
                    </body>
                    <marks>
                        <mark type="keyword">positive</mark>
                        <mark type="keyword">negative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="522">
            <body>What are some intrinsic quality aspects according to ISO 9126?</body>
            <answers>
                <answer>
                    <body>Correctness and completeness.</body>
                    <marks>
                        <mark type="keyword">correct</mark>
                        <mark type="keyword">complete</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="523">
            <body>What are some design-time quality aspects according to ISO 9126?</body>
            <answers>
                <answer>
                    <body>Portability (adaptability, installability, co-existence, replaceability) and maintainability
                        (analyzability, learnability, changeability, reusability, stability, testability).
                    </body>
                    <marks>
                        <mark type="keyword">port</mark>
                        <mark type="keyword">maintain</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="524">
            <body>What are some run-time quality aspects according to ISO 9126?</body>
            <answers>
                <answer>
                    <body>Usability, reliability, efficiency, functionality</body>
                    <marks>
                        <mark type="keyword">usabil</mark>
                        <mark type="keyword">reliab</mark>
                        <mark type="keyword">effic</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="525">
            <body>What are the categories of quality in the ISO 9126 model, what type of quality do they refer to and
                from which perspective can they be analyzed?
            </body>
            <answers>
                <answer>
                    <body>Intrinsic, design-time, run-time. Refers to both external/internal quality and can be analyzed
                        from black/white-box perspective.
                    </body>
                    <marks>
                        <mark type="keyword">intrinsic</mark>
                        <mark type="keyword">design</mark>
                        <mark type="keyword">run</mark>
                        <mark type="keyword">extern</mark>
                        <mark type="keyword">intern</mark>
                        <mark type="keyword">black</mark>
                        <mark type="keyword">white</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="526">
            <body>Which four factors influence product quality?</body>
            <answers>
                <answer>
                    <body>Process quality, development technology, cost-, time- and schedule constraints, people
                        quality.
                    </body>
                    <marks>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">dev</mark>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">people</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="527">
            <body>What problem can be encountered when assessing quality?</body>
            <answers>
                <answer>
                    <body>Many quality attributes are hard to measure directly.</body>
                    <marks>
                        <mark type="keyword">measur</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="528">
            <body>What two types of quality standards are there?</body>
            <answers>
                <answer>
                    <body>Product standards: characteristics present in all components. Process standards: define how
                        software process should be enacted.
                    </body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">process</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="529">
            <body>What is required for an organization to be ISO 9001 conformant?</body>
            <answers>
                <answer>
                    <body>It needs to document how its processes relate to the nine core processes (product delivery
                        processes and supporting processes).
                    </body>
                    <marks>
                        <mark type="keyword">process</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="530">
            <body>What are some problems with the ISO 9001 quality standard?</body>
            <answers>
                <answer>
                    <body>Certification does not imply increased software quality. Standard focuses on ensuring quality
                        management procedures are in place, not that they work. ISO 9001 defines quality by conformance
                        to standards, not taking into account quality as experienced by the users.
                    </body>
                    <marks>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">manage</mark>
                        <mark type="keyword">user</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 1: Embedded Systems (Guest Lecture) !-->
        <question type="extended-answer" id="1">
            <body>What is an embedded system and some of it's common attributes?</body>
            <answers>
                <answer>
                    <body>
                        Example Definitions:
                        Real-time system, small microcontroller with little memory, programmed in assembler or in C.
                        Information system that is integrated into a larger product.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">real.*time</mark>
                        <mark type="keyword">memory</mark>
                        <mark type="regex" regex-flags="i">information.*system</mark>
                        <mark type="keyword">integrate</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.1.1 -->
        <question type="extended-answer" id="2">
            <body>Define software architecture.</body>
            <answers>
                <answer>
                    <body>
                        Example definitions:
                        1: The fundamental organization of a system embodied in its components, their relationships to
                        each other, and to the environment, and the principles guiding its design and evolution.
                        4: Architecture is a set of significant design decisions that shape a system.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">relationship</mark>
                        <mark type="keyword">environment</mark>
                        <mark type="keyword">design</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="3">
            <body>What is the purpose of software architecture?</body>
            <answers>
                <answer>
                    <body>Quality, Efficiency, Risk Minimization, Communication Means, Knowledge Management.</body>
                    <marks>
                        <mark type="keyword">Quality</mark>
                        <mark type="keyword">Efficiency</mark>
                        <mark type="keyword">Risk</mark>
                        <mark type="keyword">Communicat</mark>
                        <mark type="keyword">Knowledge</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="4">
            <body>What is a system?</body>
            <answers>
                <answer>
                    <body>A collection of components organized to accomplish a set of functions with defined boundaries,
                        components and interfaces, environment interaction and static structure and dynamic behavior
                    </body>
                    <marks>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">boundar</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">environment</mark>
                        <mark type="keyword">structure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="5">
            <body>What is a system&apos;s environment?</body>
            <answers>
                <answer>
                    <body>The developmental, operational, political and other influences on the system</body>
                    <marks>
                        <mark type="keyword">influence</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="6">
            <body>What is an architectural description?</body>
            <answers>
                <answer>
                    <body>A document recording the architecture of a system</body>
                    <marks>
                        <mark type="keyword">architect</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="7">
            <body>What are two key roles among stakeholders?</body>
            <answers>
                <answer>
                    <body>The principal and the architect.</body>
                    <marks>
                        <mark type="keyword">principal</mark>
                        <mark type="keyword">architect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="8">
            <body>What is a stakeholder?</body>
            <answers>
                <answer>
                    <body>An entity with interest in, or concerns relative to, the system that has varios roles with
                        regard to creation/use of the architectural descriptions.
                    </body>
                    <marks>
                        <mark type="keyword">interest</mark>
                        <mark type="keyword">concern</mark>
                        <mark type="keyword">role</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9">
            <body>What is a concern in relation to software architecture? What are some typical concerns?</body>
            <answers>
                <answer>
                    <body>An interest which pertains to the system's development, its operation, or any other aspect
                        important to stakeholders. Includes considerations such as performance, reliability, security,
                        distribution, evolvability.
                    </body>
                    <marks>
                        <mark type="keyword">interest</mark>
                        <mark type="keyword">dev</mark>
                        <mark type="keyword">operat</mark>
                        <mark type="keyword">stakeholder</mark>
                        <mark type="keyword">security</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="10">
            <body>What is the difference between a view and a viewpoint?</body>
            <answers>
                <answer>
                    <body>View: Document addressing concerns of stakeholders conforming to a viewpoint. Viewpoint:
                        Determines language (notation etc.) and any modeling methods or analysis techniques to be used
                        to describe the view.
                    </body>
                    <marks>
                        <mark type="keyword">concern</mark>
                        <mark type="keyword">stakeholder</mark>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">notation</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="11">
            <body>What is an architecture rationale?</body>
            <answers>
                <answer>
                    <body>The explanation/justification for an architecture decision including documentation for the
                        chosen and not-chosen architecture alternatives
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">expl|justif</mark>
                        <mark type="keyword">alternative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12">
            <body>What views are part of the 4+1 view model? How are they classified?</body>
            <answers>
                <answer>
                    <body>Logical view (conceptual), process view (conceptual), implementation view (physical),
                        deployment view (physical), use case view (both).
                    </body>
                    <marks>
                        <mark type="keyword">logical</mark>
                        <mark type="keyword">implementation</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">deployment</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">phys</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="13">
            <body>What does the logical viewpoint describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>It describes the design&apos;s functionality from an end user perspective.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">end.*user</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="14">
            <body>What does the process viewpoint describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>It describes the dynamic communication, concurrency, and synchronization aspects</body>
                    <marks>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">concur</mark>
                        <mark type="keyword">synchro</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="15">
            <body>
                What does the deployment viewpoint describe in the 4+1 model?
            </body>
            <answers>
                <answer>
                    <body>The mapping of software onto hardware, reflecting the distributed aspects.</body>
                    <marks>
                        <mark type="keyword">hardware</mark>
                        <mark type="keyword">distribute</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="16">
            <body>What does the implementation view describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>The software's static organization in its development environment.</body>
                    <marks>
                        <mark type="keyword">static</mark>
                        <mark type="keyword">organiz</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="17">
            <body>What is a scenario in the 4+1 view model?</body>
            <answers>
                <answer>
                    <body>A scenario (use-case) is used to show that the elements of the four viewpoints work seamlessly
                        together.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">work.*together</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="18">
            <body>What does the 4+1 stand for in the 4+1 view model</body>
            <answers>
                <answer>
                    <body>The 4+1 different viewpoints</body>
                    <marks>
                        <mark type="keyword">viewpoint</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="19">
            <body>What diagrams are typically used for the logical, process, implementation, deployment, and use case
                view in the 4+1 model?
            </body>
            <answers>
                <answer>
                    <body>Logical: class diagram, process: sequence diagram, implementation: component, deployment:
                        deployment diagram
                    </body>
                    <marks>
                        <mark type="keyword">class</mark>
                        <mark type="keyword">sequence</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">deployment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="20">
            <body>What are the four parts of the C4 model and what do they focus on?</body>
            <answers>
                <answer>
                    <body>System context diagram: Focus on people and software systems. Container diagram: Shows high
                        level shape of the architecture and the distribution of responsibilities, as well as technology
                        choices and communication between containers. Component diagram: Decomposes a container into
                        components, including responsibilities and technology/implementation choices. Code diagram:
                        Class diagrams or entity-relationship diagrams.
                    </body>
                    <marks>
                        <mark type="keyword">context</mark>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">people</mark>
                        <mark type="keyword">container</mark>
                        <mark type="keyword">responsib</mark>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">code</mark>
                        <mark type="keyword">class</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="21">
            <body>What is the idea behind the C4 model?</body>
            <answers>
                <answer>
                    <body>Precise notation is much less important than efficiently communicating the architecture to the
                        target audience.
                    </body>
                    <marks>
                        <mark type="keyword">notation</mark>
                        <mark type="keyword">comunicat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="22">
            <body>What types of system models are there and what do they describe?</body>
            <answers>
                <answer>
                    <body>Object model: Describes the structure of the system and relationships between objects.
                        Functional model: Describes the functions of the system and data flow through the system.
                        Dynamic model: Describes how the system reacts to external events and how events flow through
                        the system.
                    </body>
                    <marks>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">relation</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">dynamic</mark>
                        <mark type="regex">event|influenc</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="23">
            <body>What are the three main attributes characterizing models?</body>
            <answers>
                <answer>
                    <body>Reduction: An increase in abstraction leads to easier communication. Pragmatism: A model is
                        created with a purpose in mind. Mapping: There is a relationship between elements in the model
                        and elements in the original.
                    </body>
                    <marks>
                        <mark type="regex">reduc|abstract</mark>
                        <mark type="regex">pragmat|purpos</mark>
                        <mark type="regex">map|relat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="24">
            <body>What do you call models that represent the current state of a system and the planned state of a
                system?
            </body>
            <answers>
                <answer>
                    <body>As-is models describe the current situation, to-be models the planned state once the project
                        is finished.
                    </body>
                    <marks>
                        <mark type="regex">as.*is</mark>
                        <mark type="regex">to.*be</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="25">
            <body>What are the seven stages in the cycle of modeling?</body>
            <answers>
                <answer>
                    <body>Understand (Comprehend the problem and possible solutions), Conceptualize (Formalize parts of
                        the application domain into a concept language), Abstract (generalize and outline main
                        problems), Define (Unambiguously specify concepts), Construct (actually create the model),
                        Evaluate (based on quality characteristics), Refine (iterate)
                    </body>
                    <marks>
                        <mark type="keyword">understand</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">defin</mark>
                        <mark type="keyword">construct</mark>
                        <mark type="keyword">evaluate</mark>
                        <mark type="keyword">refine</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="26">
            <body>Draw the UML diagram of the IEEE 471 standard.</body>
            <answers>
                <answer>
                    <body>See Chapter 2.1.1 slide 6</body>
                    <marks>
                        <mark type="manual"/>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="27">
            <body>What are some of the benefity of modularity?</body>
            <answers>
                <answer>
                    <body>Easier maintenance, reusability, understandability, reduced complexity, allows for work
                        distribution.
                    </body>
                    <marks>
                        <mark type="keyword">maint</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="keyword">understand</mark>
                        <mark type="keyword">complex</mark>
                        <mark type="keyword">distribut</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="28">
            <body>What is modularity?</body>
            <answers>
                <answer>
                    <body>A decomposition of systems into modules that measures the degree to which components can be
                        separated and recombined.
                    </body>
                    <marks>
                        <mark type="keyword">decomposit</mark>
                        <mark type="keyword">component</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="29">
            <body>What is functional decomposition and what are some of its issues?</body>
            <answers>
                <answer>
                    <body>Each module is a major processing step (function) in the application domain, which can be
                        decomposed into smaller modules. Some issues include the spread of functionality all over the
                        system and the need to understand the whole system to make changes to it, which leads to
                        understandability and maintainability problems.
                    </body>
                    <marks>
                        <mark type="regex">application.*domain</mark>
                        <mark type="keyword">spread</mark>
                        <mark type="regex">understand|maintain</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="30">
            <body>What is a modular decomposition? What assumptions are made and what are some limitations?</body>
            <answers>
                <answer>
                    <body>Each module represents a major abstraction in the application domain. Assumptions: It is
                        possible to find concepts for a new system (greenfield engineering), an existing system
                        (re-engineering), and we can create component-based interfaces for any system (interface
                        engineering). Limitations: Non-unique, different concepts might be found for the same system.
                    </body>
                    <marks>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">unique</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="31">
            <body>What is a black-box model?</body>
            <answers>
                <answer>
                    <body>A black box model presents the functional perspective on a system. Only the interaction
                        between the composition and the environment are taken into account in an abstract way.
                    </body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">environ</mark>
                        <mark type="keyword">abstract</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="32">
            <body>What is a white-box model?</body>
            <answers>
                <answer>
                    <body>A white box model presents the construction perspective on a system, capturing construction
                        and operation.
                    </body>
                    <marks>
                        <mark type="keyword">construct</mark>
                        <mark type="keyword">operat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="33">
            <body>What are the three steps to decompose a system?</body>
            <answers>
                <answer>
                    <body>Step 1: Analyze dependencies between elements. Step 2: Elements with strong dependencies form
                        components. Step 3: Dependencies between components are captured in interfaces.
                    </body>
                    <marks>
                        <mark type="keyword">dependenc</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="34">
            <body>What is a software component?</body>
            <answers>
                <answer>
                    <body>Def 1: A software element conforming to a component model that can be independently deployed
                        and composed according to a composition standard. Def 2: A unit of composition with
                        contractually specified interfaces and explicit context dependencies only that can be deploed
                        independently and is subject to composition by third parties.
                    </body>
                    <marks>
                        <mark type="regex">element|unit</mark>
                        <mark type="regex">model|interface|dependenc</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">composit</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="35">
            <body>What is component-based software engineering? What shortcoming of object-orientation does it fix?
            </body>
            <answers>
                <answer>
                    <body>An approach to software development relying on reuse of entities (software components). It
                        emerged because object-orientation tends to be too detailed and specific for effective reuse. A
                        component is an independent executable entity made up of executable objects. The interface is
                        published and all interactions are made through the published interface.
                    </body>
                    <marks>
                        <mark type="keyword">reuse</mark>
                        <mark type="keyword">entit</mark>
                        <mark type="keyword">interfac</mark>
                        <mark type="keyword">executab</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="36">
            <body>
                What are some characteristics of software components?
            </body>
            <answers>
                <answer>
                    <body>They are standardized (conforms to a standard component model), independent (possibility to
                        compose and deploy by itself), composable, deployable and documented.
                    </body>
                    <marks>
                        <mark type="keyword">standard</mark>
                        <mark type="keyword">independen</mark>
                        <mark type="keyword">compos</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">document</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="37">
            <body>What is a component model?</body>
            <answers>
                <answer>
                    <body>A definition of standards for component implementation, documentation, and deployment.</body>
                    <marks>
                        <mark type="keyword">implement</mark>
                        <mark type="keyword">document</mark>
                        <mark type="keyword">deploy</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question id="38" type="extended-answer">
            <body>What are the basic elements of a component model?</body>
            <answers>
                <answer>
                    <body>Interface definition, language used, naming conventions, meta-data, packaging</body>
                    <marks>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">nam</mark>
                        <mark type="keyword">meta</mark>
                        <mark type="keyword">packag</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question id="39" type="extended-answer">
            <body>What are the types of component compositions and how do they work?</body>
            <answers>
                <answer>
                    <body>Sequential composition: An intermediate hooks into the exposed components of multiple
                        interfaces. Hierarchical composition: One component hooks into the exposed interface of another
                        component. Adaptive composition: A wrapper surrounds the internal components and wraps around
                        the incoming and outgoing dependencies.
                        <img src="res/39_composition.png"/>
                    </body>
                    <marks>
                        <mark type="keyword">sequen</mark>
                        <mark type="keyword">hierarch</mark>
                        <mark type="keyword">adapt</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="40">
            <body>What are some of the benefits of component based software engineering?</body>
            <answers>
                <answer>
                    <body>Independent components, standardized components, middleware, development process geared to
                        reuse.
                    </body>
                    <marks>
                        <mark type="keyword">independen</mark>
                        <mark type="keyword">standard</mark>
                        <mark type="keyword">middleware</mark>
                        <mark type="keyword">reus</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="41">
            <body>What are some cons of component-based software engineering?</body>
            <answers>
                <answer>
                    <body>Trustworthiness of external components, certification of components, emergent property
                        prediction, requirements trade-offs
                    </body>
                    <marks>
                        <mark type="keyword">trust</mark>
                        <mark type="keyword">certif</mark>
                        <mark type="keyword">propert</mark>
                        <mark type="keyword">trade</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="42">
            <body>What is design by contract?</body>
            <answers>
                <answer>
                    <body>A set of principles to produce dependable and robust object-oriented software</body>
                    <marks>
                        <mark type="keyword">principl</mark>
                        <mark type="keyword">depend</mark>
                        <mark type="keyword">robust</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="43">
            <body>What are the two major characteristics of a contract in the design by contract principle?</body>
            <answers>
                <answer>
                    <body>1: Each party expects benefits from the contract and is prepared to incur obligations to
                        obtain them. These are documented in the contract document, and no other obligations can be can
                        be imposed (no-hidden-clauses rule) to obtain the benefits.
                    </body>
                    <marks>
                        <mark type="keyword">benefit</mark>
                        <mark type="keyword">obligat</mark>
                        <mark type="keyword">hidden</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="44">
            <body>What are the pre/post conditions in a design-by-contract environment?</body>
            <answers>
                <answer>
                    <body>They are assertions (expressions that evaluate to true or false), checking the requirements
                        that any call must satisfy/the properties ensured at the end of execution of the procedure.
                    </body>
                    <marks>
                        <mark type="keyword">assert</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="45">
            <body>Give an example of a language with builtin design-by-contract functionality</body>
            <answers>
                <answer>
                    <body>The Eiffel programming language</body>
                    <marks>
                        <mark type="keyword">eiffel</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="46">
            <body>What are some of the principles in design by contract?</body>
            <answers>
                <answer>
                    <body>1: Non-redundancy principle (The routine never checks its own precondition). 2: Reasonable
                        precondition principle (the need is justified and documented). 3: Failure principle (execution
                        of rescue clause to end, not leading to a retry, causes call to fail. 4: Disciplined exception
                        handling principle (retry / failure) 5: Exception simplicity principle (rescue clauses are
                        simple and focus only on obtaining a stable state.
                    </body>
                    <marks>
                        <mark type="keyword">redundan</mark>
                        <mark type="keyword">reasonable</mark>
                        <mark type="keyword">fail</mark>
                        <mark type="keyword">handl</mark>
                        <mark type="keyword">simpl</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="46">
            <body>What is the difference between defensive programming and design by contract?</body>
            <answers>
                <answer>
                    <body>Defensive programming promotes putting checks in every module to detect unexpected situations.
                        This can lead to redundant checks (duplication) and the responsibilities are less well defined.
                    </body>
                    <marks>
                        <mark type="keyword">check</mark>
                        <mark type="keyword">redundan</mark>
                        <mark type="keyword">respons</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="47">
            <body>What is the meaning of an entry (row/column) in the dependency structure matrix?</body>
            <answers>
                <answer>
                    <body>The row depends on the column.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">row.*depend.*column</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="48">
            <body>What is a dependency structure matrix?</body>
            <answers>
                <answer>
                    <body>A 2D matrix representing structural/functional interrelationships of objects, tasks, or
                        teams
                    </body>
                    <marks>
                        <mark type="keyword">structur</mark>
                        <mark type="keyword">function</mark>
                        <mark type="regex" regex-flags="i">relation|dependen</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="49">
            <body>What is partitioning in relation to a DSM?</body>
            <answers>
                <answer>
                    <body>The collapsing of mutual dependent components into a group to transform the matrix into block
                        triangular form.
                    </body>
                    <marks>
                        <mark type="keyword">mutual</mark>
                        <mark type="keyword">group</mark>
                        <mark type="regex">block.*triang</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="50">
            <body>What property does the lower triangular DSM ensure?</body>
            <answers>
                <answer>
                    <body>That dependencies are acyclic.</body>
                    <marks>
                        <mark type="keyword">acyclic</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="51">
            <body>How is a hierarchical DSM different from a normal DSM?</body>
            <answers>
                <answer>
                    <body>In a hierarchical DSM, groups are represented by a border instead of collapsed into one.
                    </body>
                    <marks>
                        <mark type="keyword">group</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="52">
            <body>How can a layered software system be detected in a DSM?</body>
            <answers>
                <answer>
                    <body>Lower triangular form (each component accesses functionality somewhere below it).</body>
                    <marks>
                        <mark type="keyword">triang</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="53">
            <body>How can a strictly layered software system be detected in a DSM?</body>
            <answers>
                <answer>
                    <body>Only entries adjacent to one side of the diagonal.</body>
                    <marks>
                        <mark type="keyword">diag</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="54">
            <body>What is the meaning of a change propagator in a DSM?</body>
            <answers>
                <answer>
                    <body>A component that is dependent on/depends on many other components. A change in one of the
                        components it depends on can also affect all components that depend on it.
                    </body>
                    <marks>
                        <mark type="keyword">depend</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="55">
            <body>What are some of the benefits of using a DSM?</body>
            <answers>
                <answer>
                    <body>Better scaling than box-and-line diagrams, helps better understand flow of information,
                        automatic mechanism for architectural discovery, efficient cycle detection and integration of
                        dependency rules.
                    </body>
                    <marks>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">flow</mark>
                        <mark type="keyword">discover</mark>
                        <mark type="keyword">cycle</mark>
                        <mark type="keyword">rules</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="56">
            <body>What are some challenges of a DSM?</body>
            <answers>
                <answer>
                    <body>Only as good as knowledge that goes into it. Unknown interdependencies can exist. Less
                        intuitive than a graph.
                    </body>
                    <marks>
                        <mark type="keyword">know</mark>
                        <mark type="keyword">depend</mark>
                        <mark type="keyword">graph</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.1.3 Guidelines for Modular Design -->
        <question type="extended-answer" id="57">
            <body>What is the formal definition of the structure of a system?</body>
            <answers>
                <answer>
                    <body>The formal definition of a structure is defined by S:=(C,I,CON), where C denotes the
                        components, env\in C denotes the environment, I denoting the interfaces and CON\subseteq I\cross
                        I the connection between interfaces. A component can be a system itself.
                    </body>
                    <marks>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">environ</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="58">
            <body>What are the types of relationship in a system structure?</body>
            <answers>
                <answer>
                    <body>Parent relationships (C\rightarrow C, parent(a)=env), Interface-component relationship
                        (I\rightarrow C, assigned(i)=a),
                        connections between interfaces (CON\rightarrow I\cross I, connected(c)=(a,b))
                    </body>
                    <marks>
                        <mark type="keyword">parent</mark>
                        <mark type="regex" regex-flags="i">assign|interface|component</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="59">
            <body>How is coupling calculated?</body>
            <answers>
                <answer>
                    <body>coupling(S):=\alpha * percentage of connections on same level + (1-\alpha) * percentage of
                        connections on different levels. Where \alpha is a weighting factor of choice.
                    </body>
                    <marks>
                        <mark type="keyword">alpha</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="60">
            <body>What are the types of coupling in order of decreasing coupling (lower is better)?</body>
            <answers>
                <answer>
                    <body>Content, Common, External, Control, Stamp, Data</body>
                    <marks>
                        <mark type="keyword">content</mark>
                        <mark type="keyword">common</mark>
                        <mark type="keyword">external</mark>
                        <mark type="keyword">control</mark>
                        <mark type="keyword">stamp</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="61">
            <body>What is the meaning of content coupling?</body>
            <answers>
                <answer>
                    <body>One component directly affects the working of another component by modifying its data or
                        passing control to unintended points in the other component. Any modification in the other
                        component usually requires a modification in this component.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">control</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="62">
            <body>What is the meaning of common coupling?</body>
            <answers>
                <answer>
                    <body>Two components use shared data (global variables etc). This leads to a lack of clear data
                        responsibility, reduced readability, reduced maintainability, difficulties in reuse and a
                        reduced ability to control data access.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">respons</mark>
                        <mark type="keyword">read</mark>
                        <mark type="keyword">maintain</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="keyword">access</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="63">
            <body>What is the meaning of external coupling?</body>
            <answers>
                <answer>
                    <body>Components communicate through an external medium (file, device, protocol, data format)</body>
                    <marks>
                        <mark type="keyword">medi</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="64">
            <body>What is the meaning of control coupling?</body>
            <answers>
                <answer>
                    <body>One component directs control to another component by passing control information. Good if
                        paramenters allow factoring and reuse, bad if parameters cause completely different behavior or
                        require knowledge of internal functions.
                    </body>
                    <marks>
                        <mark type="keyword">control</mark>
                        <mark type="regex">info|param|arg</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="65">
            <body>What is the meaning of stamp coupling?</body>
            <answers>
                <answer>
                    <body>In stamp coupling, complete data structures are passed between components. The second
                        component therefore has more information that it needs. Define interfaces to limit what clients
                        can access.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">struct</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="66">
            <body>What is the meaning of data coupling?</body>
            <answers>
                <answer>
                    <body>Component passes only data (not data structures) to another component. Ensures the other
                        component can only access information that it actually needs.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="67">
            <body>What is the meaning of Cohesion?</body>
            <answers>
                <answer>
                    <body>Cohesion is a measure of how closely the responsibilities of a component are related (degree
                        of interaction within a component, higher is better). It characterizes the components internal
                        dependencies.
                    </body>
                    <marks>
                        <mark type="keyword">respons</mark>
                        <mark type="keyword">depend</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="68">
            <body>What are the types of cohesion in descending level of cohesion (higher is better)?</body>
            <answers>
                <answer>
                    <body>Functional, sequential, communicational, procedural, temporal, logical, coincidental.</body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">sequen</mark>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">procedur</mark>
                        <mark type="keyword">tempo</mark>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">coinciden</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="69">
            <body>What is the meaning of coincidental cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are grouped into components without signification relation between elements, i.e. by
                        accident. It degrades maintainability and reusability, refactor by breaking it into several
                        modules.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">relat|accident</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="70">
            <body>What is the meaning of logical cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are related logically but not functionally. Example: Read input from tape, disk,
                        network (operations are related logically, but their function differs significantly).
                    </body>
                    <marks>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="71">
            <body>What is temporal cohesion?</body>
            <answers>
                <answer>
                    <body>The elements are independent but are activated at at the similar times. Example:
                        initialization component (print some status info, open a database connection, verify licensing).
                        This is a weak relationship, usually stronger ones exist that would increase maintainability and
                        reusability.
                    </body>
                    <marks>
                        <mark type="keyword">time</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="72">
            <body>What is procedural cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are grouped into a component only to ensure a particular order of execution. They are
                        still weakly connected, degrading reusability.
                    </body>
                    <marks>
                        <mark type="keyword">order</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="73">
            <body>What is communicational cohesion?</body>
            <answers>
                <answer>
                    <body>Elements in a component operate on the same (external) data. Probably leads to blobs when
                        considering large components, e.g. for database interaction.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="74">
            <body>What is sequential cohesion?</body>
            <answers>
                <answer>
                    <body>The output of one part is input to another, data flows between parts (different from
                        procedural cohesion).
                    </body>
                    <marks>
                        <mark type="keyword">put</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="75">
            <body>What is functional cohesion?</body>
            <answers>
                <answer>
                    <body>Every essential element to a single computation is contained in the component. These
                        components often transform a single input into a single output. This is the ideal situation,
                        with high reusability, testability, understandability, learnability and fault isolation. There
                        are reduced regression faults and it is easy to extend the product.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">comput|operat</mark>
                        <mark type="keyword">put</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="76">
            <body>What are some advantages expected from striving for low coupling and high cohesion? What should be
                avoided?
            </body>
            <answers>
                <answer>
                    <body>Simpler communication, local decision making, easy correctness proofs, less change
                        propagation, increased reusability and comprehensability. But don&apos;t overdo it.
                    </body>
                    <marks>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">decision</mark>
                        <mark type="keyword">proof</mark>
                        <mark type="keyword">propagat</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="regex" regex-flags="i">comprehen|understand</mark>
                        <mark type="keyword">over</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="77">
            <body>What is the single responsibility principle?</body>
            <answers>
                <answer>
                    <body>A class should only ever have one reason to change. If there are more, split the
                        functionality. Should lead to cohesion at package/implementation level. Idea is simple, but can
                        be hard to get right in practice.
                    </body>
                    <marks>
                        <mark type="keyword">reason</mark>
                        <mark type="keyword">change</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="78">
            <body>What is responsability?</body>
            <answers>
                <answer>
                    <body>A family of functions that serves one particular actor. It describes the core functionality of
                        a class.
                    </body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">actor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="79">
            <body>What is an actor in relation to a responsibility?</body>
            <answers>
                <answer>
                    <body>An actor for a responsibility is the single source of change for that responsibility.</body>
                    <marks>
                        <mark type="keyword">change</mark>
                        <mark type="regex" regex-flags="i">single|only|sole</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="80">
            <body>What is meant by separation of concerns?</body>
            <answers>
                <answer>
                    <body>Talk about different things (features) in different places (non-functional and functional).
                        Example: Business logic, presentation, data layer. Functional: related to
                        low coupling/high cohesion.
                    </body>
                    <marks>
                        <mark type="keyword">different</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="81">
            <body>What is the open/closed principle?</body>
            <answers>
                <answer>
                    <body>Software entities should be open for extension but closed for modifications. Related to
                        inheritance/polymorphism in object-oriented programming.
                    </body>
                    <marks>
                        <mark type="keyword">exten</mark>
                        <mark type="keyword">modif</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="82">
            <body>What is Liskov&apos;s substitution principle?</body>
            <answers>
                <answer>
                    <body>If q(x) is a provable property of objects x of type t, then q(y) is provable for objects y of
                        type s, where s subtype t. In words: Subtypes must be substitutable for base types, child
                        classes must break parent&apos;s type definition.
                    </body>
                    <marks>
                        <mark type="keyword">property</mark>
                        <mark type="keyword">type</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="83">
            <body>What is a child class not allowed to do in order to conform to Liskov&apos;s substitution principle?
            </body>
            <answers>
                <answer>
                    <body>It must not remove base class behavior, strengthen/weaken pre/post-conditions, violate base
                        class invariants and require calling code to know it is different from the base type.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">remove|delete</mark>
                        <mark type="keyword">condition</mark>
                        <mark type="keyword">invariant</mark>
                        <mark type="keyword">call</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="84">
            <body>What is the Interface-Segregation Principle (ISP)?</body>
            <answers>
                <answer>
                    <body>Clients should not be forced to depend on interfaces they do not use (small cohesive
                        interfaces instead of fat interfaces). Related to single responsibility principle.
                    </body>
                    <marks>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">use</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="85">
            <body>What is meant by &apos;anticipate change&apos;?</body>
            <answers>
                <answer>
                    <body>Build components in a way to minimize effort for potential future changes. Compromise between
                        generality and specificity. Consider potential extensions/changes. Don&apos;t overdo it.
                    </body>
                    <marks>
                        <mark type="keyword">future</mark>
                        <mark type="keyword">change</mark>
                        <mark type="keyword">specific</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="86">
            <body>What is meant by &quot;don&apos;t repeat yourself&quot;?</body>
            <answers>
                <answer>
                    <body>Every piece of knowledge and functionality must have a single, unambiguous, authoritative
                        representation within a system. If there are more than one they can diverge unexpectedly, lead
                        to redundancy, increase complexity and ambiguity.
                    </body>
                    <marks>
                        <mark type="keyword">know</mark>
                        <mark type="keyword">represent</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="87">
            <body>What are the four types of duplication?</body>
            <answers>
                <answer>
                    <body>Imposed duplication (developers feel they have no choice), inadvertent duplication (developers
                        don&apos;t realize they are duplicating information), impatient duplication (developers get
                        lazy), inter-developer duplication (multiple people duplicate a piece of information).
                    </body>
                    <marks>
                        <mark type="keyword">imposed</mark>
                        <mark type="keyword">inadvertent</mark>
                        <mark type="keyword">impatient</mark>
                        <mark type="keyword">inter</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="88">
            <body>What is the difference between internal and external quality?</body>
            <answers>
                <answer>
                    <body>Good question! It is referenced in 2.1.3/2.1.4 slide 54 but apparently defined elsewhere.
                    </body>
                    <marks>
                        <mark type="manual"/>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="89">
            <body>What are the parts of a three tier architecture?</body>
            <answers>
                <answer>
                    <body>Load balancer, web/application server, data server</body>
                    <marks>
                        <mark type="keyword">balance</mark>
                        <mark type="regex" regex-flags="i">web|appl</mark>
                        <mark type="regex" regex-flags="i">data|stor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="90">
            <body>What are some advantages/disadvantages of a three tier architecture?</body>
            <answers>
                <answer>
                    <body>Effiecient, all in one hand, large attack surface (compromised web server equals compromised
                        application)
                    </body>
                    <marks>
                        <mark type="keyword">effici</mark>
                        <mark type="keyword">attack</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="91">
            <body>What are the parts of a four tier architecture?</body>
            <answers>
                <answer>
                    <body>Load balancer, web server, application server, data server</body>
                    <marks>
                        <mark type="keyword">balance</mark>
                        <mark type="keyword">web</mark>
                        <mark type="keyword">appl</mark>
                        <mark type="regex" regex-flags="i">data|stor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="92">
            <body>What are the benefits and drawbacks of four tier over three tier?</body>
            <answers>
                <answer>
                    <body>Reduced attack surface (web/application servers separated). However, need to run more
                        servers.
                    </body>
                    <marks>
                        <mark type="keyword">attack</mark>
                        <mark type="keyword">server</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="93">
            <body>What s a demilitarized zone?</body>
            <answers>
                <answer>
                    <body>An intermediate zone between the hostile internet and the internal network used for public
                        servers. Compromising a public server does not gain access to the internal network.
                    </body>
                    <marks>
                        <mark type="keyword">internet</mark>
                        <mark type="keyword">internal</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.2 Antipatterns -->
        <question type="extended-answer" id="94">
            <body>What is an antipattern?</body>
            <answers>
                <answer>
                    <body>A literary form describing a commonly occurring solution to a problem that generates negative
                        consequences. This can occur due to insufficient knowledge, experience in solving particular
                        type of problem, or applying a pattern in the wrong context.
                    </body>
                    <marks>
                        <mark type="keyword">solution</mark>
                        <mark type="keyword">negative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="95">
            <body>What are some of the goals of a higher level vocabulary in relation to antipatterns?</body>
            <answers>
                <answer>
                    <body>Simplify communication, enable concise description, provide real-world experience, provide
                        remedy for most common predicaments, highlight the most common problems, provide the tools to
                        recognize problems and causes. (Source: 2.2 slide 5)
                    </body>
                    <marks>
                        <mark type="keyword">simpl</mark>
                        <mark type="keyword">descr</mark>
                        <mark type="keyword">exper</mark>
                        <mark type="keyword">problem</mark>
                        <mark type="keyword">cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="96">
            <body>What are the two types of antipatterns relating to software?</body>
            <answers>
                <answer>
                    <body>Software development antipatterns (describe useful refactorings) and software architecture
                        antipatterns (system-level structure).
                    </body>
                    <marks>
                        <mark type="keyword">dev</mark>
                        <mark type="keyword">arch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="97">
            <body>What are the seven deadly sins in software practice?</body>
            <answers>
                <answer>
                    <body>Haste (lack of time), apathy (lack of care), narrow-mindedness (refuse to accept widely-known
                        solutions), sloth (easy answers), avarice (excessive complexity), ignorance (failure to seek
                        understanding), pride/hubris (not-invented-here)
                    </body>
                    <marks>
                        <mark type="keyword">haste</mark>
                        <mark type="keyword">apathy</mark>
                        <mark type="keyword">narrow-minded</mark>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">ignorance</mark>
                        <mark type="regex" regex-flags="i">pride|hubris</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="98">
            <body>What are typical root causes and other causes of the blob antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: sloth, haste. Other causes: lack of (object-oriented) architecture and
                        architecture enforcement, too limited intervention and specified disaster.
                    </body>
                    <marks>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">haste</mark>
                        <mark type="keyword">arch</mark>
                        <mark type="keyword">enforce</mark>
                        <mark type="keyword">intervent</mark>
                        <mark type="keyword">disaster</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9001">
            <body>What is the refactored solution of the blob antipattern?</body>
            <answers>
                <answer>
                    <body>Refactoring of responsibilities</body>
                    <marks>
                        <mark type="keyword">respons</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="99">
            <body>What is the functional decomposition antipattern?</body>
            <answers>
                <answer>
                    <body>The result of experienced non-object-oriented developers developing in a object-oriented
                        language, causing the program to look like a functional program using workarounds.
                    </body>
                    <marks>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="100">
            <body>What are the root causes and other causes of the functional decomposition antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: avarice, greed, sloth. Other causes: lack of object-oriented understanding, lack
                        of architecture enforcement, specified disaster.
                    </body>
                    <marks>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">greed</mark>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">enforce</mark>
                        <mark type="keyword">disaster</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="101">
            <body>Which room is used to torture Winston Smith?</body>
            <answers>
                <answer>
                    <body>Room 101</body>
                    <marks>
                        <mark type="keyword">101</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="102">
            <body>What is the auto-generated stovepipe antipattern?</body>
            <answers>
                <answer>
                    <body>Occurs in an attempt to migrate existing software interfaces to distributed interfaces without
                        modifying the software design. This generates a range of problems: Fine-grained communication
                        between interfaces can be inefficient in distributed environments, existing interfaces may be
                        implementation specific, applications might assume locality (access to filesystem etc.), and
                        excessive complexity can arise in larger scale systems.
                    </body>
                    <marks>
                        <mark type="keyword">distribut</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="103">
            <body>How can auto-generated stovepipe be refactored?</body>
            <answers>
                <answer>
                    <body>By reengineering interfaces and creating a coarse-grained object model for communication.
                    </body>
                    <marks>
                        <mark type="keyword">reengineer</mark>
                        <mark type="keyword">object</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="104">
            <body>What is the golden hammer antipattern?</body>
            <answers>
                <answer>
                    <body>When a team has experience in a particular solution approach and attempts to solve any new
                        problems using the familiar approach, even though it might not be suitable for the specific
                        problem instance.
                    </body>
                    <marks>
                        <mark type="keyword">solution</mark>
                        <mark type="keyword">problem</mark>
                        <mark type="keyword">experience</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="105">
            <body>What are the root causes of the golden hammer antipattern and what are some other causes?</body>
            <answers>
                <answer>
                    <body>Root causes: ignorance, pride, narrow-mindedness. Other causes: several successes with a
                        particular approach, large investment in a technology, isolation of group, reliance on
                        proprietary features.
                    </body>
                    <marks>
                        <mark type="keyword">ignorance</mark>
                        <mark type="keyword">pride</mark>
                        <mark type="keyword">narrow-minded</mark>
                        <mark type="keyword">investment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="106">
            <body>What is the refactored solution of the golden hammer antipattern?</body>
            <answers>
                <answer>
                    <body>Expand your horizons</body>
                    <marks>
                        <mark type="keyword">horizon</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="107">
            <body>What is the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>A design that was influenced by many stakeholders, leading to excessive complexity in
                        features/variations. May be found in some standards.
                    </body>
                    <marks>
                        <mark type="keyword">complex</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="108">
            <body>What are some root causes and other typical causes of the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: pride, avarice. Other typical causes: lack of project architect, bad meeting or
                        software process, attempt to make everybody happy, gold plating (modifications based on
                        proprietary interests)
                    </body>
                    <marks>
                        <mark type="keyword">pride</mark>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">arch</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">gold</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="109">
            <body>What is the refactored solution to the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>Meeting facilitation. Use all the standard methods to hold coordinated meetings.</body>
                    <marks>
                        <mark type="keyword">facilitat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="110">
            <body>What is a typical example of a design by committee used in the lecture?</body>
            <answers>
                <answer>
                    <body>The SQL standard, which started out in 1989 as a 115 page document, then had a 580 page 1992
                        standardization called SQL92 and died before SQL3.
                    </body>
                    <marks>
                        <mark type="keyword">sql</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9002">
            <body>What are the antipatterns covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Blob, functional decomposition, auto-generated stovepipe, golden hammer, design by committee
                    </body>
                    <marks>
                        <mark type="keyword">blob</mark>
                        <mark type="keyword">functional decomposit</mark>
                        <mark type="keyword">stovepipe</mark>
                        <mark type="keyword">hammer</mark>
                        <mark type="keyword">design by committee</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.7: Reuse -->
        <question type="extended-answer" id="111">
            <body>What are some technical reasons why reuse often does not work?</body>
            <answers>
                <answer>
                    <body>Often done in-the-small/at code level, with limited scope, and unsystematicaly. Often, the
                        consideration of non functional requirements, quality characteristics, dependencies, correctness
                        and completeness are unclear or unfulfilled.
                    </body>
                    <marks>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">dependenc</mark>
                        <mark type="keyword">complet</mark>
                        <mark type="keyword">correct</mark>
                        <mark type="keyword">scope</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="112">
            <body>What are some organizational reasons why reuse often does not work?</body>
            <answers>
                <answer>
                    <body>Reuse rarely planned or done too late, lack of motivation/incentive (NIH), lack of defined
                        interfaces or system/requirement knowledge, lack of marketplaces and standards.
                    </body>
                    <marks>
                        <mark type="keyword">plan</mark>
                        <mark type="regex" regex-flags="i">motiv|incent</mark>
                        <mark type="keyword">interfac</mark>
                        <mark type="keyword">require</mark>
                        <mark type="keyword">standard</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="113">
            <body>What is a tradeoff conflict in reuse?</body>
            <answers>
                <answer>
                    <body>Flexibility/Stability: Too flexible requires expensive adaptations, too inflexible improves
                        stability but prevents reuse.
                    </body>
                    <marks>
                        <mark type="keyword">flex</mark>
                        <mark type="keyword">stab</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="114">
            <body>What are some architectural principles that help support reuse?</body>
            <answers>
                <answer>
                    <body>Modularity, loose coupling/high cohesion, information hiding, separation of concerns.</body>
                    <marks>
                        <mark type="keyword">modul</mark>
                        <mark type="keyword">coupl</mark>
                        <mark type="keyword">cohes</mark>
                        <mark type="keyword">hiding</mark>
                        <mark type="keyword">concern</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="115">
            <body>What types of reuse are there?</body>
            <answers>
                <answer>
                    <body>Opportunistic (ad-hoc) reuse, planned (structured) reuse.</body>
                    <marks>
                        <mark type="keyword">opport</mark>
                        <mark type="keyword">plan</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="116">
            <body>What is meant by clone-and-own?</body>
            <answers>
                <answer>
                    <body>A common reuse practice that involves cloning some existing component/code and developing it
                        independently from there on.
                    </body>
                    <marks>
                        <mark type="keyword">reus</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="117">
            <body>What are some problems with ad-hoc reuse?</body>
            <answers>
                <answer>
                    <body>It does not scale due to lack of organization and management. Significant effort goes into
                        search, evaluation, adaptation, integration, clone detection, maintenance.
                    </body>
                    <marks>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">maint</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="118">
            <body>What types of structured reuse are there?</body>
            <answers>
                <answer>
                    <body>Configurable software solutions (essential functionality parameterized, no code changes),
                        software product lines (construction kits), software frameworks (reusable libraries of
                        artifacts, not standalone).
                    </body>
                    <marks>
                        <mark type="keyword">solution</mark>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">framework</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="119">
            <body>What are variability subjects/objects?</body>
            <answers>
                <answer>
                    <body>Subject: Variable item of real world or variable property of item. Object: A particular
                        instance of variability subject.
                    </body>
                    <marks>
                        <mark type="keyword">item</mark>
                        <mark type="keyword">instan</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="120">
            <body>What is internal/external variability?</body>
            <answers>
                <answer>
                    <body>Internal: Variability of domain artifacts that is invisible to customers. External:
                        Variability of domain artifacts that is visible to customers.
                    </body>
                    <marks>
                        <mark type="keyword">visible</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="121">
            <body>What is the binding time converning variability?</body>
            <answers>
                <answer>
                    <body>The moment that variability is resolved.</body>
                    <marks>
                        <mark type="keyword">resol</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="122">
            <body>What is meant by managed variability?</body>
            <answers>
                <answer>
                    <body>Defining variability, managing variable artifacts, resolving variability, maintaining trace
                        information.
                    </body>
                    <marks>
                        <mark type="keyword">defin</mark>
                        <mark type="keyword">artifact</mark>
                        <mark type="keyword">resol</mark>
                        <mark type="keyword">info</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="123">
            <body>What are some shortcomings of modeling variability in traditional software development models?</body>
            <answers>
                <answer>
                    <body>Hard to keep information consistent, hard to determine relation in variable requirements to
                        variable design, realization, test, overloading of existing models, different concepts in
                        different tools.
                    </body>
                    <marks>
                        <mark type="keyword">consisten</mark>
                        <mark type="keyword">require</mark>
                        <mark type="keyword">overload</mark>
                        <mark type="keyword">tool</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="124">
            <body>What is an orthogonal variability model?</body>
            <answers>
                <answer>
                    <body>Defines variability of software product line. Relates to variability defined in other
                        models.
                    </body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">line</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="125">
            <body>What type of diagram is used to model variability?</body>
            <answers>
                <answer>
                    <body>A feature diagram</body>
                    <marks>
                        <mark type="keyword">feature</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="126">
            <body>What is a variation point/variant?</body>
            <answers>
                <answer>
                    <body>Variation point: Representation of variability subject, including domain artifacts and
                        contextual information. Variant is representation of variability objects within domain
                        artifacts.
                    </body>
                    <marks>
                        <mark type="keyword">subject</mark>
                        <mark type="keyword">object</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="127">
            <body>Label the numbered items in the feature diagram:
                <p/>
                <img src="res/127_feature_diagram.png"/>
            </body>
            <answers>
                <answer>
                    <body>1: Mandatory 2: Optional 3: Alternative 4: Or 5: Requires 6: Excludes</body>
                    <marks>
                        <mark type="keyword">mandat</mark>
                        <mark type="keyword">option</mark>
                        <mark type="keyword">alternat</mark>
                        <mark type="keyword">or</mark>
                        <mark type="keyword">require</mark>
                        <mark type="keyword">exclude</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="128">
            <body>Whatprogramming paradigms can support variability at code level?</body>
            <answers>
                <answer>
                    <body>Conditional compilation, polymorphism, aspect-oriented programming</body>
                    <marks>
                        <mark type="keyword">condition</mark>
                        <mark type="keyword">polymorph</mark>
                        <mark type="keyword">aspect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="129">
            <body>What is a product line architecture?</body>
            <answers>
                <answer>
                    <body>A generic software architecture for a product line, containing the architecture for all line
                        members.
                    </body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">arch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="130">
            <body>What is the difference between a normal architecture and a product line architecture?</body>
            <answers>
                <answer>
                    <body>The product line architecture covers additional conerns: common/variable parts, specific
                        instances, how is support ensured for all members?
                    </body>
                    <marks>
                        <mark type="keyword">concern</mark>
                        <mark type="keyword">instance</mark>
                        <mark type="keyword">member</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="131">
            <body>What is a software product line?</body>
            <answers>
                <answer>
                    <body>A software product line is a set of applications with a common architecture and shared
                        components, with each application specialized to reflect different requirements.
                    </body>
                    <marks>
                        <mark type="keyword">applicat</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">require</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="132">
            <body>What is Software Product Line Engineering?</body>
            <answers>
                <answer>
                    <body>The adoption of traditional product line approaches for building applications for mass
                        customization through managed variability to systematically model commonalities and the
                        differences in software applications.
                    </body>
                    <marks>
                        <mark type="keyword">manage</mark>
                        <mark type="keyword">variable</mark>
                        <mark type="keyword">custom</mark>
                        <mark type="keyword">model</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="133">
            <body>What types of specialization exist for a software product line?</body>
            <answers>
                <answer>
                    <body>Platform specialization (OS, etc.), environment specialization (operating environment, e.g.
                        communication equipment), functional specialization
                        (different customer requirements), process specialization (different business process)
                    </body>
                    <marks>
                        <mark type="keyword">platform</mark>
                        <mark type="keyword">environ</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">process</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="134">
            <body>What are some reasong for product line engineering?</body>
            <answers>
                <answer>
                    <body>Cost, quality, time to market (special emphasis), focus on functionality (by application
                        development based on pre-built configurable components) instead of technology.
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="135">
            <body>What are the rules of thumb for cost reduction with PLE?</body>
            <answers>
                <answer>
                    <body>Investment: 1x-2x system cost (Cost for 1st system: 2x-3x). Saving begins between 2nd/3rd
                        product.
                    </body>
                    <marks>
                        <mark type="keyword">invest</mark>
                        <mark type="keyword">sav</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="136">
            <body>What problem is tackled by PLE?</body>
            <answers>
                <answer>
                    <body>Software companies develop multiple products in business area, that grow over time, are
                        similar but not identical, where from scratch development is unproductive.
                    </body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">time</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="137">
            <body>What is an advantage of PLE when it comes to change?</body>
            <answers>
                <answer>
                    <body>Changes can propagate within the product or across multiple products.</body>
                    <marks>
                        <mark type="keyword">propagat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="138">
            <body>Fill in the blanks:
                <p/>
                <img src="res/138_ple.png"/>
            </body>
            <answers>
                <answer>
                    <body>1: Application engineering, 2: Family engineering, 3: feed-forward, 4: feedback</body>
                    <marks>
                        <mark type="keyword">app</mark>
                        <mark type="keyword">family</mark>
                        <mark type="keyword">feed</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="139">
            <body>What is family/domain engineering?</body>
            <answers>
                <answer>
                    <body>Identification of commonalities, definition and construction of reusable artifacts considering
                        economically viable variability, definition of set of applications (scope) of the software
                        product line.
                    </body>
                    <marks>
                        <mark type="keyword">common</mark>
                        <mark type="keyword">artifact</mark>
                        <mark type="keyword">variab</mark>
                        <mark type="keyword">scope</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="140">
            <body>What is application engineering?</body>
            <answers>
                <answer>
                    <body>Development of individual products based on PL artifact base, instantiating varibilities
                        according to requirements.
                    </body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">develop</mark>
                        <mark type="keyword">variab</mark>
                        <mark type="keyword">require</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="141">
            <body>What is the product line artifact base?</body>
            <answers>
                <answer>
                    <body>Capture characteristics of PL artifact, contains product model, process model, resources
                    </body>
                    <marks>
                        <mark type="keyword">character</mark>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">process</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="142">
            <body>What is scoping in relation to PLE?</body>
            <answers>
                <answer>
                    <body>The process of identifying and bounding areas (subdomains, existing assets) and capabilities
                        (features) of the product line where investment into reuse is economically viable and beneficial
                        to development.
                    </body>
                    <marks>
                        <mark type="keyword">ident</mark>
                        <mark type="regex" regex-flags="i">area|domain</mark>
                        <mark type="regex" regex-flags="i">capabilit|feature</mark>
                        <mark type="keyword">econ</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="143">
            <body>Which aspects need to be considered in PLE scoping?</body>
            <answers>
                <answer>
                    <body>Products, domains, featuers, assets?</body>
                    <marks>
                        <mark type="keyword">product</mark>
                        <mark type="keyword">domain</mark>
                        <mark type="keyword">feature</mark>
                        <mark type="keyword">asset</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="144">
            <body>What is the product feature matrix?</body>
            <answers>
                <answer>
                    <body>A matrix showing features in subdomains and the products supported by it.</body>
                    <marks>
                        <mark type="keyword">feature</mark>
                        <mark type="keyword">domain</mark>
                        <mark type="keyword">product</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="145">
            <body>What are some arguments for/against PLE?</body>
            <answers>
                <answer>
                    <body>+: Reduced cost, increased quality, decreased time to market, better understanding of domain,
                        economic structured reuse. -: high up-front investment, scoping needs strong domain knowledge,
                        limited success in practice.
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">market</mark>
                        <mark type="keyword">domain</mark>
                        <mark type="keyword">reuse</mark>
                        <mark type="keyword">invest</mark>
                        <mark type="keyword">scop</mark>
                        <mark type="keyword">practic</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="146">
            <body>What is a software framework?</body>
            <answers>
                <answer>
                    <body>Conventions, principles, and practices for the description of architectures established within
                        a specific domain of application and/or community of stakeholders.
                    </body>
                    <marks>
                        <mark type="keyword">convent</mark>
                        <mark type="keyword">princip</mark>
                        <mark type="keyword">practic</mark>
                        <mark type="keyword">architect</mark>
                        <mark type="keyword">domain</mark>
                        <mark type="keyword">stakeholder</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="147">
            <body>Find _. A _ provides support for generic features that are likely to be used in all applications of a
                similar type as well as reuse of specific classes. A _ supports design reuse, it provides a skeleton
                architecture. A _ is language specific.
            </body>
            <answers>
                <answer>
                    <body>Framework</body>
                    <marks>
                        <mark type="keyword">framework</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="148">
            <body>What is the difference between software libraries and frameworks in relation to their extension
                points?
            </body>
            <answers>
                <answer>
                    <body>Class libraries use the call-down principle (user code calls library). Framworks use the
                        call-back principle (framework calls user code).
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">call.*down</mark>
                        <mark type="regex" regex-flags="i">call.*back</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="149">
            <body>What is a reference architecture?</body>
            <answers>
                <answer>
                    <body>An abstract software architecture for a specific application area, defining structures and
                        types of software elements, their interactions and responsibilities applicable for all systems
                        of a domain.
                    </body>
                    <marks>
                        <mark type="keyword">applicat</mark>
                        <mark type="keyword">structure</mark>
                        <mark type="keyword">element</mark>
                        <mark type="keyword">interact</mark>
                        <mark type="keyword">respons</mark>
                        <mark type="keyword">domain</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="150">
            <body>What are the types of reference architectures?</body>
            <answers>
                <answer>
                    <body>Functional (structure functionality throughout functional areas), logical (defines
                        layers/components), technical (defines language/infrastructure).
                    </body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">technic</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.5 Testability -->
        <!-- TODO: Where was the original introduction to diagram seen on slide 2? Iso diagram -->
        <question type="extended-answer" id="151">
            <body>What defines a good test case?</body>
            <answers>
                <answer>
                    <body>One that finds a potential bug with cost effectiveness (design, execution, evaluation,
                        localization, fix)
                    </body>
                    <marks>
                        <mark type="keyword">bug</mark>
                        <mark type="keyword">cost</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="152">
            <body>What are some difficult systems to test any why?</body>
            <answers>
                <answer>
                    <body>GUIs (how can a test observe and control?), systems with databases (underlying state changes),
                        cloud-based systems (distribution, differences to development environment), non-deterministic
                        systems (same input different output)
                    </body>
                    <marks>
                        <mark type="keyword">gui</mark>
                        <mark type="keyword">database</mark>
                        <mark type="keyword">cloud</mark>
                        <mark type="keyword">determin</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="153">
            <body>What is observability and controllability?</body>
            <answers>
                <answer>
                    <body>Observability: Can everything relevant (internal state, diagnosis log, etc.) be observed by
                        the tester? Controllability: Can the state of the program be modified to facilitate the test
                        easily?
                    </body>
                    <marks>
                        <mark type="keyword">state</mark>
                        <mark type="keyword">observ</mark>
                        <mark type="keyword">modif</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="154">
            <body>What is the definition of testability and to what concepts of software engineering is it applied?
            </body>
            <answers>
                <answer>
                    <body>Degree to which a system/component/requirement facilitates establishment of test criteria and
                        performance of tests to determine whether they have been met.
                    </body>
                    <marks>
                        <mark type="keyword">criter</mark>
                        <mark type="keyword">perform</mark>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">requirement</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="155">
            <body>What is the black-box/white-box approach to measuring testability?</body>
            <answers>
                <answer>
                    <body>Black box: difficulty developing a test suite for some test selection criterion C. White box:
                        difficulty developing a test suite for a program P and test selection criterion C.
                    </body>
                    <marks>
                        <mark type="keyword">test</mark>
                        <mark type="keyword">criter</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="156">
            <body>What is the probabilistic definition of testability in relation to finding bugs?</body>
            <answers>
                <answer>
                    <body>Testability is the likelihood of a program to fail with the next test if software includes a
                        bug (this is also influenced by the quality of the test cases, not just by the system).
                    </body>
                    <marks>
                        <mark type="keyword">fail</mark>
                        <mark type="keyword">bug</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="157">
            <body>What other verification and validation techniques are there when the system/module shows poor
                testability?
            </body>
            <answers>
                <answer>
                    <body>Review and formal verification</body>
                    <marks>
                        <mark type="keyword">review</mark>
                        <mark type="keyword">formal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="158">
            <body>What are the two types of information loss and what is the problem of information loss with
                testability?
            </body>
            <answers>
                <answer>
                    <body>Implicit loss: many input values lead to the same output value. Explicit loss: Internal state
                        is not verified after execution of a module. This loss leads to a decreased probability of
                        finding a bug, as it is not propagated to the output. The domain/range ratio (|input
                        domain|/|output domain|) correlates with implicit losses.
                    </body>
                    <marks>
                        <mark type="keyword">input</mark>
                        <mark type="keyword">output</mark>
                        <mark type="keyword">bug</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="159">
            <body>What is the tradeoff between testability and modularity?</body>
            <answers>
                <answer>
                    <body>Testable systems need to be able to access the inner state of the system under test (or
                        otherwise observe it well), while modularity wants to hide as much internal information as
                        possible (information hiding).
                    </body>
                    <marks>
                        <mark type="keyword">hide</mark>
                        <mark type="keyword">informat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="160">
            <body>How can a program be modified to measure testability of a system and or the quality of a test suite?
            </body>
            <answers>
                <answer>
                    <body>A defect that changes the program&apos;s inner state can be injected into the program and the
                        test suit executed. The likelihood that the output is changed/caught by the test suite
                        correlates with testability.
                    </body>
                    <marks>
                        <mark type="keyword">state</mark>
                        <mark type="keyword">output</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 4: From source code to physical deployment -->
        <question type="extended-answer" id="161">
            <body>What types of version control are there?</body>
            <answers>
                <answer>
                    <body>Local, centralized, distributed</body>
                    <marks>
                        <mark type="keyword">local</mark>
                        <mark type="keyword">centralized</mark>
                        <mark type="keyword">distributed</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="162">
            <body>What are some of the advantages of centralized version control and distributed version control?</body>
            <answers>
                <answer>
                    <body>Centralized: easy to maintain single server. Distributed: no single point of control, private
                        version control possible
                    </body>
                    <marks>
                        <mark type="keyword">server</mark>
                        <mark type="keyword">point</mark>
                        <mark type="keyword">private</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="163">
            <body>What differences are there in how svn/git store changes?</body>
            <answers>
                <answer>
                    <body>SVN stores a list of file-based delta. Git stores snapshots of a directory tree.</body>
                    <marks>
                        <mark type="keyword">delta</mark>
                        <mark type="keyword">snapshot</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="164">
            <body>What three stages for files does git have?</body>
            <answers>
                <answer>
                    <body>Modified (unstaged), staged, committed</body>
                    <marks>
                        <mark type="regex" regex-flags="i">modif|unstage</mark>
                        <mark type="keyword">stage</mark>
                        <mark type="keyword">commit</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="165">
            <body>What is a branch in git?</body>
            <answers>
                <answer>
                    <body>A named pointer to a commit using its hash</body>
                    <marks>
                        <mark type="keyword">point</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="166">
            <body>What is continuous integration?</body>
            <answers>
                <answer>
                    <body>A fully automated and reproducible build, including testing, that runs many times a day to
                        integrate changes often.
                    </body>
                    <marks>
                        <mark type="keyword">automat</mark>
                        <mark type="keyword">reproduc</mark>
                        <mark type="keyword">test</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="167">
            <body>What are some reasons to use continuous integration?</body>
            <answers>
                <answer>
                    <body>Reduced risk, integrated quality assurance, rapid feedback, availability of stable release
                    </body>
                    <marks>
                        <mark type="keyword">risk</mark>
                        <mark type="keyword">quality</mark>
                        <mark type="keyword">feedback</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="168">
            <body>What is continuous delivery?</body>
            <answers>
                <answer>
                    <body>A software engineering approach in which teams produce valuable software in short cycles that
                        can be reliably released at any time.
                    </body>
                    <marks>
                        <mark type="keyword">cycle</mark>
                        <mark type="keyword">release</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="169">
            <body>What are some benefits of continuous delivery?</body>
            <answers>
                <answer>
                    <body>Time to market, customer satisfaction, productivity and efficiency, building the right
                        product, reliable release
                    </body>
                    <marks>
                        <mark type="keyword">market</mark>
                        <mark type="keyword">satis</mark>
                        <mark type="keyword">efficien</mark>
                        <mark type="keyword">reliab</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="170">
            <body>What is the difference between continuous delivery and continuous deployment?</body>
            <answers>
                <answer>
                    <body>In continuous deployment, the deploy step is triggered automatically. Every change therefore
                        automatically gets put into production, resulting in many deployments per day. In continuous
                        deliver, this step happens manually.
                    </body>
                    <marks>
                        <mark type="keyword">prod</mark>
                        <mark type="keyword">auto</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="171">
            <body>What is a deployment pipeline?</body>
            <answers>
                <answer>
                    <body>An automated manifestation of your process for getting software from version control to
                        users.
                    </body>
                    <marks>
                        <mark type="keyword">auto</mark>
                        <mark type="keyword">version</mark>
                        <mark type="keyword">user</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="172">
            <body>What is a smoke test?</body>
            <answers>
                <answer>
                    <body>Smoke testing is preliminary testing to reveal simple failures severe enough to reject a
                        prospective software release.
                    </body>
                    <marks>
                        <mark type="keyword">fail</mark>
                        <mark type="keyword">release</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="173">
            <body>What eight deployment automation patterns were covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Repository (version control all relevant files for reproducability), scripted deployment (all
                        deployment is automated), single command (a single command generates working software for
                        users), externalized configuration (variable values externalized into build-time properties),
                        tokenize configuration (token values in config files are replaced during scripted deployment by
                        values from the externalized configuration), template verifier (single template file for all
                        target environments), unified deployment (single deployment script for all platforms and
                        environments), remote deployment (centralized machine for deploying to multiple target
                        environments).
                    </body>
                    <marks>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">remote</mark>
                        <mark type="keyword">script</mark>
                        <mark type="keyword">command</mark>
                        <mark type="keyword">repository</mark>
                        <mark type="keyword">token</mark>
                        <mark type="keyword">config</mark>
                        <mark type="keyword">templat</mark>
                        <mark type="keyword">unif</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="174">
            <body>What is blue-green deployment?</body>
            <answers>
                <answer>
                    <body>A technique where two live environments are used. The second (offline) environment is deployed
                        to, then the online/offline environments are switched.
                    </body>
                    <marks>
                        <mark type="keyword">env</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">switch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="175">
            <body>What is virtualization?</body>
            <answers>
                <answer>
                    <body>A combination of software/hardware engineering that creates virtual machines, an abstraction
                        that allows a single machine to act as if it were multiple machines.
                    </body>
                    <marks>
                        <mark type="keyword">machine</mark>
                        <mark type="keyword">abstraction</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="176">
            <body>What are some advantages of virtual machines?</body>
            <answers>
                <answer>
                    <body>Increased software compatibility, isolation, consolidation, and resource pooling.</body>
                    <marks>
                        <mark type="keyword">compat</mark>
                        <mark type="keyword">isol</mark>
                        <mark type="keyword">consol</mark>
                        <mark type="keyword">resourc</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="177">
            <body>What is the N x N compatibility nightmare? How is it solved?</body>
            <answers>
                <answer>
                    <body>Multiplicity of software stacks and multiplicity of hardware environments causes compatibility
                        issues. Containers (docker) can help deploy anything into any environment.
                    </body>
                    <marks>
                        <mark type="keyword">software</mark>
                        <mark type="keyword">hardware</mark>
                        <mark type="keyword">container</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="178">
            <body>What is cloud computing?</body>
            <answers>
                <answer>
                    <body>A specialized form of distributed computing that introduces utilization models for remotely
                        provisioning scalable and measured resources.
                    </body>
                    <marks>
                        <mark type="keyword">distribut</mark>
                        <mark type="keyword">provision</mark>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">measur</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="179">
            <body>What are some goals of cloud computing?</body>
            <answers>
                <answer>
                    <body>Increased availability, reliability, reduced investments, proportional costs, increased
                        scalability
                    </body>
                    <marks>
                        <mark type="keyword">availab</mark>
                        <mark type="keyword">reliab</mark>
                        <mark type="keyword">invest</mark>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">scal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="180">
            <body>What are the actors in the cloud reference architecture?</body>
            <answers>
                <answer>
                    <body>Cloud consumer, provider, auditor, broker, carrier (ISP)</body>
                    <marks>
                        <mark type="keyword">consum</mark>
                        <mark type="keyword">provid</mark>
                        <mark type="keyword">audit</mark>
                        <mark type="keyword">broker</mark>
                        <mark type="keyword">carrier</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="181">
            <body>What are the essential characterstics of cloud computing?</body>
            <answers>
                <answer>
                    <body>On-demand self-service, broad network access, resource pooling, rapid elasticity, measured
                        service
                    </body>
                    <marks>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">network</mark>
                        <mark type="keyword">resource</mark>
                        <mark type="keyword">elastic</mark>
                        <mark type="keyword">measur</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="182">
            <body>What is software as a service?</body>
            <answers>
                <answer>
                    <body>The ability for a consumer to use the provider&apos;s applications running on cloud
                        infrastructure.
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">cloud</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="193">
            <body>What is Platform as a Service?</body>
            <answers>
                <answer>
                    <body>The ability for a consumer to deploy consumer-created/acquired applications to cloud
                        infrastructure using programming languages, libraries, services, and tools supported by the
                        provider.
                    </body>
                    <marks>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">cloud</mark>
                        <mark type="keyword">support</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="194">
            <body>What is Infrastructure as a Service?</body>
            <answers>
                <answer>
                    <body>The ability for a consumer to provision computing resources (storage, network, etc) where the
                        consumer can deploy and run arbitrary software on cloud infrastructure.
                    </body>
                    <marks>
                        <mark type="keyword">resource</mark>
                        <mark type="keyword">software</mark>
                        <mark type="keyword">cloud</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="195">
            <body>What deployment models are there for cloud infrastructure?</body>
            <answers>
                <answer>
                    <body>Public (cloud open for use by general public), private (single organization use, owned and
                        managed by organization, on-site/off-site), outsourced private (single organization use, owned
                        and managed by third-party, on-site/off-site), community (multi organization use), and hybrid
                        (composition of multiple models) cloud.
                    </body>
                    <marks>
                        <mark type="keyword">public</mark>
                        <mark type="keyword">private</mark>
                        <mark type="keyword">outsourced</mark>
                        <mark type="keyword">community</mark>
                        <mark type="keyword">hybrid</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="196">
            <body>Which fundamental cloud architecture exists?</body>
            <answers>
                <answer>
                    <body>Workload distribution architecture (horizontal scaling, balancer), resource pooling
                        architecture (group identical resources), dynamic scalability (horizontal/vertical/relocation)
                        (dynamic allocation from resource pools for variable utilization), service load balancing
                        architecture (like workload distribution architecture, specifically for scaling cloud service
                        implementations)
                    </body>
                    <marks>
                        <mark type="keyword">workload</mark>
                        <mark type="keyword">resource</mark>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">balanc</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="197">
            <body>What are some challenges in cloud architectures?</body>
            <answers>
                <answer>
                    <body>Confidentiality, integrity, availability, privacy, increased attack surface, auditability,
                        forensics, legal issues, trust issues.
                    </body>
                    <marks>
                        <mark type="keyword">confident</mark>
                        <mark type="keyword">integrit</mark>
                        <mark type="keyword">availab</mark>
                        <mark type="keyword">priva</mark>
                        <mark type="keyword">attack</mark>
                        <mark type="keyword">audit</mark>
                        <mark type="keyword">forensic</mark>
                        <mark type="keyword">legal</mark>
                        <mark type="keyword">trust</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.6: Safety -->
        <question type="extended-answer" id="1000">
            <body>What is the difference between safety and security?</body>
            <answers>
                <answer>
                    <body>Safety ("Betriebssicherheit") is concerned with protecting the environment from the system
                        while security ("Angriffssicherheit") is concerned with protecting the system from the
                        environment.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">environment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1001">
            <body>What is the goal of the safety threshold concept?</body>
            <answers>
                <answer>
                    <body>The goal is to determine how safe is 'safe enough' without over- or under-engineering a
                        product.
                    </body>
                    <marks>
                        <mark type="keyword">determine</mark>
                        <mark type="keyword">safe enough</mark>
                        <mark type="regex">over.*engineering</mark>
                        <mark type="regex">under.*engineering</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1002">
            <body>What is risk?</body>
            <answers>
                <answer>
                    <body>Risk is the combination of the probability of occurrence of harm and the severity of that
                        harm.
                    </body>
                    <marks>
                        <mark type="keyword">combination</mark>
                        <mark type="keyword">probability</mark>
                        <mark type="keyword">severity</mark>
                        <mark type="keyword">harm</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1003">
            <body>What is risk aversion?</body>
            <answers>
                <answer>
                    <body>The reluctance of people to accept a bargain with an uncertain payoff rather than another
                        bargain with more certain, but possibly lower, expected payoff.
                    </body>
                    <marks>
                        <mark type="keyword">reluctance</mark>
                        <mark type="keyword">accept</mark>
                        <mark type="keyword">uncertain</mark>
                        <mark type="keyword">certain</mark>
                        <mark type="keyword">payoff</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1004">
            <body>What is scale aversion?</body>
            <answers>
                <answer>
                    <body>The tendency to want greater protection where consequences are high.</body>
                    <marks>
                        <mark type="keyword">tendency</mark>
                        <mark type="keyword">protection</mark>
                        <mark type="keyword">consequences</mark>
                        <mark type="keyword">high</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1005">
            <body>What is the ALARP principle?</body>
            <answers>
                <answer>
                    <body>The "As Low As is Reasonably Practical" principle defines three risk regions: intolerable
                        region, tolerable/ALARP region, and the broadly acceptable region.
                    </body>
                    <marks>
                        <mark type="keyword">As Low As is Reasonably Practical</mark>
                        <mark type="keyword">intolerable region</mark>
                        <mark type="regex" regex-flags="i">tolerable region|ALARP region</mark>
                        <mark type="keyword">broadly acceptable region</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1006">
            <body>What is the goal of risk reduction?</body>
            <answers>
                <answer>
                    <body>The goal is to reduce risk to a tolerable level by combining multiple methods/means (not to
                        zero).
                    </body>
                    <marks>
                        <mark type="keyword">reduce</mark>
                        <mark type="keyword">tolerable level</mark>
                        <mark type="keyword">combining</mark>
                        <mark type="regex" regex-flags="i">methods|means</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1007">
            <body>What is the definition of safety?</body>
            <answers>
                <answer>
                    <body>The absence of unacceptable/unreasonable risk.</body>
                    <marks>
                        <mark type="keyword">absence</mark>
                        <mark type="regex" regex-flags="i">unacceptable|unreasonable</mark>
                        <mark type="keyword">risk</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1008">
            <body>How are faults, errors, and failures connected?</body>
            <answers>
                <answer>
                    <body>Faults manifest as an error and an error ultimately may cause a failure.</body>
                    <marks>
                        <mark type="keyword">manifest</mark>
                        <mark type="keyword">may</mark>
                        <mark type="keyword">cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1009">
            <body>What is a fault?</body>
            <answers>
                <answer>
                    <body>A fault is an abnormal condition that can cause an element or an item to fail.</body>
                    <marks>
                        <mark type="keyword">abnormal condition</mark>
                        <mark type="keyword">cause</mark>
                        <mark type="keyword">fail</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1010">
            <body>What is an error?</body>
            <answers>
                <answer>
                    <body>An error is the discrepancy between a computed, observed or measured value or condition and
                        the true, specified or theoretically correct value or condition.
                    </body>
                    <marks>
                        <mark type="keyword">discrepancy</mark>
                        <mark type="regex" regex-flags="i">value|condition</mark>
                        <mark type="regex" regex-flags="i">specified|theoretically correct</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1011">
            <body>What is a failure?</body>
            <answers>
                <answer>
                    <body>A failure is the termination of the ability of an element, to perform a function as required.
                    </body>
                    <marks>
                        <mark type="keyword">termination</mark>
                        <mark type="keyword">ability</mark>
                        <mark type="keyword">element</mark>
                        <mark type="keyword">perform</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">required</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1012">
            <body>What is the difference between systematic and random issues?</body>
            <answers>
                <answer>
                    <body>A random issue is caused by physical processes such as damage or fatigue, while a systematic
                        issue
                        is caused by specification or design issues, or hardware wear-out.
                    </body>
                    <marks>
                        <mark type="keyword">physical processes</mark>
                        <mark type="keyword">specification</mark>
                        <mark type="keyword">design</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1013">
            <body>What is a cascading failure?</body>
            <answers>
                <answer>
                    <body>A failure of an element causing another element of the same item to fail.</body>
                    <marks>
                        <mark type="keyword">failure</mark>
                        <mark type="keyword">element</mark>
                        <mark type="keyword">another</mark>
                        <mark type="keyword">same item</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1014">
            <body>What is a common cause failure?</body>
            <answers>
                <answer>
                    <body>A failure of two or more elements resulting form a single specific event or root cause.</body>
                    <marks>
                        <mark type="keyword">two or more</mark>
                        <mark type="keyword">elements</mark>
                        <mark type="keyword">root cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1015">
            <body>What does functional safety cover?</body>
            <answers>
                <answer>
                    <body>Functional safety focuses on the hazards and risks originating from the function of an (E/E)
                        system.
                    </body>
                    <marks>
                        <mark type="keyword">hazard</mark>
                        <mark type="keyword">risk</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1016">
            <body>What is the lifecycle approach to functional safety?</body>
            <answers>
                <answer>
                    <body>The various life cycle activities and defenses against systematic failures that are necessary
                        to achieve functional safety occurring at different stages in the design and operation of the
                        system.
                    </body>
                    <marks>
                        <mark type="keyword">life cycle activities</mark>
                        <mark type="keyword">defense</mark>
                        <mark type="keyword">systematic failure</mark>
                        <mark type="keyword">stages</mark>
                        <mark type="keyword">design</mark>
                        <mark type="keyword">operation</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1017">
            <body>What does the lifecycle approach to functional safety emphasize?</body>
            <answers>
                <answer>
                    <body>Integration of safety into the design; Systematic hazard identification and analysis;
                        Addressing the entire system in addition to the subsystems and components; Using protection
                        layers for risk reduction; Qualitative and quantitative approaches
                    </body>
                    <marks>
                        <mark type="keyword">integration</mark>
                        <mark type="keyword">systematic</mark>
                        <mark type="keyword">entire system</mark>
                        <mark type="keyword">protection layer</mark>
                        <mark type="keyword">qualitative</mark>
                        <mark type="keyword">quantitative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1018">
            <body>What are the two safety concepts in the lifecycle approach to functional safety?</body>
            <answers>
                <answer>
                    <body>The functional safety concept is a statement of the functionality to achieve the safety goal.
                        The
                        technical safety concept is a statement of how this functionality is implemented in hardware or
                        software.
                    </body>
                    <marks>
                        <mark type="keyword">functional</mark>
                        <mark type="keyword">statement</mark>
                        <mark type="keyword">functionality</mark>
                        <mark type="keyword">technical</mark>
                        <mark type="keyword">implement</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1019">
            <body>What are the objectives of safety analysis?</body>
            <answers>
                <answer>
                    <body>The objectives are:
                        ...to examine consequences of faults and failures on functions, behavior and design of
                        items/elements.
                        ...to provide information on conditions/causes that could lead to violation of a safety goal or
                        safety requirement.
                        ...to contribute to identification of new functional or non-functional hazards not previously
                        identified during the hazard analysis and risk assessment.
                    </body>
                    <marks>
                        <mark type="keyword">examine consequences</mark>
                        <mark type="keyword">provide information</mark>
                        <mark type="keyword">identification</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1020">
            <body>What are the differences between qualitative and quantitative safety analysis methods?</body>
            <answers>
                <answer>
                    <body>Qualitative methods require knowledge of relevant fault models and can identify failures.
                        Quantitative methods also require knowledge about relevant fault models and additionally about
                        quantitative hardware failure rates. They can complement qualitative analyses and are able to
                        predict the frequency of random hardware failures. Thus they are used to verify hardware
                        designs.
                    </body>
                    <marks>
                        <mark type="keyword">knowledge</mark>
                        <mark type="keyword">fault model</mark>
                        <mark type="keyword">identify failure</mark>
                        <mark type="keyword">failure rate</mark>
                        <mark type="keyword">predict</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1021">
            <body>What is the difference between inductive and deductive safety analysis methods?</body>
            <answers>
                <answer>
                    <body>Inductive methods are bottom-up (fault to failure) methods, while deductive methods are
                        top-down
                        (failure to fault) methods.
                    </body>
                    <marks>
                        <mark type="keyword">bottom-up</mark>
                        <mark type="keyword">top-down</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1022">
            <body>What is the usual relation between inductive and deductive safety analysis methods?</body>
            <answers>
                <answer>
                    <body>They are usually complementary.</body>
                    <marks>
                        <mark type="keyword">complementary
                        </mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1023">
            <body>What inductive safety analysis method was discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Failure Mode and Effects Analysis (FMEA)</body>
                    <marks>
                        <mark type="regex" regex-flags="i">Failure Mode and Effects Analysis|FMEA</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1024">
            <body>What deductive safety analysis method was discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Fault Tree Analysis (FTA)</body>
                    <marks>
                        <mark type="regex" regex-flags="i">Fault Tree Analysis|FTA</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1025">
            <body>What is the most important FMEA terminology? Also briefly explain it.</body>
            <answers>
                <answer>
                    <body>Failure Mode: Manner in which a component could potentially fail to meet design intent.
                        Failure Effects: Effects of the failure mode on the function as perceived by the customer.
                        Causes: Indications of a design weakness, the consequence of which is the failure mode.
                        Detection/Prevention Measures: Activities which will assure the design adequacy for the failure
                        cause under consideration.
                    </body>
                    <marks>
                        <mark type="keyword">failure mode</mark>
                        <mark type="keyword">failure effect</mark>
                        <mark type="keyword">cause</mark>
                        <mark type="regex" regex-flags="i">Detection Measure|Prevention Measure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1026">
            <body>What quantitative variables does FMEA consider? Also briefly explain them.</body>
            <answers>
                <answer>
                    <body>Severity: Rates the severity of a potential failure effect.
                        Occurrence: Rates the likelihood that the failure will occur.
                        Detection: Rates the likelihood that the problem will not be detected before it reaches the
                        end-user.
                        Risk Priority Number: Severity * Occurrence * Detection
                    </body>
                    <marks>
                        <mark type="keyword">severity</mark>
                        <mark type="keyword">occurrence</mark>
                        <mark type="keyword">detection</mark>
                        <mark type="keyword">risk priority number</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1027">
            <body>What is the goal of FTA?</body>
            <answers>
                <answer>
                    <body>The goal is to identify all conditions that lead to a system failure.</body>
                    <marks>
                        <mark type="keyword">identify</mark>
                        <mark type="keyword">condition</mark>
                        <mark type="keyword">fail</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1028">
            <body>What is the procedure of FTA?</body>
            <answers>
                <answer>
                    <body>Define the system under scrutiny. Determine undesired events (top event). Identify event or
                        series of events that lead to the top level event.
                    </body>
                    <marks>
                        <mark type="keyword">define</mark>
                        <mark type="keyword">undesired event</mark>
                        <mark type="keyword">identify</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.7: Security -->
        <question type="extended-answer" id="1029">
            <body>What are the CIA security properties? Explain them briefly.</body>
            <answers>
                <answer>
                    <body>Confidentiality: Can non-authorized parties see data?
                        Integrity: Has data been altered?
                        Availability: Is data always accessible?
                    </body>
                    <marks>
                        <mark type="keyword">confidentiality</mark>
                        <mark type="keyword">integrity</mark>
                        <mark type="keyword">availability</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1030">
            <body>What security properties other than CIA did the lecture cover?</body>
            <answers>
                <answer>
                    <body>Non-repudiation: Impossibility to inappropriately deny an action.
                        Authenticity: An action assigned to an entity was actually performed by that entity.
                        Auditability: Ability to reconstruct earlier states of a system.
                        Accountability: Ability to assign responsibility for actions to an entity.
                        Privacy: Refers to security of personal information.
                        Anonymity: The identity of an entity is hidden; one aspect of privacy.
                    </body>
                    <marks>
                        <mark type="keyword">non-repudiation</mark>
                        <mark type="keyword">authenticity</mark>
                        <mark type="keyword">auditability</mark>
                        <mark type="keyword">accountability</mark>
                        <mark type="keyword">privacy</mark>
                        <mark type="keyword">anonymity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1031">
            <body>What effect does increasing security usually have on usability?</body>
            <answers>
                <answer>
                    <body>It decreases usability.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">decrease|worse</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1032">
            <body>What four kinds of factors have to be leveraged for security?</body>
            <answers>
                <answer>
                    <body>Technical: e.g. cryptography
                        Organizational: e.g. defining responsibilities
                        People-related: e.g. education
                        Legal: e.g. liability regulations
                    </body>
                    <marks>
                        <mark type="keyword">technic</mark>
                        <mark type="keyword">organization</mark>
                        <mark type="keyword">people</mark>
                        <mark type="keyword">legal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1033">
            <body>What five design principles for designing secure systems were covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Least privilege: Every subject should not have more privileges than necessary.
                        Complete mediation: Access to every object must be controlled in a way not circumventable.
                        Secure, fail-safe defaults: Security mechanisms should start in a secure state and return to a
                        secure default state in case of failures.
                        Compartmentalization: Organize resources into groups, isolated from others except for limited,
                        controlled means of communication.
                        Minimum exposure: Minimize the attack surface a system presents to a potential adversary.
                    </body>
                    <marks>
                        <mark type="keyword">least privilege</mark>
                        <mark type="keyword">complete mediation</mark>
                        <mark type="keyword">fail-safe defaults</mark>
                        <mark type="keyword">compartmentalization</mark>
                        <mark type="keyword">minimum exposure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1034">
            <body>What kinds of implementation-level attacks were discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>SQL injections, cross-site scripting (XSS), and buffer-overflow attacks.</body>
                    <marks>
                        <mark type="keyword">SQL</mark>
                        <mark type="keyword">XSS</mark>
                        <mark type="keyword">overflow</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1035">
            <body>What are the three different types of XSS?</body>
            <answers>
                <answer>
                    <body>Non-persistent (or reflective) attacks: Malicious code in a link that goes to the server and
                        back.
                        Persistent attacks: Malicious code in server store, sent from server to client.
                        DOM based attacks: Server web application not involved.
                    </body>
                    <marks>
                        <mark type="keyword">non-persistent</mark>
                        <mark type="regex" regex-flags="i">\bpersistent\b</mark>
                        <mark type="keyword">dom</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1036">
            <body>What is an attack tree and how is it used?</body>
            <answers>
                <answer>
                    <body>An attack tree is a fault tree considering the role of attackers. Nodes are assigned
                        attributes such as possibilities, probabilities, and estimated impact. This identifies the most
                        important attacks to deploy countermeasures for.
                    </body>
                    <marks>
                        <mark type="keyword">fault tree</mark>
                        <mark type="keyword">attribute</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1037">
            <body>What is the BSI baseline protection?</body>
            <answers>
                <answer>
                    <body>It is basically a catalog of what should be done in most situations in order to secure
                        standard
                        infrastructure.
                    </body>
                    <marks>
                        <mark type="keyword">catalog</mark>
                        <mark type="keyword">secur</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1038">
            <body>What is the General Data Protection Regulation (GDPR)?</body>
            <answers>
                <answer>
                    <body>The GDPR applies to every organization dealing with european citizens and regulates how these
                        organizations have to handle private data.
                    </body>
                    <marks>
                        <mark type="keyword">organization</mark>
                        <mark type="keyword">europe</mark>
                        <mark type="keyword">private data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1038">
            <body>With which four goals may information security interfere with?</body>
            <answers>
                <answer>
                    <body>Performance, usability, time to market, and cost objectives.</body>
                    <marks>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">usability</mark>
                        <mark type="keyword">time</mark>
                        <mark type="keyword">cost</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.1: Introduction to distributed systems and middleware -->
        <question type="extended-answer" id="1039">
            <body>What is a distributed system?</body>
            <answers>
                <answer>
                    <body>A distributed system consists of physically disjoint compute resources, interconnected by a
                        network.
                    </body>
                    <marks>
                        <mark type="keyword">disjoint</mark>
                        <mark type="keyword">connected</mark>
                        <mark type="keyword">network</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1040">
            <body>What are a five of the characteristics of distributed systems covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Reliability, Availability, Heterogeneity, Openness, Security, Scalability, Fault-tolerance and
                        failure handling, Concurrency, Transparency, Predictable performance
                    </body>
                    <marks>
                        <mark type="keyword">reliability</mark>
                        <mark type="keyword">availability</mark>
                        <mark type="keyword">heterogeneity</mark>
                        <mark type="keyword">openness</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">fault-tolerance</mark>
                        <mark type="keyword">concurrency</mark>
                        <mark type="keyword">transparency</mark>
                        <mark type="keyword">predictable performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1041">
            <body>How are reliability and availability of a system related?</body>
            <answers>
                <answer>
                    <body>A reliable system has high availability but an available system may or may not be reliable.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">but</mark>
                        <mark type="keyword">not</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1042">
            <body>What are four of the aspects, that overall transparency depends on?</body>
            <answers>
                <answer>
                    <body>Access: Hide differences in data representation.
                        Location: Hide where a resource is located.
                        Migration: Hide that a resource may move to another location.
                        Relocation: Hide that a resource may be moved to another location while in use.
                        Replication Hide that a resource is replicated.
                        Concurrency: Hide that a resource may be shared by several competitive users.
                        Failure: Hide the failure and recovery of a resource.
                    </body>
                    <marks>
                        <mark type="keyword">access</mark>
                        <mark type="keyword">location</mark>
                        <mark type="keyword">migration</mark>
                        <mark type="keyword">relocation</mark>
                        <mark type="keyword">replication</mark>
                        <mark type="keyword">concurrency</mark>
                        <mark type="keyword">failure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1043">
            <body>What is middleware?</body>
            <answers>
                <answer>
                    <body>Middleware comprises services and abstractions that facilitate design, development and
                        deployment of distributed applications in heterogeneous, networked environments.
                    </body>
                    <marks>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">design</mark>
                        <mark type="keyword">develop</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">distributed</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1044">
            <body>What does middleware deal with?</body>
            <answers>
                <answer>
                    <body>Capturing common functionalities (like message passing), interoperability, and system
                        integration.
                    </body>
                    <marks>
                        <mark type="keyword">common function</mark>
                        <mark type="keyword">interoperability</mark>
                        <mark type="keyword">integration</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1045">
            <body>What are the three layers of the middleware stack?</body>
            <answers>
                <answer>
                    <body>Application layer; Middleware layer; IT infrastructure
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">middleware</mark>
                        <mark type="keyword">infrastructure</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.2: Database-centric architectures -->
        <question type="extended-answer" id="1045">
            <body>What is the main purpose of database-centric architectures?</body>
            <answers>
                <answer>
                    <body>The purpose is to handle data access and update.</body>
                    <marks>
                        <mark type="keyword">access</mark>
                        <mark type="keyword">update</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1046">
            <body>What is a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>The mainframe model uses the mainframe as a central repository for information as well as
                        processing for every application. Terminals enable input/output into the applications. All
                        administration takes place on the mainframe itself.
                    </body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">information</mark>
                        <mark type="keyword">processing</mark>
                        <mark type="keyword">terminal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1047">
            <body>What are some advantages of a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>Hardware maintenance cost reduction; Single point of administration; One type of
                        administrative skill set; Simple architecture and low bandwidth requirements
                    </body>
                    <marks>
                        <mark type="keyword">maintenance</mark>
                        <mark type="keyword">admin</mark>
                        <mark type="keyword">simple architecture</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1048">
            <body>What are some disadvantages of a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>Single point of failure; Character-based application only; Bottlenecks due to time-sharing
                        systems
                    </body>
                    <marks>
                        <mark type="keyword">single point of failure</mark>
                        <mark type="keyword">character-based</mark>
                        <mark type="keyword">bottleneck</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1049">
            <body>What layers does a typical three-layered client/server architecture consist of?</body>
            <answers>
                <answer>
                    <body>Client, Web server, and Data sources.</body>
                    <marks>
                        <mark type="keyword">client</mark>
                        <mark type="keyword">server</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1050">
            <body>What are some advantages of a typical three-layered client/server architecture?</body>
            <answers>
                <answer>
                    <body>Reduced hardware costs; No single point of failure; Flexibility; Scalable architecture
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">no single point of failure</mark>
                        <mark type="keyword">flexib</mark>
                        <mark type="keyword">scalab</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1051">
            <body>What are some disadvantages of a typical three-layered client/server architecture?</body>
            <answers>
                <answer>
                    <body>Heightened administrative costs; Increased security risk; Lack of centralized backup
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">backup</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1052">
            <body>What is a database view?</body>
            <answers>
                <answer>
                    <body>A view is a virtual relation (e.g. table) that does not actually exist in the database but is
                        produced upon request, at the time of request.
                    </body>
                    <marks>
                        <mark type="keyword">virtual</mark>
                        <mark type="keyword">produced</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1053">
            <body>What purposes can a database view fulfill?</body>
            <answers>
                <answer>
                    <body>Provides a powerful and flexible security mechanism by hiding parts; Permits customized data
                        access; Can simplify complex operations on base relations; Complex queries can be reused;
                        Logical data independence (view instantly incorporates changes in base relation)
                    </body>
                    <marks>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">custom</mark>
                        <mark type="keyword">simpl</mark>
                        <mark type="keyword">reuse</mark>
                        <mark type="keyword">logical data independence</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1054">
            <body>What are some advantages of database views?</body>
            <answers>
                <answer>
                    <body>Data independence; Improved security; Reduced complexity; Convenience; Customization; Data
                        integrity
                    </body>
                    <marks>
                        <mark type="keyword">data independence</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">complexity</mark>
                        <mark type="keyword">convenience</mark>
                        <mark type="keyword">customization</mark>
                        <mark type="keyword">data integrity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1055">
            <body>What are some disadvantages of database views?</body>
            <answers>
                <answer>
                    <body>Update restriction; Structure restriction; Performance
                    </body>
                    <marks>
                        <mark type="keyword">update</mark>
                        <mark type="keyword">structure</mark>
                        <mark type="keyword">performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1056">
            <body>What is the difference between a (stored) procedure and a function in a database-centric
                architecture?
            </body>
            <answers>
                <answer>
                    <body>Procedures and functions are identical except that functions always return a value while
                        procedures do not.
                    </body>
                    <marks>
                        <mark type="keyword">identical</mark>
                        <mark type="keyword">return</mark>
                        <mark type="keyword">value</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1057">
            <body>What are some advantages of procedures (and functions) in a database-centric architecture?</body>
            <answers>
                <answer>
                    <body>Extensibility; Reusability; Maintainability; Aid abstraction; Improved testability; Improved
                        performance; Improved security
                    </body>
                    <marks>
                        <mark type="keyword">extensibility</mark>
                        <mark type="keyword">reusability</mark>
                        <mark type="keyword">maintainability</mark>
                        <mark type="keyword">aid abstraction</mark>
                        <mark type="keyword">testability</mark>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">security</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1058">
            <body>What are some disadvantages of procedures (and functions) in a database-centric architecture?</body>
            <answers>
                <answer>
                    <body>Limited coding functionality; Portability issues; Reduced flexibility and agility</body>
                    <marks>
                        <mark type="keyword">limited</mark>
                        <mark type="keyword">functionality</mark>
                        <mark type="keyword">portability</mark>
                        <mark type="keyword">flexibility</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1059">
            <body>What is data warehousing?</body>
            <answers>
                <answer>
                    <body>It is a collection of methods, techniques and tools which is used to support knowledge workers
                        such as senior managers, directors, managers, and business analysts to conduct data analyses
                        that help with performing decision-making processes and improving information resources.
                    </body>
                    <marks>
                        <mark type="keyword">collection</mark>
                        <mark type="keyword">method</mark>
                        <mark type="keyword">technique</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">knowledge worker</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1060">
            <body>What are the three features of a data warehouse?</body>
            <answers>
                <answer>
                    <body>It is subject-oriented, integrated and consistent, and shows its evolution over time and it is
                        non-volatile.
                    </body>
                    <marks>
                        <mark type="keyword">subject</mark>
                        <mark type="keyword">consistent</mark>
                        <mark type="keyword">non-volatile</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1061">
            <body>How is data from operational systems prepared for a data warehouse?</body>
            <answers>
                <answer>
                    <body>It is extracted, cleansed, transformed and aggregated before it is loaded into the data
                        warehouse.
                    </body>
                    <marks>
                        <mark type="keyword">extract</mark>
                        <mark type="keyword">cleanse</mark>
                        <mark type="keyword">transform</mark>
                        <mark type="keyword">aggregate</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1062">
            <body>What is a data mart?</body>
            <answers>
                <answer>
                    <body>It is a subset or an aggregation of the data stored to a primary data warehouse. It includes
                        information relevant to a specific business area, corporate department, or category of users.
                    </body>
                    <marks>
                        <mark type="keyword">subset</mark>
                        <mark type="keyword">aggregat</mark>
                        <mark type="keyword">warehouse</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1063">
            <body>How do top-down and bottom-up approaches to data warehousing differ?</body>
            <answers>
                <answer>
                    <body>Top-down approaches start by designing the data warehouse first, then the data marts.
                        Bottom-up
                        approaches start by designing the data marts. Then the data marts may be integrated into a data
                        warehouse or no warehouse is created at all.
                    </body>
                    <marks>
                        <mark type="keyword">data warehouse</mark>
                        <mark type="keyword">data mart</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1064">
            <body>What does OLAP stand for?</body>
            <answers>
                <answer>
                    <body>Online analytical processing</body>
                    <marks>
                        <mark type="keyword">online analytical processing</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1065">
            <body>What does OLTP stand for?</body>
            <answers>
                <answer>
                    <body>Online transaction processing</body>
                    <marks>
                        <mark type="keyword">online transaction processing</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1066">
            <body>What are some essential differences between OLTP and OLAP?</body>
            <answers>
                <answer>
                    <body>OLTP is application-oriented current isolated data and used in day to day operations by lots
                        of IT professionals. OLAP is lots of subject-oriented historical consolidated data used by
                        knowledge workers for decision support.
                    </body>
                    <marks>
                        <mark type="keyword">application-oriented</mark>
                        <mark type="keyword">subject-oriented</mark>
                        <mark type="keyword">current</mark>
                        <mark type="keyword">historic</mark>
                        <mark type="keyword">isolated</mark>
                        <mark type="keyword">consolidated</mark>
                        <mark type="keyword">IT professional</mark>
                        <mark type="keyword">knowledge worker</mark>
                        <mark type="keyword">day to day</mark>
                        <mark type="keyword">decision</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1067">
            <body>What is an OLAP data cube?</body>
            <answers>
                <answer>
                    <body>It is a data analysis tool in OLAP allowing to use generalized GROUP BY queries and
                        to aggregate facts based on chosen dimensions.
                    </body>
                    <marks>
                        <mark type="keyword">analysis</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">generaliz</mark>
                        <mark type="keyword">aggregat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1068">
            <body>What are the four interactive OLAP operations?</body>
            <answers>
                <answer>
                    <body>Slice, Dice, Drill down/up, Aggregation</body>
                    <marks>
                        <mark type="keyword">slice</mark>
                        <mark type="keyword">dice</mark>
                        <mark type="keyword">drill</mark>
                        <mark type="keyword">aggregat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1069">
            <body>What are some advantages of a data cube?</body>
            <answers>
                <answer>
                    <body>They are good for visualization, multidimensional and intuitive.</body>
                    <marks>
                        <mark type="keyword">visualiz</mark>
                        <mark type="keyword">multidimensional</mark>
                        <mark type="keyword">intuitive</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1070">
            <body>What are the three data warehouse architectures covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Central architecture, Federated architecture, and Tiered architecture.</body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">federated</mark>
                        <mark type="keyword">tiered</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1071">
            <body>What characterizes a central data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>All data is in one, central data warehouse that is directly accessed. This is easy to
                        manage.
                    </body>
                    <marks>
                        <mark type="keyword">one</mark>
                        <mark type="keyword">direct</mark>
                        <mark type="keyword">easy</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1072">
            <body>What characterizes a federated data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>Data is stored in separate data marts, aimed at special departments. The data warehouse is
                        logical (i.e. virtual) and the clients access the data marts. Performance is increased due to
                        distribution.
                    </body>
                    <marks>
                        <mark type="keyword">separate</mark>
                        <mark type="keyword">logical</mark>
                        <mark type="keyword">performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1073">
            <body>What characterizes a tiered data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>The central data warehouse is materialized and data is distributed to data marts in one or
                        more tiers, being aggregated/reduced as it moves through tiers. Clients access the data marts.
                        The This ensures great performance but is complex to manage.
                    </body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">materialized</mark>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">complex</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1074">
            <body>What are some issues with data warehousing?</body>
            <answers>
                <answer>
                    <body>Metadata management; DW project management; High HW+SW cost; Ethical issues</body>
                    <marks>
                        <mark type="keyword">metadata</mark>
                        <mark type="keyword">project</mark>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">ethical</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1075">
            <body>What is big data?</body>
            <answers>
                <answer>
                    <body>Big data refers to datasets whose size is beyond the ability of typical database software
                        tools to capture, store, manage, and analyze.
                    </body>
                    <marks>
                        <mark type="keyword">dataset</mark>
                        <mark type="keyword">size</mark>
                        <mark type="keyword">beyond</mark>
                        <mark type="keyword">ability</mark>
                        <mark type="keyword">manage</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1076">
            <body>What is scalability?</body>
            <answers>
                <answer>
                    <body>Scalability is the ability of a system, network, or process to handle a growing amount of work
                        in a capable manner or its ability to be enlarged to accommodate that growth.
                    </body>
                    <marks>
                        <mark type="keyword">ability</mark>
                        <mark type="keyword">grow</mark>
                        <mark type="keyword">work</mark>
                        <mark type="keyword">capable</mark>
                        <mark type="keyword">enlarged</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1077">
            <body>What are the two types of scaling and how do they differ?</body>
            <answers>
                <answer>
                    <body>Vertical scaling means replacing an existing IT resource with another with higher or lower
                        capacity. Horizontal scaling means allocating or releasing IT resources that are of the same
                        type.
                    </body>
                    <marks>
                        <mark type="keyword">vertical</mark>
                        <mark type="keyword">replac</mark>
                        <mark type="keyword">horizontal</mark>
                        <mark type="keyword">allocat</mark>
                        <mark type="keyword">releas</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1078">
            <body>What are some advantages of horizontal and vertical scaling?</body>
            <answers>
                <answer>
                    <body>Horizontal scaling is less expensive, fully automates scaling, and is not limited by maximum
                        hardware capacity. Vertical scaling does not require additional IT resources.
                    </body>
                    <marks>
                        <mark type="keyword">expensive</mark>
                        <mark type="keyword">automat</mark>
                        <mark type="keyword">hardware capacity</mark>
                        <mark type="keyword">additional IT resources</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1079">
            <body>What is another name for horizontal partitioning?</body>
            <answers>
                <answer>
                    <body>Sharding</body>
                    <marks>
                        <mark type="keyword">sharding</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1080">
            <body>What is sharding in the context of big data?</body>
            <answers>
                <answer>
                    <body>The data store is partitioned into shards having the same schema by some primary field. Each
                        shard is placed on a separate node in a cluster that spreads the read and write operations.
                    </body>
                    <marks>
                        <mark type="keyword">shards</mark>
                        <mark type="keyword">same schema</mark>
                        <mark type="keyword">primary field</mark>
                        <mark type="keyword">separate node</mark>
                        <mark type="keyword">cluster</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1081">
            <body>What are the three sharding strategies?</body>
            <answers>
                <answer>
                    <body>The lookup strategy uses a map that routes a request to the shard that contains that data by
                        using
                        the shard key. The range strategy groups related items together in the same shard and orders
                        them by
                        shard key. The hash strategy treats the shards as hash buckets in order to reduce the chance of
                        hotspots in the data.
                    </body>
                    <marks>
                        <mark type="keyword">lookup strategy</mark>
                        <mark type="keyword">range strategy</mark>
                        <mark type="keyword">hash strategy</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1082">
            <body>What are NoSQL databases?</body>
            <answers>
                <answer>
                    <body>Next generation databases mostly addressing some of the points: being non-relational,
                        distributed,
                        open-source and horizontally scalable.
                    </body>
                    <marks>
                        <mark type="keyword">non-relational</mark>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">open-source</mark>
                        <mark type="keyword">horizontally scalable</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1083">
            <body>What does NoSQL stand for?</body>
            <answers>
                <answer>
                    <body>Not only SQL</body>
                    <marks>
                        <mark type="keyword">not only</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1084">
            <body>What is a key-value store?</body>
            <answers>
                <answer>
                    <body>Data is stored in unstructured records consisting of a key and the values associated with that
                        record.
                    </body>
                    <marks>
                        <mark type="keyword">unstructured</mark>
                        <mark type="keyword">key</mark>
                        <mark type="keyword">value</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1085">
            <body>In what case do key-value stores have poor performance and how can this limitation be overcome?</body>
            <answers>
                <answer>
                    <body>Key-value stores have poor to cases that require processing key ranges. Ordered key-value
                        stores can overcome this limitation.
                    </body>
                    <marks>
                        <mark type="keyword">key range</mark>
                        <mark type="keyword">ordered</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1086">
            <body>What is Bigtable?</body>
            <answers>
                <answer>
                    <body>Bigtable is a distributed storage system for managing structured data that is designed to
                        scale to a very large size by Google. It maps two arbitrary string values (row and column key)
                        and a timestamp into an associated arbitrary byte array.
                    </body>
                    <marks>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">storage system</mark>
                        <mark type="keyword">structured</mark>
                        <mark type="keyword">scale</mark>
                        <mark type="keyword">string</mark>
                        <mark type="keyword">timestamp</mark>
                        <mark type="keyword">byte array</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1087">
            <body>What are some advantages of Bigtable?</body>
            <answers>
                <answer>
                    <body>Performance, Scalability, Availability, Flexibility, High speed retrieval, Data reliability,
                        Storage size, Versioning, Suitability for many data additions
                    </body>
                    <marks>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">availability</mark>
                        <mark type="keyword">flexibility</mark>
                        <mark type="keyword">high speed retrieval</mark>
                        <mark type="keyword">data reliability</mark>
                        <mark type="keyword">storage size</mark>
                        <mark type="keyword">versioning</mark>
                        <mark type="keyword">data additions</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1088">
            <body>What are some disadvantages of Bigtable?</body>
            <answers>
                <answer>
                    <body>No support for multi-row transactions; No join functionality; Not suitable for many data
                        modifications
                    </body>
                    <marks>
                        <mark type="keyword">multi-row</mark>
                        <mark type="keyword">join</mark>
                        <mark type="keyword">modification</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1089">
            <body>What is a document-oriented database?</body>
            <answers>
                <answer>
                    <body>It is a database not enforcing a schema. Each record and its associated data is thought of as
                        a document.
                    </body>
                    <marks>
                        <mark type="keyword">schema</mark>
                        <mark type="keyword">record</mark>
                        <mark type="keyword">document</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1090">
            <body>What are some advantages of document-oriented databases?</body>
            <answers>
                <answer>
                    <body>Improved performance by using sequential read (because all data regarding an object is at the
                        same position on the disk); Easier application logic (because object models can be turned into
                        documents)
                    </body>
                    <marks>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">application logic</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1091">
            <body>What is a graph database?</body>
            <answers>
                <answer>
                    <body>A graph database stores connections as first class citizens, readily available for any
                        “join-like” navigation operation. Accessing those already persistent connections is an
                        efficient, constant-time operation.
                    </body>
                    <marks>
                        <mark type="keyword">connection</mark>
                        <mark type="keyword">first class citizen</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1092">
            <body>What is the core consistency rule in a graph database?</body>
            <answers>
                <answer>
                    <body>No broken links.</body>
                    <marks>
                        <mark type="keyword">no broken links</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1093">
            <body>What are some advantages of graph databases?</body>
            <answers>
                <answer>
                    <body>No penalties for complex runtime queries; Efficient scale-up and billions of nodes in one
                        database
                        on moderate hardware
                    </body>
                    <marks>
                        <mark type="keyword">complex</mark>
                        <mark type="keyword">queries</mark>
                        <mark type="keyword">scale</mark>
                        <mark type="keyword">moderate hardware</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1094">
            <body>What are some issues with NoSQL?</body>
            <answers>
                <answer>
                    <body>Data is generally duplicated; No standardized schema; No standard format for queries; No
                        standard
                        query language; Application layer needs to enforce data integrity
                    </body>
                    <marks>
                        <mark type="keyword">duplicat</mark>
                        <mark type="keyword">schema</mark>
                        <mark type="keyword">quer</mark>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">integrity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1095">
            <body>What three properties can no distributed data system achieve at the same time?</body>
            <answers>
                <answer>
                    <body>Consistency, Availability, and Partition Tolerance.</body>
                    <marks>
                        <mark type="keyword">consistency</mark>
                        <mark type="keyword">availability</mark>
                        <mark type="keyword">partition tolerance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1096">
            <body>What is MapReduce?</body>
            <answers>
                <answer>
                    <body>MapReduce is an algorithm used to process large data amounts in parallel. The map function
                        iterates over records and extracts something of interest from each, creating key-value pairs.
                        The reduce function then aggregates the key-value pairs by key, producing a final output.
                    </body>
                    <marks>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">parallel</mark>
                        <mark type="keyword">extract</mark>
                        <mark type="keyword">key-value</mark>
                        <mark type="keyword">aggregat</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.3: Message-oriented architectures -->
        <question type="extended-answer" id="1097">
            <body>What are the three possible intents of a middleware message?</body>
            <answers>
                <answer>
                    <body>Command message: The sender tells the receiver what code to run.
                        Document message: The sender transmits one of its data structures to the receiver.
                        Event message: Notifying the receiver of a change in the sender.
                    </body>
                    <marks>
                        <mark type="keyword">command</mark>
                        <mark type="keyword">document</mark>
                        <mark type="keyword">event</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1098">
            <body>What are the three patterns of message queues?</body>
            <answers>
                <answer>
                    <body>Point-to-point pattern: It ensures that only one receiver consumes any given message.
                        Publish-subscribe pattern: Routes messages from publisher (source) to subscribers (sinks).
                        Datatype pattern: Uses separate datatype queues for each datatype.
                    </body>
                    <marks>
                        <mark type="keyword">point-to-point</mark>
                        <mark type="keyword">publish-subscribe</mark>
                        <mark type="keyword">datatype</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1099">
            <body>What are some advantages of message queues?</body>
            <answers>
                <answer>
                    <body>Give recipient control of when to process messages; More robust to failures (because
                        recipients do
                        not need to be up and running when a message is sent); Messages may have an expiration date;
                        Queues
                        can be shared among multiple applications
                    </body>
                    <marks>
                        <mark type="keyword">when</mark>
                        <mark type="keyword">robust</mark>
                        <mark type="keyword">expir</mark>
                        <mark type="keyword">share</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1100">
            <body>What are some advantages of message-oriented middleware?</body>
            <answers>
                <answer>
                    <body>Remote communication; Decoupling of systems; Platform/application integration; Asynchronous
                        communication protocol; Solves issue of throttling
                    </body>
                    <marks>
                        <mark type="keyword">remote</mark>
                        <mark type="keyword">decoupl</mark>
                        <mark type="keyword">integrat</mark>
                        <mark type="keyword">asynchronous</mark>
                        <mark type="keyword">throttling</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1101">
            <body>What re some disadvantages of message-oriented middleware?</body>
            <answers>
                <answer>
                    <body>Some scenarios require synchronous solutions; Message sequence issues (queues do not guarantee
                        when a message will be delivered)
                    </body>
                    <marks>
                        <mark type="keyword">synchronous</mark>
                        <mark type="keyword">sequence</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1102">
            <body>What is the purpose of Enterprise Application Integration (EAI)?</body>
            <answers>
                <answer>
                    <body>EAI is intended to integrate services provided by different middlewares.</body>
                    <marks>
                        <mark type="keyword">integrat</mark>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">middleware</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1103">
            <body>What is a message broker?</body>
            <answers>
                <answer>
                    <body>Message brokers act as a broker among system entities. This factors the message routing logic
                        out
                        of the senders and places it into the middleware. Applications publish their messages to the
                        middleware and the middleware sends a copy of the message to every subscribed application.
                    </body>
                    <marks>
                        <mark type="keyword">routing</mark>
                        <mark type="keyword">middleware</mark>
                        <mark type="keyword">publish</mark>
                        <mark type="keyword">subscribe</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1104">
            <body>What are some challenges concerning messages brokers?</body>
            <answers>
                <answer>
                    <body>Scalability; Security: Growing number of SSL certificates has to be managed.; Monitoring and
                        debugging; Maintenance: Broker cannot be updated without affecting the clients.
                    </body>
                    <marks>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">monitoring</mark>
                        <mark type="keyword">maintenance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1105">
            <body>What are the characteristics of a reactive system?</body>
            <answers>
                <answer>
                    <body>Responsive; Resilient; Elastic; Message-driven</body>
                    <marks>
                        <mark type="keyword">responsive</mark>
                        <mark type="keyword">resilien</mark>
                        <mark type="keyword">elastic</mark>
                        <mark type="keyword">message</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1106">
            <body>What is the actor model?</body>
            <answers>
                <answer>
                    <body>The actor model represents objects and their interactions, resembling human organizations and
                        built upon the laws of physics.
                    </body>
                    <marks>
                        <mark type="keyword">represent</mark>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">interaction</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1107">
            <body>What does the actor model embody?</body>
            <answers>
                <answer>
                    <body>It embodies processing, storage, and communication.</body>
                    <marks>
                        <mark type="keyword">processing</mark>
                        <mark type="keyword">storage</mark>
                        <mark type="keyword">communication</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1108">
            <body>What are the axioms of the actor model?</body>
            <answers>
                <answer>
                    <body>When an actor receives a message it can: Make local decisions, create new actors, send
                        messages to actors it knows, or designate how it should handle the next message it receives.
                    </body>
                    <marks>
                        <mark type="keyword">decision</mark>
                        <mark type="keyword">create</mark>
                        <mark type="keyword">send</mark>
                        <mark type="keyword">designate</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1109">
            <body>What are some advantages of the actor model?</body>
            <answers>
                <answer>
                    <body>Message-driven approach is intuitive; Directly applicable for distributed programming;
                        Type-safe
                        systems; Separation of concerns; Ensures loose coupling
                    </body>
                    <marks>
                        <mark type="keyword">intuitive</mark>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">type-safe</mark>
                        <mark type="keyword">separation of concerns</mark>
                        <mark type="keyword">loose coupling</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1110">
            <body>What are some disadvantages of the actor model?</body>
            <answers>
                <answer>
                    <body>Message-passing is slower; Actors do not work well when synchronous shared-state behavior is
                        required; Steep learning curve; Dealing when an actor crashes, a message is lost, or an external
                        message is introduced
                    </body>
                    <marks>
                        <mark type="keyword">passing</mark>
                        <mark type="keyword">shared</mark>
                        <mark type="keyword">learning</mark>
                        <mark type="keyword">dealing</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.4: Object-oriented architectures -->
        <question type="extended-answer" id="1111">
            <body>What is an object broker?</body>
            <answers>
                <answer>
                    <body>It is an extended Remote Procedure Call (RPC) paradigm for the object-oriented world.</body>
                    <marks>
                        <mark type="keyword">extend</mark>
                        <mark type="keyword">Remote Procedure Call</mark>
                        <mark type="keyword">object</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1112">
            <body>What is CORBA?</body>
            <answers>
                <answer>
                    <body>Common Object Request Broker Architecture is a standardized specification of an object broker.
                    </body>
                    <marks>
                        <mark type="keyword">Common Object Request Broker Architecture</mark>
                        <mark type="keyword">specification</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.5: Component-based architectures -->
        <question type="extended-answer" id="1113">
            <body>What are the tiers of the Java EE multi-tier architecture (and where are they run)?</body>
            <answers>
                <answer>
                    <body>Client tier (on client), web tier (on JEE server), business tier (on JEE server), and
                        enterprise information system tier (on database server).
                    </body>
                    <marks>
                        <mark type="keyword">client</mark>
                        <mark type="keyword">web</mark>
                        <mark type="keyword">business</mark>
                        <mark type="keyword">enterprise information system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1114">
            <body>What are the kinds of containers used in the Java EE multi-tier architecture (and where are they run)?
            </body>
            <answers>
                <answer>
                    <body>Application client container (on client), EJB container (on JEE server), and web container (on
                        JEE server).
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">EJB</mark>
                        <mark type="keyword">web</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1115">
            <body>What is an EJB?</body>
            <answers>
                <answer>
                    <body>An Enterprise Java Bean realizes business logic and is deployed within EJB containers.</body>
                    <marks>
                        <mark type="keyword">enterprise java bean</mark>
                        <mark type="keyword">business logic</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1116">
            <body>What are the different types of EJB?</body>
            <answers>
                <answer>
                    <body>Session beans: Only one per client and live for just one session.
                        Message-driven beans: For asynchronous processing of messages.
                        Entity beans: Deprecated.
                    </body>
                    <marks>
                        <mark type="keyword">session</mark>
                        <mark type="keyword">message</mark>
                        <mark type="keyword">entity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1117">
            <body>What are the contents of an EJB?</body>
            <answers>
                <answer>
                    <body>Enterprise bean class: Implements the business methods and any lifecycle callback methods.
                        Business interfaces: Define the business methods implemented by the enterprise bean class.
                        Helper classes: Other required utility classes.
                    </body>
                    <marks>
                        <mark type="keyword">enterprise bean class</mark>
                        <mark type="keyword">business interface</mark>
                        <mark type="keyword">helper class</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1118">
            <body>How can EJBs be accessed?</body>
            <answers>
                <answer>
                    <body>No-interface view: Exposes the public methods to clients.
                        Business interface: Standard Java interface that contains the business methods of the EJB.
                    </body>
                    <marks>
                        <mark type="keyword">no-interface</mark>
                        <mark type="keyword">business interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1119">
            <body>What is the role of the Java Persistence API (JPA)?</body>
            <answers>
                <answer>
                    <body>It allows persistent deployment of POJOs to relational databases. Replaces entity beans.
                    </body>
                    <marks>
                        <mark type="keyword">POJO</mark>
                        <mark type="keyword">database</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1120">
            <body>What is the JMS?</body>
            <answers>
                <answer>
                    <body>Java Message Service is a message-oriented middleware for Java.</body>
                    <marks>
                        <mark type="keyword">middleware</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1121">
            <body>What does a JMS message consist of?</body>
            <answers>
                <answer>
                    <body>Header, Properties (optional), and Body.</body>
                    <marks>
                        <mark type="keyword">header</mark>
                        <mark type="keyword">properties</mark>
                        <mark type="keyword">body</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1122">
            <body>What Java Web Components were discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Java Servlet: Process HTTP requests and generate replies.
                        JavaServer Page: Text-based documents with special JSP tags that contain java code (deprecated).
                        JavaServer Face: MVC pattern based web framework.
                    </body>
                    <marks>
                        <mark type="keyword">java servlet</mark>
                        <mark type="keyword">javaserver page</mark>
                        <mark type="keyword">javaserver face</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1123">
            <body>What is the difference between a tier and a layer?</body>
            <answers>
                <answer>
                    <body>A layer is a logical structuring for software elements, while a tier is a physical structuring
                        mechanism for system infrastructure.
                    </body>
                    <marks>
                        <mark type="keyword">logical</mark>
                        <mark type="keyword">physical</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1124">
            <body>What deployment strategies did the lecture name?</body>
            <answers>
                <answer>
                    <body>Non-distributed deployment, distributed deployment, load balanced cluster, and failover
                        cluster.
                    </body>
                    <marks>
                        <mark type="keyword">non-distributed</mark>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">load balanced</mark>
                        <mark type="keyword">failover</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1125">
            <body>What are some advantages of non-distributed deployment?</body>
            <answers>
                <answer>
                    <body>Fewer physical servers; Reduced communication overhead (between multiple physical servers);
                        Advantage of simplicity and manageability
                    </body>
                    <marks>
                        <mark type="keyword">physical server</mark>
                        <mark type="keyword">communication overhead</mark>
                        <mark type="keyword">simpl</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1126">
            <body>What are some disadvantages of non-distributed deployment?</body>
            <answers>
                <answer>
                    <body>All layers share the same physical hardware; Reduces the overall scalability; Security</body>
                    <marks>
                        <mark type="keyword">physical</mark>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">security</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1127">
            <body>What are some advantages of distributed deployment?</body>
            <answers>
                <answer>
                    <body>More flexible environment; Easy to scale out or up; Allows specific security policies for
                        different tiers; Better Security with DMZs
                    </body>
                    <marks>
                        <mark type="keyword">flexible</mark>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">polic</mark>
                        <mark type="keyword">DMZ</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1128">
            <body>What are some disadvantages of distributed deployment?</body>
            <answers>
                <answer>
                    <body>Adding more tiers increases complexity, development effort and cost.</body>
                    <marks>
                        <mark type="keyword">complex</mark>
                        <mark type="keyword">development</mark>
                        <mark type="keyword">cost</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1129">
            <body>What is AUTOSAR?</body>
            <answers>
                <answer>
                    <body>The AUTomotive Open System Architecture is a component-based, standardized automotive
                        reference architecture.
                    </body>
                    <marks>
                        <mark type="keyword">automotive open system architecture</mark>
                        <mark type="keyword">component-based</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1130">
            <body>What are the layers of the AUTOSAR module view?</body>
            <answers>
                <answer>
                    <body>Application layer: Components developed against platform-independent RTE.
                        AUTOSAR RTE layer: Defined interfaces to Basic Software standard library functions.
                        Basic Software layer: Contains operating system and offers variety of services.
                        Microcontroller Abstraction layer: Abstraction from I/O and communication with microcontroller.
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">autosar rte</mark>
                        <mark type="keyword">basic software</mark>
                        <mark type="keyword">microcontroller</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1131">
            <body>What are the layers of a typical 4/5 layer architecture on Android?</body>
            <answers>
                <answer>
                    <body>Application layer, framework layer, library layer, runtime layer, and kernel layer.</body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">framework</mark>
                        <mark type="keyword">library</mark>
                        <mark type="keyword">runtime</mark>
                        <mark type="keyword">kernel</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1132">
            <body>What are the advantages of a typical 4/5 layer architecture on Android?</body>
            <answers>
                <answer>
                    <body>High extensibility and high information hiding.</body>
                    <marks>
                        <mark type="keyword">extensibility</mark>
                        <mark type="keyword">information hiding</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1133">
            <body>What is OSGi?</body>
            <answers>
                <answer>
                    <body>The Open Services Gateway initiative (OSGi) technology is a set of specifications that define
                        a dynamic component system for Java. These specifications enable a development model where
                        applications are (dynamically) composed of many different (reusable) components.
                    </body>
                    <marks>
                        <mark type="keyword">open services gateway initiative</mark>
                        <mark type="keyword">set</mark>
                        <mark type="keyword">specification</mark>
                        <mark type="keyword">dynamic</mark>
                        <mark type="keyword">component system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1134">
            <body>What are the OSGi components?</body>
            <answers>
                <answer>
                    <body>Bundles: Components made by developers.
                        Services: The services layer connects bundles in a dynamic way by offering a publish-find-bind
                        model for plain old Java objects.
                        Life-Cycle: The API to install, start, stop, update, and uninstall bundles.
                        Modules: The layer that defines how a bundle can import and export code.
                        Security: The layer that handles the security aspects.
                        Execution Environment: Defines what methods and classes are available in a specific platform.
                    </body>
                    <marks>
                        <mark type="keyword">bundle</mark>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">life-cycle</mark>
                        <mark type="keyword">modules</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">execution environment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1135">
            <body>What are the differences between the OSGi bundle runtime environment and Java application servers.
            </body>
            <answers>
                <answer>
                    <body>OSGi does not use containers. Bundles run in the same VM and can actually share code. Another
                        difference is that the management of the OSGi framework is standardized.
                    </body>
                    <marks>
                        <mark type="keyword">container</mark>
                        <mark type="keyword">standardized</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1136">
            <body>What are some of the advantages of OSGi?</body>
            <answers>
                <answer>
                    <body>Reduced Complexity, Reuse, Easy Deployment, Dynamic Updates, Adaptive, Transparency,
                        Versioning, Simple, Small, Fast, Lazy, Secure, Humble, Non Intrusive, Runs Everywhere, and
                        Widely Used.
                    </body>
                    <marks>
                        <mark type="keyword">reduced complexity</mark>
                        <mark type="keyword">reuse</mark>
                        <mark type="keyword">easy deployment</mark>
                        <mark type="keyword">dynamic updates</mark>
                        <mark type="keyword">adaptive</mark>
                        <mark type="keyword">transparency</mark>
                        <mark type="keyword">versioning</mark>
                        <mark type="keyword">simple</mark>
                        <mark type="keyword">small</mark>
                        <mark type="keyword">fast</mark>
                        <mark type="keyword">lazy</mark>
                        <mark type="keyword">secure</mark>
                        <mark type="keyword">humble</mark>
                        <mark type="keyword">non intrusive</mark>
                        <mark type="keyword">runs everywhere</mark>
                        <mark type="keyword">widely used</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1137">
            <body>What are some problems that service-oriented architectures try to solve?</body>
            <answers>
                <answer>
                    <body>Multiple implementation languages; Multi-governance; Interoperability via standard;
                        Independent of vendor or technology; Loosely coupled.
                    </body>
                    <marks>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">multi-governance</mark>
                        <mark type="keyword">interoperability</mark>
                        <mark type="keyword">indepneden</mark>
                        <mark type="keyword">coupl</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1138">
            <body>What are some drawbacks of service-oriented architectures?</body>
            <answers>
                <answer>
                    <body>No service ecosystem; Scalability; Unfunctional browsing; High complexity of ecosystem; Reduce
                        agility through hard-coding and dependencies
                    </body>
                    <marks>
                        <mark type="keyword">no service ecosystem</mark>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">unfunctional browsing</mark>
                        <mark type="keyword">complex</mark>
                        <mark type="keyword">agility</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1139">
            <body>What is a service-oriented architecture (SOA)?</body>
            <answers>
                <answer>
                    <body>A Service-Oriented Architecture (SOA) is a software architecture that is based on the key
                        concepts of an application frontend, service, service repository, and service bus. A service
                        consists of a contract, one or more interfaces, and an implementation.
                    </body>
                    <marks>
                        <mark type="keyword">frontend</mark>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">repository</mark>
                        <mark type="keyword">bus</mark>
                        <mark type="keyword">contract</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">implementation</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1140">
            <body>What are the roles existing in a SOA?</body>
            <answers>
                <answer>
                    <body>Service consumer: Application that requires a service.
                        Service provider: Network-addressable entity that accepts and executes requests from service
                        consumers.
                        Service registry: Is the enabler for service discovery.
                    </body>
                    <marks>
                        <mark type="keyword">consumer</mark>
                        <mark type="keyword">provider</mark>
                        <mark type="keyword">registry</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1141">
            <body>What are some of the principles of SOA?</body>
            <answers>
                <answer>
                    <body>Loose Coupling, Modularization, Service Contract, Discoverability, Abstraction and autonomy,
                        Reusability, Composability, and Stateless.
                    </body>
                    <marks>
                        <mark type="keyword">loose coupling</mark>
                        <mark type="keyword">modularization</mark>
                        <mark type="keyword">service contract</mark>
                        <mark type="keyword">discoverability</mark>
                        <mark type="keyword">abstraction</mark>
                        <mark type="keyword">reusability</mark>
                        <mark type="keyword">composability</mark>
                        <mark type="keyword">stateless</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1142">
            <body>What are the parts of a service?</body>
            <answers>
                <answer>
                    <body>Service description, service interface, business logic, implementation, and data.</body>
                    <marks>
                        <mark type="keyword">description</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">implementation</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1143">
            <body>What is a Web service?</body>
            <answers>
                <answer>
                    <body>A self-contained, modular business application that has open, Internet-oriented,
                        standards-based interfaces.
                    </body>
                    <marks>
                        <mark type="keyword">self-contained</mark>
                        <mark type="keyword">modular</mark>
                        <mark type="keyword">business application</mark>
                        <mark type="keyword">open</mark>
                        <mark type="keyword">Internet</mark>
                        <mark type="keyword">standard</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1144">
            <body>What are the two main styles of Web services?</body>
            <answers>
                <answer>
                    <body>Simple Object Access Protocol (SOAP) web services and Representational State Transfer (REST)
                        web services.
                    </body>
                    <marks>
                        <mark type="keyword">simple object access protocol</mark>
                        <mark type="keyword">representational state transfer</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1145">
            <body>What are some advantages of SOAP?</body>
            <answers>
                <answer>
                    <body>Foundation layer of web service stack; Extensibility; Technology agnostic; Multi-language
                    </body>
                    <marks>
                        <mark type="keyword">foundation</mark>
                        <mark type="keyword">extensibility</mark>
                        <mark type="keyword">agnostic</mark>
                        <mark type="keyword">multi-language</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1146">
            <body>What are some disadvantages of SOAP?</body>
            <answers>
                <answer>
                    <body>Big XML messages; Extensibility leads to fragmentation of capabilities; Verbose messages and
                        conversations
                    </body>
                    <marks>
                        <mark type="keyword">big XML</mark>
                        <mark type="keyword">fragmentation</mark>
                        <mark type="keyword">verbose</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1147">
            <body>What are the two SOAP interaction styles?</body>
            <answers>
                <answer>
                    <body>Document-style: Interacting applications agree upon the structure of documents exchanged
                        between
                        them.
                        RPC-style: One message encapsulates the request while another message encapsulates the response.
                    </body>
                    <marks>
                        <mark type="keyword">document</mark>
                        <mark type="keyword">rpc</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1148">
            <body>What is the basic structure of a SOAP message?</body>
            <answers>
                <answer>
                    <body>The envelope contains a header and a body, each containig a header block and body block
                        respectively.
                    </body>
                    <marks>
                        <mark type="keyword">envelope</mark>
                        <mark type="keyword">header</mark>
                        <mark type="keyword">body</mark>
                        <mark type="keyword">block</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1149">
            <body>What is WSDL?</body>
            <answers>
                <answer>
                    <body>The Web Service Description Language describes web service interfaces via XML documents.
                    </body>
                    <marks>
                        <mark type="keyword">web service description language</mark>
                        <mark type="keyword">XML</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1150">
            <body>What is a significant difference of WSDL with respect to conventional middleware?</body>
            <answers>
                <answer>
                    <body>WSDL also needs to define the mechanisms to access the Web service (e.g. HTTP, FTP, SMTP).
                    </body>
                    <marks>
                        <mark type="keyword">mechanism</mark>
                        <mark type="keyword">access</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1151">
            <body>What are the parts of a WSDL interface?</body>
            <answers>
                <answer>
                    <body>Abstract part: Contains port type definitions (analogous to interfaces in traditional
                        middleware IDLs).
                        Concrete part: Defines protocol binding and other information.
                    </body>
                    <marks>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">concrete</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1152">
            <body>At what three levels is SOA governance important?</body>
            <answers>
                <answer>
                    <body>Strategic level: Management of company defines which role SOA should play.
                        Operational level: Decisions which may cross departments, but do not have influence on the whole
                        organization.
                        Technical level: Tools help to ensure technical integrity.
                    </body>
                    <marks>
                        <mark type="keyword">strategic</mark>
                        <mark type="keyword">operational</mark>
                        <mark type="keyword">technical</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1153">
            <body>What are some of the NFRs that REST addresses?</body>
            <answers>
                <answer>
                    <body>Performance of component interactions; Scalability of the ecosystem; Simplicity of interfaces;
                        Visibility; Language agnostic; URIs; Designed for the Internet
                    </body>
                    <marks>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">simplicity</mark>
                        <mark type="keyword">visibility</mark>
                        <mark type="keyword">language agnostic</mark>
                        <mark type="keyword">URI</mark>
                        <mark type="keyword">Internet</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1154">
            <body>What are some of the disadvantages of REST?</body>
            <answers>
                <answer>
                    <body>Bloated protocol (HTTP); HTTP is not RPC; No semantic descriptions</body>
                    <marks>
                        <mark type="keyword">bloated protocol</mark>
                        <mark type="keyword">not RPC</mark>
                        <mark type="keyword">semantic description</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1155">
            <body>What are the architectural styles of REST?</body>
            <answers>
                <answer>
                    <body>Null style: Empty set of constraints that describes a system in which there are no
                        distinguished boundaries between components and is the starting point.
                        Client-server: Separates the user interface concerns from the data storage concerns.
                        Stateless: Communication must be stateless in nature.
                        Cacheable: Requires that the data within a response to a request is implicitly or explicitly
                        labeled as chacheable or non-cacheable.
                        Uniform interfaces: Emphasis on a uniform interface between components (i.e. uniform
                        identification scheme and representation of information exchanged).
                        Layered system: Constrains component beavior such that each component cannot see beyond the
                        immediate layer with which they are interacting.
                    </body>
                    <marks>
                        <mark type="keyword">Null style</mark>
                        <mark type="keyword">Client-server</mark>
                        <mark type="keyword">stateless</mark>
                        <mark type="keyword">cacheable</mark>
                        <mark type="keyword">uniform interfaces</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1156">
            <body>What is an example a REST application following the Null style?</body>
            <answers>
                <answer>
                    <body>Mainframe application, desktop application, or a closed distributed system.</body>
                    <marks>
                        <mark type="regex">mainframe application|desktop application|closed distributed system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1157">
            <body>What is the central feature that distinguishes REST form other network-based styles?</body>
            <answers>
                <answer>
                    <body>Uniform interfaces</body>
                    <marks>
                        <mark type="keyword">uniform interfaces</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1158">
            <body>What are the two types of URI?</body>
            <answers>
                <answer>
                    <body>Uniform Resource Name (URN): Identification of objects by name for the purpose of persistent
                        labeling.
                        Uniform Resource Locator (URL): Identification via the primary access mechanism.
                    </body>
                    <marks>
                        <mark type="keyword">uniform resource name</mark>
                        <mark type="keyword">uniform resource locator</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1159">
            <body>What are the parts of a URI?</body>
            <answers>
                <answer>
                    <body>Scheme: Defines how the URI should be interpreted.
                        Authority: Has structure userinfo@host:port .
                        Path: Looks like the path on a file system.
                        Query: The spec describes the query part as being a non-hierarchical part of the URI.
                        Fragment: Used to identify a second resource.
                    </body>
                    <marks>
                        <mark type="keyword">scheme</mark>
                        <mark type="keyword">authority</mark>
                        <mark type="keyword">path</mark>
                        <mark type="keyword">query</mark>
                        <mark type="keyword">fragment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1160">
            <body>What are the main problem domains of REST (i.e. REST triangle)?</body>
            <answers>
                <answer>
                    <body>Nouns (unconstrained): Things that exist.
                        Verbs (constrained): Things you can do to the nouns.
                        Content Types (constrained): Information you can transfer as part of an operation.
                    </body>
                    <marks>
                        <mark type="keyword">nouns</mark>
                        <mark type="keyword">verbs</mark>
                        <mark type="keyword">content type</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1161">
            <body>What are the minimum methods of REST?</body>
            <answers>
                <answer>
                    <body>GET: Transfers a representation from resource to client.
                        PUT: Transfers state from a client to a resource.
                        POST: Create a resource or add to it, if it already exists.
                        DELETE: Requests the resource state being destroyed.
                    </body>
                    <marks>
                        <mark type="keyword">get</mark>
                        <mark type="keyword">put</mark>
                        <mark type="keyword">post</mark>
                        <mark type="keyword">delete</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1162">
            <body>What are the two web service compositions?</body>
            <answers>
                <answer>
                    <body>Orchestration: A single centralized executable business process coordinates the interaction
                        among
                        different services.
                        Choreography: Decentralized approach to service interaction.
                    </body>
                    <marks>
                        <mark type="keyword">orchestration</mark>
                        <mark type="keyword">choreography</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1163">
            <body>What is microservice architecture?</body>
            <answers>
                <answer>
                    <body>The term “Microservice Architecture” has sprung up over the last few years to describe a
                        particular way of designing software applications as suites of independently deployable
                        services.
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">suite</mark>
                        <mark type="keyword">independent</mark>
                        <mark type="keyword">service</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1164">
            <body>What is the difference between a monolith and a microservice?</body>
            <answers>
                <answer>
                    <body>A monolith application puts all its functionality into a single process and scales by
                        replicating
                        the monolith on multiple servers. A microservice puts each elements of functionality into a
                        separate
                        service and scales by distributing these services across servers, replicating as needed.
                    </body>
                    <marks>
                        <mark type="keyword">functionality</mark>
                        <mark type="keyword">single process</mark>
                        <mark type="keyword">separate service</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1165">
            <body>What are some of the characteristics of microservices?</body>
            <answers>
                <answer>
                    <body>Products not projets: A team should own a product over its full lifetime.
                        Smart endpoints and dump pipes: As decoupled and as cohesive as possible.
                        Decentralized governance: Avoids standardization on a single technology platform.
                        Decentralized data management: Each service manages its own database.
                        Infrastructure automation: Lots of automated tests and automated deployment.
                        Design for failure: It is important to be able to detect failures quickly and, if possible,
                        automatically restore services.
                        Evolutionary design: Independent replacement and upgradeability.
                        Organized around business capabilities: Teams are cross-functional.
                    </body>
                    <marks>
                        <mark type="keyword">Products not projets</mark>
                        <mark type="keyword">Smart endpoints and dump pipes</mark>
                        <mark type="keyword">Decentralized governance</mark>
                        <mark type="keyword">Decentralized data management</mark>
                        <mark type="keyword">Infrastructure automation</mark>
                        <mark type="keyword">Design for failure</mark>
                        <mark type="keyword">Evolutionary design</mark>
                        <mark type="keyword">Organized around business capabilities</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1166">
            <body>What is important when modeling microservices?</body>
            <answers>
                <answer>
                    <body>Think of business capabilities, not data models. An application domain consists of multiple
                        bounded contexts. Residing within each bounded context are models that do not need to be shared
                        outside, as well as other models that are shared externally.
                    </body>
                    <marks>
                        <mark type="keyword">business capabilities</mark>
                        <mark type="keyword">application domain</mark>
                        <mark type="keyword">bounded context</mark>
                        <mark type="keyword">model</mark>
                        <mark type="keyword">share</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1167">
            <body>What are some challenges in microservices?</body>
            <answers>
                <answer>
                    <body>Forces developers to deal with the added complexity of a distributed system; How to partition
                        the system into microservices; How to manage microservice orchestration; Security: large attack
                        surface, malicious insiders, integrity
                    </body>
                    <marks>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">partition</mark>
                        <mark type="keyword">orchestration</mark>
                        <mark type="keyword">security</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 3.7: Blockchain-based architectures -->
        <question type="extended-answer" id="1168">
            <body>What is a blockchain?</body>
            <answers>
                <answer>
                    <body>A blockchain is an immutable distributed database that maintains a continuously growing list
                        of ordered records called blocks.
                    </body>
                    <marks>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">immutable</mark>
                        <mark type="keyword">continuously</mark>
                        <mark type="keyword">ordered</mark>
                        <mark type="keyword">block</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1169">
            <body>What is the structure of a block in a blockchain?</body>
            <answers>
                <answer>
                    <body>A block consists of one header and multiple transactions. The block contains at least a
                        timestamp, the hash of the previous block, and the hash of its own transactions.
                    </body>
                    <marks>
                        <mark type="keyword">header</mark>
                        <mark type="keyword">transaction</mark>
                        <mark type="keyword">timestamp</mark>
                        <mark type="keyword">hash</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1170">
            <body>How is consensus over the current state of a blockchain reached in case of a fork?</body>
            <answers>
                <answer>
                    <body>The longest chain wins.</body>
                    <marks>
                        <mark type="keyword">longest</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1171">
            <body>What are the constraints for blockchain consensus mechanisms stated in the lecture?</body>
            <answers>
                <answer>
                    <body>Keep the network fully decentralized; Avoid a 51% attack; Avoid a 25% economic attack</body>
                    <marks>
                        <mark type="keyword">decentraliz</mark>
                        <mark type="keyword">51%</mark>
                        <mark type="keyword">25%</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1172">
            <body>What are the two approaches to consensus mechanisms for blockchain found in the lecture?</body>
            <answers>
                <answer>
                    <body>Proof of work: Increase cost/difficulty of creating new blocks.
                        Proof of stake: Increase cost of creating invalid blocks.
                    </body>
                    <marks>
                        <mark type="keyword">proof of work</mark>
                        <mark type="keyword">proof of stake</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1173">
            <body>What are some advantages of blockchain?</body>
            <answers>
                <answer>
                    <body>Decentralized management; Transparency of all transactions; Traceability of the complete
                        transaction history; Pseudonymity of the wallet owners; Built-in financial incentives for early
                        adopters and network growth
                    </body>
                    <marks>
                        <mark type="keyword">decentraliz</mark>
                        <mark type="keyword">transparency</mark>
                        <mark type="keyword">traceability</mark>
                        <mark type="keyword">pseudonymity</mark>
                        <mark type="keyword">financial incentive</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1174">
            <body>What is a smart contract?</body>
            <answers>
                <answer>
                    <body>It is a cryptographically secured program run on top of a blockchain that is used by wallet
                        owners
                        to interact with each other.
                    </body>
                    <marks>
                        <mark type="keyword">crypto</mark>
                        <mark type="keyword">program</mark>
                        <mark type="keyword">blockchain</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1175">
            <body>What are some characteristic properties of smart contracts?</body>
            <answers>
                <answer>
                    <body>Deterministic execution; Terminating execution; Isolated execution; Limited use of third-party
                        library code
                    </body>
                    <marks>
                        <mark type="keyword">deterministic</mark>
                        <mark type="keyword">terminating</mark>
                        <mark type="keyword">isolated</mark>
                        <mark type="keyword">librar</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercises -->
        <question type="extended-answer" id="11000">
            <body>What is the difference between commit and push?</body>
            <answers>
                <answer>
                    <body>A commit puts files in the &quot;staged&quot; status and transfers them into the &quot;committed&quot;
                        status, where their state is preserved in the form of a snapshot (commit). A push attempts to
                        update the remote HEAD of a branch to the local head, transferring commits as necessary. (User
                        contributed answer).
                    </body>
                    <marks>
                        <mark type="keyword">stage</mark>
                        <mark type="keyword">commit</mark>
                        <mark type="keyword">branch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="11001">
            <body>How does the revision graph change after a commit?</body>
            <answers>
                <answer>
                    <body>The current branch log gets a new entry at the head, corresponding to the commit.</body>
                    <marks>
                        <mark type="keyword">branch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12000">
            <body>Name and briefly explain one example for an agile and a rigid development process. (Exercise 2.1.1)
            </body>
            <answers>
                <answer>
                    <body>Two of the following: Agile: Scrum, Kanban. Rigid: Waterfall, V-Model, Spiral, Unified
                        Process.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">scrum|kanban</mark>
                        <mark type="regex" regex-flags="i">waterfall|v-model|spiral|unified</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12001">
            <body>What are the main characteristics of agile and rigid software development?</body>
            <answers>
                <answer>
                    <body>TODO from solution</body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12002">
            <body>When does it make sense and when does it not make sense to implement agile/rigid software
                development.
            </body>
            <answers>
                <answer>
                    <body>TODO from solution</body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12003">
            <body>Discuss and provide rationale for a suitable development process in the following scenario:
                Crusader Tours wants to develop a Smartphone App for its new Crusader 50 shuttle service. The apps hould
                encompass trip planning, ticket purchase, and customer notification functionality. The front-end of the
                App should be developed by an external contractor while the back-end will be developed in-house. To keep
                the development effort lean, the CT management decided to reuse artifacts from the already existing CT
                Mobility App.
            </body>
            <answers>
                <answer>
                    <body>TODO from solution</body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12004">
            <body>Discuss and provide rationale for a suitable development process in the following scenario:
                Bokanovsky and Podsnap, a small start-up that specialized in planning private childcare, wants to
                develop a new web platform to allow parents to look for and students to offer private child care. The
                service is new and up to now there are no comparable web platforms available. As the start-up is rather
                young and the business model is not fully fixed yet, it is likely that a lot of the web platform
                features will have to be added or changed over time.
            </body>
            <answers>
                <answer>
                    <body>Probably an agile development process, since the company expects significant change occurring
                        over the process of development. Another reason for agile is that there is not much need for
                        reformation of existing organization structure in a small startup.
                    </body>
                    <marks>
                        <mark type="keyword">agile</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12005">
            <body>Discuss and provide rationale for a suitable development process in the following scenario:
                Spinner, a big car manufacturer, now finally wants to take the next big technological step and
                from scratch create a autonomous driving software component to be incorporated in the next-gen
                premium line vehicles. As the company still lacks expertise in some key technologies like sensor fusion,
                a small sensor software development company was recently purchased. The release of the first
                working prototype is under severe time pressure as competing car manufacturers are known to work on
                a similar car model.
            </body>
            <answers>
                <answer>
                    <body>Another agile process is likely suitable here, since there is extreme time pressure (agile
                        places emphasis on quick delivery of minimum viable products) and knowledge from the small
                        company needs to be integrated, probably causing changes in the project staff over time.
                        However, it is also likely that the big car manufacturer might not have a suitable organization
                        structure for agile development.
                    </body>
                    <marks>
                        <mark type="keyword">agile</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12006">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                1. All information concerning maintenance and utilization of the ATM must not be accessible to
                people other than service technicians.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12007">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                2. The ATM must be operational at least 360 days a year.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12008">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                3. The image of the controller software running on the ATM must not be bigger than 10KByte.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12009">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                4. The ATM graphical user interface has to be localized for at least the five most common languages.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12010">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                5. All sensors within the ATM need to be able to communicate with each other.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12010">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                6. The mechanical and electrical component of the ATM must comply to the ISO 26262 safety standard.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12010">
            <body>Which ISO 9126 quality attribute is tackled by the following requirement and how can it be
                measured/enforced? Discuss potential issues with proposed evaluation criteria or methods.
                7. The software of the ATM must also be installable on the next-generation X78-B ATM hardware platform.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12011">
            <body>What potential tradeoffs need to be considered in the following requirements?
                1. All information concerning maintenance and utilization of the ATM must not be accessible to
                people other than service technicians.
                2. The ATM must be operational at least 360 days a year.
                3. The image of the controller software running on the ATM must not be bigger than 10KByte.
                4. The ATM graphical user interface has to be localized for at least the five most common languages.
                5. All sensors within the ATM need to be able to communicate with each other.
                6. The mechanical and electrical component of the ATM must comply to the ISO 26262 safety standard.
                7. The software of the ATM must also be installable on the next-generation X78-B ATM hardware platform.
            </body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12012">
            <body>How does one add a dependency to a Maven project?</body>
            <answers>
                <answer>
                    <body>By adding the dependency&quot;s group-id, artifact-id and version to the POM xml file, and
                        specifying a repository as required.
                    </body>
                    <marks>
                        <mark type="keyword">pom</mark>
                        <mark type="keyword">group</mark>
                        <mark type="keyword">artifact</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12013">
            <body>How does one add a repository to a Maven project?</body>
            <answers>
                <answer>
                    <body></body>
                    <marks></marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12014">
            <body>Where on the filesystem do you have to create the source file for the
                class de.tum.in.www22.example.Main in a Maven project?
            </body>
            <answers>
                <answer>
                    <body>In src/main/java/de/tum/in/www22/example/Main.java</body>
                    <marks>
                        <mark type="keyword">src</mark>
                        <mark type="keyword">main</mark>
                        <mark type="keyword">java</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12015">
            <body>Which maven command do you need to use to generate a jar file?</body>
            <answers>
                <answer>
                    <body>mvn package</body>
                    <marks>
                        <mark type="keyword">package</mark>
                    </marks>
                </answer>
            </answers>
        </question>
    </body>
</exam>