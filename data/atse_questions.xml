<?xml version="1.0" encoding="UTF-8" ?>

<exam xmlns="https://vpt1.org"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://vpt1.org questions.xsd">
    <head>
        <title>ATSE Review Question Catalog</title>
        <version>1.0</version>
        <!-- ID not found-->
        <id>404</id>
    </head>
    <body>
        <!-- TODO: Chapter Introduction -->

        <!-- Chapter 1: Embedded Systems (Guest Lecture) !-->
        <question type="extended-answer" id="1">
            <body>What is an embedded system and some of it's common attributes?</body>
            <answers>
                <answer>
                    <body>
                        Example Definitions:
                        Real-time system, small microcontroller with little memory, programmed in assembler or in C.
                        Information system that is integrated into a larger product.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">real.*time</mark>
                        <mark type="keyword">memory</mark>
                        <mark type="regex" regex-flags="i">information.*system</mark>
                        <mark type="keyword">integrate</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.1.1 -->
        <question type="extended-answer" id="2">
            <body>Define software architecture.</body>
            <answers>
                <answer>
                    <body>
                        Example definitions:
                        1: The fundamental organization of a system embodied in its components, their relationships to
                        each other, and to the environment, and the principles guiding its design and evolution.
                        4: Architecture is a set of significant design decisions that shape a system.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">relationship</mark>
                        <mark type="keyword">environment</mark>
                        <mark type="keyword">design</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="3">
            <body>What is the purpose of software architecture?</body>
            <answers>
                <answer>
                    <body>Quality, Efficiency, Risk Minimization, Communication Means, Knowledge Management.</body>
                    <marks>
                        <mark type="keyword">Quality</mark>
                        <mark type="keyword">Efficiency</mark>
                        <mark type="keyword">Risk</mark>
                        <mark type="keyword">Communicat</mark>
                        <mark type="keyword">Knowledge</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="4">
            <body>What is a system?</body>
            <answers>
                <answer>
                    <body>A collection of components organized to accomplish a set of functions with defined boundaries,
                        components and interfaces, environment interaction and static structure and dynamic behavior
                    </body>
                    <marks>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">boundar</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">environment</mark>
                        <mark type="keyword">structure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="5">
            <body>What is a system&apos;s environment?</body>
            <answers>
                <answer>
                    <body>The developmental, operational, political and other influences on the system</body>
                    <marks>
                        <mark type="keyword">influence</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="6">
            <body>What is an architectural description?</body>
            <answers>
                <answer>
                    <body>A document recording the architecture of a system</body>
                    <marks>
                        <mark type="keyword">architect</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="7">
            <body>What are two key roles among stakeholders?</body>
            <answers>
                <answer>
                    <body>The principal and the architect.</body>
                    <marks>
                        <mark type="keyword">principal</mark>
                        <mark type="keyword">architect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="8">
            <body>What is a stakeholder?</body>
            <answers>
                <answer>
                    <body>An entity with interest in, or concerns relative to, the system that has varios roles with
                        regard to creation/use of the architectural descriptions.
                    </body>
                    <marks>
                        <mark type="keyword">interest</mark>
                        <mark type="keyword">concern</mark>
                        <mark type="keyword">role</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9">
            <body>What is a concern in relation to software architecture?</body>
            <answers>
                <answer>
                    <body>An interest which pertains to the system's development, its operation, or any other aspect
                        important to stakeholders. Includes considerations such as performance, reliability, security,
                        distribution, evolvability.
                    </body>
                    <marks>
                        <mark type="keyword">interest</mark>
                        <mark type="keyword">dev</mark>
                        <mark type="keyword">operat</mark>
                        <mark type="keyword">stakeholder</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="10">
            <body>What is the difference between a view and a viewpoint?</body>
            <answers>
                <answer>
                    <body>View: Document addressing concerns of stakeholders conforming to a viewpoint. Viewpoint:
                        Determines language (notation etc.) and any modeling methods or analysis techniques to be used
                        to describe the view.
                    </body>
                    <marks>
                        <mark type="keyword">concern</mark>
                        <mark type="keyword">stakeholder</mark>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">notation</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="11">
            <body>What is an architecture rationale?</body>
            <answers>
                <answer>
                    <body>The explanation/justification for an architecture decision including documentation for the
                        chosen and not-chosen architecture alternatives
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">expl|justif</mark>
                        <mark type="keyword">alternative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12">
            <body>What views are part of the 4+1 view model? How are they classified?</body>
            <answers>
                <answer>
                    <body>Logical view (conceptual), process view (conceptual), implementation view (physical),
                        deployment view (physical), use case view (both).
                    </body>
                    <marks>
                        <mark type="keyword">logical</mark>
                        <mark type="keyword">implementation</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">deployment</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">phys</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="13">
            <body>What does the logical viewpoint describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>It describes the design&apos;s functionality from an end user perspective.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">end.*user</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="14">
            <body>What does the process viewpoint describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>It describes the dynamic communication, concurrency, and synchronization aspects</body>
                    <marks>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">concur</mark>
                        <mark type="keyword">synchro</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="15">
            <body>
                What does the deployment viewpoint describe in the 4+1 model?
            </body>
            <answers>
                <answer>
                    <body>The mapping of software onto hardware, reflecting the distributed aspects.</body>
                    <marks>
                        <mark type="keyword">hardware</mark>
                        <mark type="keyword">distribute</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="16">
            <body>What does the implementation view describe in the 4+1 model?</body>
            <answers>
                <answer>
                    <body>The software's static organization in its development environment.</body>
                    <marks>
                        <mark type="keyword">static</mark>
                        <mark type="keyword">organiz</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="17">
            <body>What is a scenario in the 4+1 view model?</body>
            <answers>
                <answer>
                    <body>A scenario (use-case) is used to show that the elements of the four viewpoints work seamlessly
                        together.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">work.*together</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="18">
            <body>What does the 4+1 stand for in the 4+1 view model</body>
            <answers>
                <answer>
                    <body>The 4+1 different viewpoints</body>
                    <marks>
                        <mark type="keyword">viewpoint</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="19">
            <body>What diagrams are typically used for the logical, process, implementation, deployment, and use case
                view in the 4+1 model?
            </body>
            <answers>
                <answer>
                    <body>Logical: class diagram, process: sequence diagram, implementation: component, deployment:
                        deployment diagram
                    </body>
                    <marks>
                        <mark type="keyword">class</mark>
                        <mark type="keyword">sequence</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">deployment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="20">
            <body>What are the four parts of the C4 model and what do they focus on?</body>
            <answers>
                <answer>
                    <body>System context diagram: Focus on people and software systems. Container diagram: Shows high
                        level shape of the architecture and the distribution of responsibilities, as well as technology
                        choices and communication between containers. Component diagram: Decomposes a container into
                        components, including responsibilities and technology/implementation choices. Code diagram:
                        Class diagrams or entity-relationship diagrams.
                    </body>
                    <marks>
                        <mark type="keyword">context</mark>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">people</mark>
                        <mark type="keyword">container</mark>
                        <mark type="keyword">responsib</mark>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">code</mark>
                        <mark type="keyword">class</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="21">
            <body>What is the idea behind the C4 model?</body>
            <answers>
                <answer>
                    <body>Precise notation is much less important than efficiently communicating the architecture to the
                        target audience.
                    </body>
                    <marks>
                        <mark type="keyword">notation</mark>
                        <mark type="keyword">comunicat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="22">
            <body>What types of system models are there and what do they describe?</body>
            <answers>
                <answer>
                    <body>Object model: Describes the structure of the system and relationships between objects.
                        Functional model: Describes the functions of the system and data flow through the system.
                        Dynamic model: Describes how the system reacts to external events and how events flow through
                        the system.
                    </body>
                    <marks>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">relation</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">dynamic</mark>
                        <mark type="regex">event|influenc</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="23">
            <body>What are the three main attributes characterizing models?</body>
            <answers>
                <answer>
                    <body>Reduction: An increase in abstraction leads to easier communication. Pragmatism: A model is
                        created with a purpose in mind. Mapping: There is a relationship between elements in the model
                        and elements in the original.
                    </body>
                    <marks>
                        <mark type="regex">reduc|abstract</mark>
                        <mark type="regex">pragmat|purpos</mark>
                        <mark type="regex">map|relat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="24">
            <body>What do you call models that represent the current state of a system and the planned state of a
                system?
            </body>
            <answers>
                <answer>
                    <body>As-is models describe the current situation, to-be models the planned state once the project
                        is finished.
                    </body>
                    <marks>
                        <mark type="regex">as.*is</mark>
                        <mark type="regex">to.*be</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="25">
            <body>What are the seven stages in the cycle of modeling?</body>
            <answers>
                <answer>
                    <body>Understand (Comprehend the problem and possible solutions), Conceptualize (Formalize parts of
                        the application domain into a concept language), Abstract (generalize and outline main
                        problems), Define (Unambiguously specify concepts), Construct (actually create the model),
                        Evaluate (based on quality characteristics), Refine (iterate)
                    </body>
                    <marks>
                        <mark type="keyword">understand</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">defin</mark>
                        <mark type="keyword">construct</mark>
                        <mark type="keyword">evaluate</mark>
                        <mark type="keyword">refine</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="26">
            <body>Draw the UML diagram of the IEEE 471 standard.</body>
            <answers>
                <answer>
                    <body>See Chapter 2.1.1 slide 6</body>
                    <marks>
                        <mark type="manual"/>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="27">
            <body>What are some of the benefity of modularity?</body>
            <answers>
                <answer>
                    <body>Easier maintenance, reusability, understandability, reduced complexity, allows for work
                        distribution.
                    </body>
                    <marks>
                        <mark type="keyword">maint</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="keyword">understand</mark>
                        <mark type="keyword">complex</mark>
                        <mark type="keyword">distribut</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="28">
            <body>What is modularity?</body>
            <answers>
                <answer>
                    <body>A decomposition of systems into modules that measures the degree to which components can be
                        separated and recombined.
                    </body>
                    <marks>
                        <mark type="keyword">decomposit</mark>
                        <mark type="keyword">component</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="29">
            <body>What is functional decomposition and what are some of its issues?</body>
            <answers>
                <answer>
                    <body>Each module is a major processing step (function) in the application domain, which can be
                        decomposed into smaller modules. Some issues include the spread of functionality all over the
                        system and the need to understand the whole system to make changes to it, which leads to
                        understandability and maintainability problems.
                    </body>
                    <marks>
                        <mark type="regex">application.*domain</mark>
                        <mark type="regex">understand|maintain</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="30">
            <body>What is a modular decomposition? What assumptions are made and what are some limitations?</body>
            <answers>
                <answer>
                    <body>Each module represents a major abstraction in the application domain. Assumptions: It is
                        possible to find concepts for a new system (greenfield engineering), an existing system
                        (re-engineering), and we can create component-based interfaces for any system (interface
                        engineering). Limitations: Non-unique, different concepts might be found for the same system.
                    </body>
                    <marks>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">concept</mark>
                        <mark type="keyword">unique</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="31">
            <body>What is a black-box model?</body>
            <answers>
                <answer>
                    <body>A black box model presents the functional perspective on a system. Only the interaction
                        between the composition and the environment are taken into account in an abstract way.
                    </body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">environ</mark>
                        <mark type="keyword">abstract</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="32">
            <body>What is a white-box model?</body>
            <answers>
                <answer>
                    <body>A white box model presents the construction perspective on a system, capturing construction
                        and operation.
                    </body>
                    <marks>
                        <mark type="keyword">construct</mark>
                        <mark type="keyword">operat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="33">
            <body>What are the three steps to decompose a system?</body>
            <answers>
                <answer>
                    <body>Step 1: Analyze dependencies between elements. Step 2: Elements with strong dependencies form
                        components. Step 3: Dependencies between components are captured in interfaces.
                    </body>
                    <marks>
                        <mark type="keyword">dependenc</mark>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="34">
            <body>What is a software component?</body>
            <answers>
                <answer>
                    <body>Def 1: A software element conforming to a component model that can be independently deployed
                        and composed according to a composition standard. Def 2: A unit of composition with
                        contractually specified interfaces and explicit context dependencies only that can be deploed
                        independently and is subject to composition by third parties.
                    </body>
                    <marks>
                        <mark type="regex">element|unit</mark>
                        <mark type="regex">model|interface|dependenc</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">composit</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="35">
            <body>What is component-based software engineering? What shortcoming of object-orientation does it fix?
            </body>
            <answers>
                <answer>
                    <body>An approach to software development relying on reuse of entities (software components). It
                        emerged because object-orientation tends to be too detailed and specific for effective reuse. A
                        component is an independent executable entity made up of executable objects. The interface is
                        published and all interactions are made through the published interface.
                    </body>
                    <marks>
                        <mark type="keyword">reuse</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="36">
            <body>
                What are some characteristics of software components?
            </body>
            <answers>
                <answer>
                    <body>They are standardized (conforms to a standard component model), independent (possibility to
                        compose and deploy by itself), composable, deployable and documented.
                    </body>
                    <marks>
                        <mark type="keyword">standard</mark>
                        <mark type="keyword">independen</mark>
                        <mark type="keyword">compos</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">document</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="37">
            <body>What is a component model?</body>
            <answers>
                <answer>
                    <body>A definition of standards for component implementation, documentation, and deployment.</body>
                    <marks>
                        <mark type="keyword">implement</mark>
                        <mark type="keyword">document</mark>
                        <mark type="keyword">deploy</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question id="38" type="extended-answer">
            <body>What are the basic elements of a component model?</body>
            <answers>
                <answer>
                    <body>Interface definition, language used, naming conventions, meta-data, packaging</body>
                    <marks>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">language</mark>
                        <mark type="keyword">nam</mark>
                        <mark type="keyword">meta</mark>
                        <mark type="keyword">packag</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question id="39" type="extended-answer">
            <body>What are the types of component compositions and how do they work?</body>
            <answers>
                <answer>
                    <body>Sequential composition: An intermediate hooks into the exposed components of multiple
                        interfaces. Hierarchical composition: One component hooks into the exposed interface of another
                        component. Adaptive composition: A wrapper surrounds the internal components and wraps around
                        the incoming and outgoing dependencies.
                        <img src="res/39_composition.png"/>
                    </body>
                    <marks>
                        <mark type="keyword">sequen</mark>
                        <mark type="keyword">hierarch</mark>
                        <mark type="keyword">adapt</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="40">
            <body>What are some of the benefits of component based software engineering?</body>
            <answers>
                <answer>
                    <body>Independent components, standardized components, middleware, development process geared to
                        reuse.
                    </body>
                    <marks>
                        <mark type="keyword">independen</mark>
                        <mark type="keyword">standard</mark>
                        <mark type="keyword">middleware</mark>
                        <mark type="keyword">reus</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="41">
            <body>What are some cons of component-based software engineering?</body>
            <answers>
                <answer>
                    <body>Trustworthiness of external components, certification of components, emergent property
                        prediction, requirements trade-offs
                    </body>
                    <marks>
                        <mark type="keyword">trust</mark>
                        <mark type="keyword">certif</mark>
                        <mark type="keyword">propert</mark>
                        <mark type="keyword">trade</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="42">
            <body>What is design by contract?</body>
            <answers>
                <answer>
                    <body>A set of principles to produce dependable and robust object-oriented software</body>
                    <marks>
                        <mark type="keyword">principl</mark>
                        <mark type="keyword">depend</mark>
                        <mark type="keyword">robust</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="43">
            <body>What are the two major characteristics of a contract in the design by contract principle?</body>
            <answers>
                <answer>
                    <body>1: Each party expects benefits from the contract and is prepared to incur obligations to
                        obtain them. These are documented in the contract document, and no other obligations can be can
                        be imposed (no-hidden-clauses rule) to obtain the benefits.
                    </body>
                    <marks>
                        <mark type="keyword">benefit</mark>
                        <mark type="keyword">obligat</mark>
                        <mark type="keyword">hidden</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="44">
            <body>What are the pre/post conditions in a design-by-contract environment?</body>
            <answers>
                <answer>
                    <body>They are assertions (expressions that evaluate to true or false), checking the requirements
                        that any call must satisfy/the properties ensured at the end of execution of the procedure.
                    </body>
                    <marks>
                        <mark type="keyword">assert</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="45">
            <body>Give an example of a language with builtin design-by-contract functionality</body>
            <answers>
                <answer>
                    <body>The Eiffel programming language</body>
                    <marks>
                        <mark type="keyword">eiffel</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="46">
            <body>What are some of the principles in design by contract?</body>
            <answers>
                <answer>
                    <body>1: Non-redundancy principle (The routine never checks its own precondition). 2: Reasonable
                        precondition principle (the need is justified and documented). 3: Failure principle (execution
                        of rescue clause to end, not leading to a retry, causes call to fail. 4: Disciplined exception
                        handling principle (retry / failure) 5: Exception simplicity principle (rescue clauses are
                        simple and focus only on obtaining a stable state.
                    </body>
                    <marks>
                        <mark type="keyword">redundan</mark>
                        <mark type="keyword">reasonable</mark>
                        <mark type="keyword">fail</mark>
                        <mark type="keyword">handl</mark>
                        <mark type="keyword">simpl</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="46">
            <body>What is the difference between defensive programming and design by contract?</body>
            <answers>
                <answer>
                    <body>Defensive programming promotes putting checks in every module to detect unexpected situations.
                        This can lead to redundant checks (duplication) and the responsibilities are less well defined.
                    </body>
                    <marks>
                        <mark type="keyword">check</mark>
                        <mark type="keyword">redundan</mark>
                        <mark type="keyword">respons</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="47">
            <body>What is the meaning of an entry (row/column) in the dependency structure matrix?</body>
            <answers>
                <answer>
                    <body>The row depends on the column.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">row.*depend.*column</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="48">
            <body>What is a dependency structure matrix?</body>
            <answers>
                <answer>
                    <body>A 2D matrix representing structural/functional interrelationships of objects, tasks, or
                        teams
                    </body>
                    <marks>
                        <mark type="keyword">structur</mark>
                        <mark type="keyword">function</mark>
                        <mark type="regex" regex-flags="i">relation|dependen</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="49">
            <body>What is partitioning in relation to a DSM?</body>
            <answers>
                <answer>
                    <body>The collapsing of mutual dependent components into a group to transform the matrix into block
                        triangular form.
                    </body>
                    <marks>
                        <mark type="keyword">mutual</mark>
                        <mark type="keyword">group</mark>
                        <mark type="regex">block.*triang</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="50">
            <body>What property does the lower triangular DSM ensure?</body>
            <answers>
                <answer>
                    <body>That dependencies are acyclic.</body>
                    <marks>
                        <mark type="keyword">acyclic</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="51">
            <body>How is a hierarchical DSM different from a normal DSM?</body>
            <answers>
                <answer>
                    <body>In a hierarchical DSM, groups are represented by a border instead of collapsed into one.
                    </body>
                    <marks>
                        <mark type="keyword">group</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="52">
            <body>How can a layered software system be detected in a DSM?</body>
            <answers>
                <answer>
                    <body>Lower triangular form (each component accesses functionality somewhere below it).</body>
                    <marks>
                        <mark type="keyword">triang</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="53">
            <body>How can a strictly layered software system be detected in a DSM?</body>
            <answers>
                <answer>
                    <body>Only entries adjacent to one side of the diagonal.</body>
                    <marks>
                        <mark type="keyword">diag</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="54">
            <body>What is the meaning of a change propagator in a DSM?</body>
            <answers>
                <answer>
                    <body>A component that is dependent on/depends on many other components. A change in one of the
                        components it depends on can also affect all components that depend on it.
                    </body>
                    <marks>
                        <mark type="keyword">depend</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="55">
            <body>What are some of the benefits of using a DSM?</body>
            <answers>
                <answer>
                    <body>Better scaling than box-and-line diagrams, helps better understand flow of information,
                        automatic mechanism for architectural discovery, efficient cycle detection and integration of
                        dependency rules.
                    </body>
                    <marks>
                        <mark type="keyword">scal</mark>
                        <mark type="keyword">flow</mark>
                        <mark type="keyword">discover</mark>
                        <mark type="keyword">cycle</mark>
                        <mark type="keyword">rules</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="56">
            <body>What are some challenges of a DSM?</body>
            <answers>
                <answer>
                    <body>Only as good as knowledge that goes into it. Unknown interdependencies can exist. Less
                        intuitive than a graph.
                    </body>
                    <marks>
                        <mark type="keyword">know</mark>
                        <mark type="keyword">depend</mark>
                        <mark type="keyword">graph</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.1.3 Guidelines for Modular Design -->
        <question type="extended-answer" id="57">
            <body>What is the formal definition of the structure of a system?</body>
            <answers>
                <answer>
                    <body>The formal definition of a structure is defined by S:=(C,I,CON), where C denotes the
                        components, env\in C denotes the environment, I denoting the interfaces and CON\subseteq I\cross
                        I the connection between interfaces. A component can be a system itself.
                    </body>
                    <marks>
                        <mark type="keyword">component</mark>
                        <mark type="keyword">environ</mark>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="58">
            <body>What are the types of relationship in a system structure?</body>
            <answers>
                <answer>
                    <body>Parent relationships (C\rightarrow C, parent(a)=env), Interface-component relationship
                        (I\rightarrow C, assigned(i)=a),
                        connections between interfaces (CON\rightarrow I\cross I, connected(c)=(a,b))
                    </body>
                    <marks>
                        <mark type="keyword">parent</mark>
                        <mark type="regex" regex-flags="i">assign|interface|component</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="59">
            <body>How is coupling calculated?</body>
            <answers>
                <answer>
                    <body>coupling(S):=\alpha * percentage of connections on same level + (1-\alpha) * percentage of
                        connections on different levels. Where \alpha is a weighting factor of choice.
                    </body>
                    <marks>
                        <mark type="keyword">alpha</mark>
                        <mark type="keyword">connect</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="60">
            <body>What are the types of coupling in order of decreasing coupling (lower is better)?</body>
            <answers>
                <answer>
                    <body>Content, Common, External, Control, Stamp, Data</body>
                    <marks>
                        <mark type="keyword">content</mark>
                        <mark type="keyword">common</mark>
                        <mark type="keyword">external</mark>
                        <mark type="keyword">control</mark>
                        <mark type="keyword">stamp</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="61">
            <body>What is the meaning of content coupling?</body>
            <answers>
                <answer>
                    <body>One component directly affects the working of another component by modifying its data or
                        passing control to unintended points in the other component. Any modification in the other
                        component usually requires a modification in this component.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">control</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="62">
            <body>What is the meaning of common coupling?</body>
            <answers>
                <answer>
                    <body>Two components use shared data (global variables etc). This leads to a lack of clear data
                        responsibility, reduced readability, reduced maintainability, difficulties in reuse and a
                        reduced ability to control data access.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">respons</mark>
                        <mark type="keyword">read</mark>
                        <mark type="keyword">maintain</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="keyword">access</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="63">
            <body>What is the meaning of external coupling?</body>
            <answers>
                <answer>
                    <body>Components communicate through an external medium (file, device, protocol, data format)</body>
                    <marks>
                        <mark type="keyword">medi</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="64">
            <body>What is the meaning of control coupling?</body>
            <answers>
                <answer>
                    <body>One component directs control to another component by passing control information. Good if
                        paramenters allow factoring and reuse, bad if parameters cause completely different behavior or
                        require knowledge of internal functions.
                    </body>
                    <marks>
                        <mark type="keyword">control</mark>
                        <mark type="regex">info|param|arg</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="65">
            <body>What is the meaning of stamp coupling?</body>
            <answers>
                <answer>
                    <body>In stamp coupling, complete data structures are passed between components. The second
                        component therefore has more information that it needs. Define interfaces to limit what clients
                        can access.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                        <mark type="keyword">struct</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="66">
            <body>What is the meaning of data coupling?</body>
            <answers>
                <answer>
                    <body>Component passes only data (not data structures) to another component. Ensures the other
                        component can only access information that it actually needs.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="67">
            <body>What is the meaning of Cohesion?</body>
            <answers>
                <answer>
                    <body>Cohesion is a measure of how closely the responsibilities of a component are related (degree
                        of interaction within a component, higher is better). It characterizes the components internal
                        dependencies.
                    </body>
                    <marks>
                        <mark type="keyword">respons</mark>
                        <mark type="keyword">depend</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="68">
            <body>What are the types of cohesion in descending level of cohesion (higher is better)?</body>
            <answers>
                <answer>
                    <body>Functional, sequential, communicational, procedural, temporal, logical, coincidental.</body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">sequen</mark>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">procedur</mark>
                        <mark type="keyword">tempo</mark>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">coinciden</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="69">
            <body>What is the meaning of coincidental cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are grouped into components without signification relation between elements, i.e. by
                        accident. It degrades maintainability and reusability, refactor by breaking it into several
                        modules.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">relat|accident</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="70">
            <body>What is the meaning of logical cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are related logically but not functionally. Example: Read input from tape, disk,
                        network (operations are related logically, but their function differs significantly).
                    </body>
                    <marks>
                        <mark type="keyword">logic</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="71">
            <body>What is temporal cohesion?</body>
            <answers>
                <answer>
                    <body>The elements are independent but are activated at at the similar times. Example:
                        initialization component (print some status info, open a database connection, verify licensing).
                        This is a weak relationship, usually stronger ones exist that would increase maintainability and
                        reusability.
                    </body>
                    <marks>
                        <mark type="keyword">time</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="72">
            <body>What is procedural cohesion?</body>
            <answers>
                <answer>
                    <body>Elements are grouped into a component only to ensure a particular order of execution. They are
                        still weakly connected, degrading reusability.
                    </body>
                    <marks>
                        <mark type="keyword">order</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="73">
            <body>What is communicational cohesion?</body>
            <answers>
                <answer>
                    <body>Elements in a component operate on the same (external) data. Probably leads to blobs when
                        considering large components, e.g. for database interaction.
                    </body>
                    <marks>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="74">
            <body>What is sequential cohesion?</body>
            <answers>
                <answer>
                    <body>The output of one part is input to another, data flows between parts (different from
                        procedural cohesion).
                    </body>
                    <marks>
                        <mark type="keyword">put</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="75">
            <body>What is functional cohesion?</body>
            <answers>
                <answer>
                    <body>Every essential element to a single computation is contained in the component. These
                        components often transform a single input into a single output. This is the ideal situation,
                        with high reusability, testability, understandability, learnability and fault isolation. There
                        are reduced regression faults and it is easy to extend the product.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">comput|operat</mark>
                        <mark type="keyword">put</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="76">
            <body>What are some advantages expected from striving for low coupling and high cohesion? What should be
                avoided?
            </body>
            <answers>
                <answer>
                    <body>Simpler communication, local decision making, easy correctness proofs, less change
                        propagation, increased reusability and comprehensability. But don&apos;t overdo it.
                    </body>
                    <marks>
                        <mark type="keyword">communicat</mark>
                        <mark type="keyword">decision</mark>
                        <mark type="keyword">proof</mark>
                        <mark type="keyword">propagat</mark>
                        <mark type="keyword">reus</mark>
                        <mark type="keyword">comprehen</mark>
                        <mark type="keyword">overdo</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="77">
            <body>What is the single responsibility principle?</body>
            <answers>
                <answer>
                    <body>A class should only ever have one reason to change. If there are more, split the
                        functionality. Should lead to cohesion at package/implementation level. Idea is simple, but can
                        be hard to get right in practice.
                    </body>
                    <marks>
                        <mark type="keyword">reason</mark>
                        <mark type="keyword">change</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="78">
            <body>What is responsability?</body>
            <answers>
                <answer>
                    <body>A family of functions that serves one particular actor. It describes the core functionality of
                        a class.
                    </body>
                    <marks>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">actor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="79">
            <body>What is an actor in relation to a responsibility?</body>
            <answers>
                <answer>
                    <body>An actor for a responsibility is the single source of change for that responsibility.</body>
                    <marks>
                        <mark type="keyword">change</mark>
                        <mark type="regex" regex-flags="i">single|only|sole</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="80">
            <body>What is meant by separation of concerns?</body>
            <answers>
                <answer>
                    <body>Talk about different things (features) in different places (non-functional and functional).
                        Example: Business logic, presentation, data layer. Functional: related to
                        low coupling/high cohesion.
                    </body>
                    <marks>
                        <mark type="keyword">different</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="81">
            <body>What is the open/closed principle?</body>
            <answers>
                <answer>
                    <body>Software entities should be open for extension but closed for modifications. Related to
                        inheritance/polymorphism in object-oriented programming.
                    </body>
                    <marks>
                        <mark type="keyword">exten</mark>
                        <mark type="keyword">modif</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="82">
            <body>What is Liskov&apos;s substitution principle?</body>
            <answers>
                <answer>
                    <body>If q(x) is a provable property of objects x of type t, then q(y) is provable for objects y of
                        type s, where s subtype t. In words: Subtypes must be substitutable for base types, child
                        classes must break parent&apos;s type definition.
                    </body>
                    <marks>
                        <mark type="keyword">property</mark>
                        <mark type="keyword">type</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="83">
            <body>What is a child class not allowed to do in order to conform to Liskov&apos;s substitution principle?
            </body>
            <answers>
                <answer>
                    <body>It must not remove base class behavior, strengthen/weaken pre/post-conditions, violate base
                        class invariants and require calling code to know it is different from the base type.
                    </body>
                    <marks>
                        <mark type="regex" regex-flags="i">remove|delete</mark>
                        <mark type="keyword">condition</mark>
                        <mark type="keyword">invariant</mark>
                        <mark type="keyword">call</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="84">
            <body>What is the Interface-Segregation Principle (ISP)?</body>
            <answers>
                <answer>
                    <body>Clients should not be forced to depend on interfaces they do not use (small cohesive
                        interfaces instead of fat interfaces). Related to single responsibility principle.
                    </body>
                    <marks>
                        <mark type="keyword">interface</mark>
                        <mark type="keyword">use</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="85">
            <body>What is meant by &apos;anticipate change&apos;?</body>
            <answers>
                <answer>
                    <body>Build components in a way to minimize effort for potential future changes. Compromise between
                        generality and specificity. Consider potential extensions/changes. Don&apos;t overdo it.
                    </body>
                    <marks>
                        <mark type="keyword">future</mark>
                        <mark type="keyword">change</mark>
                        <mark type="keyword">specific</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="86">
            <body>What is meant by &quot;don&apos;t repeat yourself&quot;?</body>
            <answers>
                <answer>
                    <body>Every piece of knowledge and functionality must have a single, unambiguous, authoritative
                        representation within a system. If there are more than one they can diverge unexpectedly, lead
                        to redundancy, increase complexity and ambiguity.
                    </body>
                    <marks>
                        <mark type="keyword">know</mark>
                        <mark type="keyword">represent</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="87">
            <body>What are the four types of duplication?</body>
            <answers>
                <answer>
                    <body>Imposed duplication (developers feel they have no choice), inadvertent duplication (developers
                        don&apos;t realize they are duplicating information), impatient duplication (developers get
                        lazy), inter-developer duplication (multiple people duplicate a piece of information).
                    </body>
                    <marks>
                        <mark type="keyword">imposed</mark>
                        <mark type="keyword">inadvertent</mark>
                        <mark type="keyword">impatient</mark>
                        <mark type="keyword">inter</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="88">
            <body>What is the difference between internal and external quality?</body>
            <answers>
                <answer>
                    <body>Good question! It is referenced in 2.1.3/2.1.4 slide 54 but apparently defined elsewhere.
                    </body>
                    <marks>
                        <mark type="manual"/>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="89">
            <body>What are the parts of a three tier architecture?</body>
            <answers>
                <answer>
                    <body>Load balancer, web/application server, data server</body>
                    <marks>
                        <mark type="keyword">balance</mark>
                        <mark type="regex" regex-flags="i">web|appl</mark>
                        <mark type="regex" regex-flags="i">data|stor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="90">
            <body>What are some advantages/disadvantages of a three tier architecture?</body>
            <answers>
                <answer>
                    <body>Effiecient, all in one hand, large attack surface (compromised web server equals compromised
                        application)
                    </body>
                    <marks>
                        <mark type="keyword">effici</mark>
                        <mark type="keyword">attack</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="91">
            <body>What are the parts of a four tier architecture?</body>
            <answers>
                <answer>
                    <body>Load balancer, web server, application server, data server</body>
                    <marks>
                        <mark type="keyword">balance</mark>
                        <mark type="keyword">web</mark>
                        <mark type="keyword">appl</mark>
                        <mark type="regex" regex-flags="i">data|stor</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="92">
            <body>What are the benefits and drawbacks of four tier over three tier?</body>
            <answers>
                <answer>
                    <body>Reduced attack surface (web/application servers separated). However, need to run more
                        servers.
                    </body>
                    <marks>
                        <mark type="keyword">attack</mark>
                        <mark type="keyword">server</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="93">
            <body>What s a demilitarized zone?</body>
            <answers>
                <answer>
                    <body>An intermediate zone between the hostile internet and the internal network used for public
                        servers. Compromising a public server does not gain access to the internal network.
                    </body>
                    <marks>
                        <mark type="keyword">internet</mark>
                        <mark type="keyword">internal</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.2 Antipatterns -->
        <question type="extended-answer" id="94">
            <body>What is an antipattern?</body>
            <answers>
                <answer>
                    <body>A literary form describing a commonly occurring solution to a problem that generates negative
                        consequences. This can occur due to insufficient knowledge, experience in solving particular
                        type of problem, or applying a pattern in the wrong context.
                    </body>
                    <marks>
                        <mark type="keyword">solution</mark>
                        <mark type="keyword">negative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="95">
            <body>What are some of the goals of a higher level vocabulary in relation to antipatterns?</body>
            <answers>
                <answer>
                    <body>Simplify communication, enable concise description, provide real-world experience, provide
                        remedy for most common predicaments, highlight the most common problems, provide the tools to
                        recognize problems and causes. (Source: 2.2 slide 5)
                    </body>
                    <marks>
                        <mark type="keyword">simpl</mark>
                        <mark type="keyword">descr</mark>
                        <mark type="keyword">exper</mark>
                        <mark type="keyword">problem</mark>
                        <mark type="keyword">cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="96">
            <body>What are the two types of antipatterns relating to software?</body>
            <answers>
                <answer>
                    <body>Software development antipatterns (describe useful refactorings) and software architecture
                        antipatterns (system-level structure).
                    </body>
                    <marks>
                        <mark type="keyword">dev</mark>
                        <mark type="keyword">arch</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="97">
            <body>What are the seven deadly sins in software practice?</body>
            <answers>
                <answer>
                    <body>Haste (lack of time), apathy (lack of care), narrow-mindedness (refuse to accept widely-known
                        solutions), sloth (easy answers), avarice (excessive complexity), ignorance (failure to seek
                        understanding), pride/hubris (not-invented-here)
                    </body>
                    <marks>
                        <mark type="keyword">haste</mark>
                        <mark type="keyword">apathy</mark>
                        <mark type="keyword">narrow-minded</mark>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">ignorance</mark>
                        <mark type="regex" regex-flags="i">pride|hubris</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="98">
            <body>What are typical root causes and other causes of the blob antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: sloth, haste. Other causes: lack of (object-oriented) architecture and
                        architecture enforcement, too limited intervention and specified disaster.
                    </body>
                    <marks>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">haste</mark>
                        <mark type="keyword">arch</mark>
                        <mark type="keyword">enforce</mark>
                        <mark type="keyword">intervent</mark>
                        <mark type="keyword">disaster</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9001">
            <body>What is the refactored solution of the blob antipattern?</body>
            <answers>
                <answer>
                    <body>Refactoring of responsibilities</body>
                    <marks>
                        <mark type="keyword">respons</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="99">
            <body>What is the functional decomposition antipattern?</body>
            <answers>
                <answer>
                    <body>The result of experienced non-object-oriented developers developing in a object-oriented
                        language, causing the program to look like a functional program using workarounds.
                    </body>
                    <marks>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">function</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="100">
            <body>What are the root causes and other causes of the functional decomposition antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: avarice, greed, sloth. Other causes: lack of object-oriented understanding, lack
                        of architecture enforcement, specified disaster.
                    </body>
                    <marks>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">greed</mark>
                        <mark type="keyword">sloth</mark>
                        <mark type="keyword">object</mark>
                        <mark type="keyword">enforce</mark>
                        <mark type="keyword">disaster</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="101">
            <body>Which room is used to torture Winston Smith?</body>
            <answers>
                <answer>
                    <body>Room 101</body>
                    <marks>
                        <mark type="keyword">101</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="102">
            <body>What is the auto-generated stovepipe antipattern?</body>
            <answers>
                <answer>
                    <body>Occurs in an attempt to migrate existing software interfaces to distributed interfaces without
                        modifying the software design. This generates a range of problems: Fine-grained communication
                        between interfaces can be inefficient in distributed environments, existing interfaces may be
                        implementation specific, applications might assume locality (access to filesystem etc.), and
                        excessive complexity can arise in larger scale systems.
                    </body>
                    <marks>
                        <mark type="keyword">distribut</mark>
                        <mark type="keyword">interface</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="103">
            <body>How can auto-generated stovepipe be refactored?</body>
            <answers>
                <answer>
                    <body>By reengineering interfaces and creating a coarse-grained object model for communication.
                    </body>
                    <marks>
                        <mark type="keyword">reengineer</mark>
                        <mark type="keyword">object</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="104">
            <body>What is the golden hammer antipattern?</body>
            <answers>
                <answer>
                    <body>When a team has experience in a particular solution approach and attempts to solve any new
                        problems using the familiar approach, even though it might not be suitable for the specific
                        problem instance.
                    </body>
                    <marks>
                        <mark type="keyword">solution</mark>
                        <mark type="keyword">problem</mark>
                        <mark type="keyword">experience</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="105">
            <body>What are the root causes of the golden hammer antipattern and what are some other causes?</body>
            <answers>
                <answer>
                    <body>Root causes: ignorance, pride, narrow-mindedness. Other causes: several successes with a
                        particular approach, large investment in a technology, isolation of group, reliance on
                        proprietary features.
                    </body>
                    <marks>
                        <mark type="keyword">ignorance</mark>
                        <mark type="keyword">pride</mark>
                        <mark type="keyword">narrow-minded</mark>
                        <mark type="keyword">investment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="106">
            <body>What is the refactored solution of the golden hammer antipattern?</body>
            <answers>
                <answer>
                    <body>Expand your horizons</body>
                    <marks>
                        <mark type="keyword">horizon</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="107">
            <body>What is the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>A design that was influenced by many stakeholders, leading to excessive complexity in
                        features/variations. May be found in some standards.
                    </body>
                    <marks>
                        <mark type="keyword">complex</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="108">
            <body>What are some root causes and other typical causes of the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>Root causes: pride, avarice. Other typical causes: lack of project architect, bad meeting or
                        software process, attempt to make everybody happy, gold plating (modifications based on
                        proprietary interests)
                    </body>
                    <marks>
                        <mark type="keyword">pride</mark>
                        <mark type="keyword">avarice</mark>
                        <mark type="keyword">arch</mark>
                        <mark type="keyword">process</mark>
                        <mark type="keyword">gold</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="109">
            <body>What is the refactored solution to the design by committee antipattern?</body>
            <answers>
                <answer>
                    <body>Meeting facilitation. Use all the standard methods to hold coordinated meetings.</body>
                    <marks>
                        <mark type="keyword">facilitat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="110">
            <body>What is a typical example of a design by committee used in the lecture?</body>
            <answers>
                <answer>
                    <body>The SQL standard, which started out in 1989 as a 115 page document, then had a 580 page 1992
                        standardization called SQL92 and died before SQL3.
                    </body>
                    <marks>
                        <mark type="keyword">sql</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9002">
            <body>What are the antipatterns covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Blob, functional decomposition, auto-generated stovepipe, golden hammer, design by committee
                    </body>
                    <marks>
                        <mark type="keyword">blob</mark>
                        <mark type="keyword">functional decomposit</mark>
                        <mark type="keyword">stovepipe</mark>
                        <mark type="keyword">hammer</mark>
                        <mark type="keyword">design by committee</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.6: Safety -->
        <question type="extended-answer" id="1000">
            <body>What is the difference between safety and security?</body>
            <answers>
                <answer>
                    <body>Safety ("Betriebssicherheit") is concerned with protecting the environment from the system
                        while security ("Angriffssicherheit") is concerned with protecting the system from the
                        environment.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">environment</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1001">
            <body>What is the goal of the safety threshold concept?</body>
            <answers>
                <answer>
                    <body>The goal is to determine how safe is 'safe enough' without over- or under-engineering a
                        product.
                    </body>
                    <marks>
                        <mark type="keyword">determine</mark>
                        <mark type="keyword">safe enough</mark>
                        <mark type="regex">over.*engineering</mark>
                        <mark type="regex">under.*engineering</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1002">
            <body>What is risk?</body>
            <answers>
                <answer>
                    <body>Risk is the combination of the probability of occurrence of harm and the severity of that
                        harm.
                    </body>
                    <marks>
                        <mark type="keyword">combination</mark>
                        <mark type="keyword">probability</mark>
                        <mark type="keyword">severity</mark>
                        <mark type="keyword">harm</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1003">
            <body>What is risk aversion?</body>
            <answers>
                <answer>
                    <body>The reluctance of people to accept a bargain with an uncertain payoff rather than another
                        bargain with more certain, but possibly lower, expected payoff.
                    </body>
                    <marks>
                        <mark type="keyword">reluctance</mark>
                        <mark type="keyword">accept</mark>
                        <mark type="keyword">uncertain</mark>
                        <mark type="keyword">certain</mark>
                        <mark type="keyword">payoff</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1004">
            <body>What is scale aversion?</body>
            <answers>
                <answer>
                    <body>The tendency to want greater protection where consequences are high.</body>
                    <marks>
                        <mark type="keyword">tendency</mark>
                        <mark type="keyword">protection</mark>
                        <mark type="keyword">consequences</mark>
                        <mark type="keyword">high</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1005">
            <body>What is the ALARP principle?</body>
            <answers>
                <answer>
                    <body>The "As Low As is Reasonably Practical" principle defines three risk regions: intolerable
                        region, tolerable/ALARP region, and the broadly acceptable region.
                    </body>
                    <marks>
                        <mark type="keyword">As Low As is Reasonably Practical</mark>
                        <mark type="keyword">intolerable region</mark>
                        <mark type="regex" regex-flags="i">tolerable region|ALARP region</mark>
                        <mark type="keyword">broadly acceptable region</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1006">
            <body>What is the goal of risk reduction?</body>
            <answers>
                <answer>
                    <body>The goal is to reduce risk to a tolerable level by combining multiple methods/means (not to
                        zero).
                    </body>
                    <marks>
                        <mark type="keyword">reduce</mark>
                        <mark type="keyword">tolerable level</mark>
                        <mark type="keyword">combining</mark>
                        <mark type="regex" regex-flags="i">methods|means</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1007">
            <body>What is the definition of safety?</body>
            <answers>
                <answer>
                    <body>The absence of unacceptable/unreasonable risk.</body>
                    <marks>
                        <mark type="keyword">absence</mark>
                        <mark type="regex" regex-flags="i">unacceptable|unreasonable</mark>
                        <mark type="keyword">risk</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1008">
            <body>How are faults, errors, and failures connected?</body>
            <answers>
                <answer>
                    <body>Faults manifest as an error and an error ultimately may cause a failure.</body>
                    <marks>
                        <mark type="keyword">manifest</mark>
                        <mark type="keyword">may</mark>
                        <mark type="keyword">cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1009">
            <body>What is a fault?</body>
            <answers>
                <answer>
                    <body>A fault is an abnormal condition that can cause an element or an item to fail.</body>
                    <marks>
                        <mark type="keyword">abnormal condition</mark>
                        <mark type="keyword">cause</mark>
                        <mark type="keyword">fail</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1010">
            <body>What is an error?</body>
            <answers>
                <answer>
                    <body>An error is the discrepancy between a computed, observed or measured value or condition and
                        the true, specified or theoretically correct value or condition.
                    </body>
                    <marks>
                        <mark type="keyword">discrepancy</mark>
                        <mark type="regex" regex-flags="i">value|condition</mark>
                        <mark type="regex" regex-flags="i">specified|theoretically correct</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1011">
            <body>What is a failure?</body>
            <answers>
                <answer>
                    <body>A failure is the termination of the ability of an element, to perform a function as required.
                    </body>
                    <marks>
                        <mark type="keyword">termination</mark>
                        <mark type="keyword">ability</mark>
                        <mark type="keyword">element</mark>
                        <mark type="keyword">perform</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">required</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1012">
            <body>What is the difference between systematic and random issues?</body>
            <answers>
                <answer>
                    <body>A random issue is caused by physical processes such as damage or fatigue, while a systematic
                        issue
                        is caused by specification or design issues, or hardware wear-out.
                    </body>
                    <marks>
                        <mark type="keyword">physical processes</mark>
                        <mark type="keyword">specification</mark>
                        <mark type="keyword">design</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1013">
            <body>What is a cascading failure?</body>
            <answers>
                <answer>
                    <body>A failure of an element causing another element of the same item to fail.</body>
                    <marks>
                        <mark type="keyword">failure</mark>
                        <mark type="keyword">element</mark>
                        <mark type="keyword">another</mark>
                        <mark type="keyword">same item</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1014">
            <body>What is a common cause failure?</body>
            <answers>
                <answer>
                    <body>A failure of two or more elements resulting form a single specific event or root cause.</body>
                    <marks>
                        <mark type="keyword">two or more</mark>
                        <mark type="keyword">elements</mark>
                        <mark type="keyword">root cause</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1015">
            <body>What does functional safety cover?</body>
            <answers>
                <answer>
                    <body>Functional safety focuses on the hazards and risks originating from the function of an (E/E)
                        system.
                    </body>
                    <marks>
                        <mark type="keyword">hazard</mark>
                        <mark type="keyword">risk</mark>
                        <mark type="keyword">function</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1016">
            <body>What is the lifecycle approach to functional safety?</body>
            <answers>
                <answer>
                    <body>The various life cycle activities and defenses against systematic failures that are necessary
                        to achieve functional safety occurring at different stages in the design and operation of the
                        system.
                    </body>
                    <marks>
                        <mark type="keyword">life cycle activities</mark>
                        <mark type="keyword">defense</mark>
                        <mark type="keyword">systematic failure</mark>
                        <mark type="keyword">stages</mark>
                        <mark type="keyword">design</mark>
                        <mark type="keyword">operation</mark>
                        <mark type="keyword">system</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1017">
            <body>What does the lifecycle approach to functional safety emphasize?</body>
            <answers>
                <answer>
                    <body>Integration of safety into the design; Systematic hazard identification and analysis;
                        Addressing the entire system in addition to the subsystems and components; Using protection
                        layers for risk reduction; Qualitative and quantitative approaches
                    </body>
                    <marks>
                        <mark type="keyword">integration</mark>
                        <mark type="keyword">systematic</mark>
                        <mark type="keyword">entire system</mark>
                        <mark type="keyword">protection layer</mark>
                        <mark type="keyword">qualitative</mark>
                        <mark type="keyword">quantitative</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1018">
            <body>What are the two safety concepts in the lifecycle approach to functional safety?</body>
            <answers>
                <answer>
                    <body>The functional safety concept is a statement of the functionality to achieve the safety goal.
                        The
                        technical safety concept is a statement of how this functionality is implemented in hardware or
                        software.
                    </body>
                    <marks>
                        <mark type="keyword">functional</mark>
                        <mark type="keyword">statement</mark>
                        <mark type="keyword">functionality</mark>
                        <mark type="keyword">technical</mark>
                        <mark type="keyword">implement</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1019">
            <body>What are the objectives of safety analysis?</body>
            <answers>
                <answer>
                    <body>The objectives are:
                        ...to examine consequences of faults and failures on functions, behavior and design of
                        items/elements.
                        ...to provide information on conditions/causes that could lead to violation of a safety goal or
                        safety requirement.
                        ...to contribute to identification of new functional or non-functional hazards not previously
                        identified during the hazard analysis and risk assessment.
                    </body>
                    <marks>
                        <mark type="keyword">examine consequences</mark>
                        <mark type="keyword">provide information</mark>
                        <mark type="keyword">identification</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1020">
            <body>What are the differences between qualitative and quantitative safety analysis methods?</body>
            <answers>
                <answer>
                    <body>Qualitative methods require knowledge of relevant fault models and can identify failures.
                        Quantitative methods also require knowledge about relevant fault models and additionally about
                        quantitative hardware failure rates. They can complement qualitative analyses and are able to
                        predict the frequency of random hardware failures. Thus they are used to verify hardware
                        designs.
                    </body>
                    <marks>
                        <mark type="keyword">knowledge</mark>
                        <mark type="keyword">fault model</mark>
                        <mark type="keyword">identify failure</mark>
                        <mark type="keyword">failure rate</mark>
                        <mark type="keyword">predict</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1021">
            <body>What is the difference between inductive and deductive safety analysis methods?</body>
            <answers>
                <answer>
                    <body>Inductive methods are bottom-up (fault to failure) methods, while deductive methods are
                        top-down
                        (failure to fault) methods.
                    </body>
                    <marks>
                        <mark type="keyword">bottom-up</mark>
                        <mark type="keyword">top-down</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1022">
            <body>What is the usual relation between inductive and deductive safety analysis methods?</body>
            <answers>
                <answer>
                    <body>They are usually complementary.</body>
                    <marks>
                        <mark type="keyword">complementary
                        </mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1023">
            <body>What inductive safety analysis method was discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Failure Mode and Effects Analysis (FMEA)</body>
                    <marks>
                        <mark type="regex" regex-flags="i">Failure Mode and Effects Analysis|FMEA</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1024">
            <body>What deductive safety analysis method was discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Fault Tree Analysis (FTA)</body>
                    <marks>
                        <mark type="regex" regex-flags="i">Fault Tree Analysis|FTA</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1025">
            <body>What is the most important FMEA terminology? Also briefly explain it.</body>
            <answers>
                <answer>
                    <body>Failure Mode: Manner in which a component could potentially fail to meet design intent.
                        Failure Effects: Effects of the failure mode on the function as perceived by the customer.
                        Causes: Indications of a design weakness, the consequence of which is the failure mode.
                        Detection/Prevention Measures: Activities which will assure the design adequacy for the failure
                        cause under consideration.
                    </body>
                    <marks>
                        <mark type="keyword">failure mode</mark>
                        <mark type="keyword">failure effect</mark>
                        <mark type="keyword">cause</mark>
                        <mark type="regex" regex-flags="i">Detection Measure|Prevention Measure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1026">
            <body>What quantitative variables does FMEA consider? Also briefly explain them.</body>
            <answers>
                <answer>
                    <body>Severity: Rates the severity of a potential failure effect.
                        Occurrence: Rates the likelihood that the failure will occur.
                        Detection: Rates the likelihood that the problem will not be detected before it reaches the
                        end-user.
                        Risk Priority Number: Severity * Occurrence * Detection
                    </body>
                    <marks>
                        <mark type="keyword">severity</mark>
                        <mark type="keyword">occurrence</mark>
                        <mark type="keyword">detection</mark>
                        <mark type="keyword">risk priority number</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1027">
            <body>What is the goal of FTA?</body>
            <answers>
                <answer>
                    <body>The goal is to identify all conditions that lead to a system failure.</body>
                    <marks>
                        <mark type="keyword">identify</mark>
                        <mark type="keyword">condition</mark>
                        <mark type="keyword">fail</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1028">
            <body>What is the procedure of FTA?</body>
            <answers>
                <answer>
                    <body>Define the system under scrutiny. Determine undesired events (top event). Identify event or
                        series of events that lead to the top level event.
                    </body>
                    <marks>
                        <mark type="keyword">define</mark>
                        <mark type="keyword">undesired event</mark>
                        <mark type="keyword">identify</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.7: Security -->
        <question type="extended-answer" id="1029">
            <body>What are the CIA security properties? Explain them briefly.</body>
            <answers>
                <answer>
                    <body>Confidentiality: Can non-authorized parties see data?
                        Integrity: Has data been altered?
                        Availability: Is data always accessible?
                    </body>
                    <marks>
                        <mark type="keyword">confidentiality</mark>
                        <mark type="keyword">integrity</mark>
                        <mark type="keyword">availability</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1030">
            <body>What security properties other than CIA did the lecture cover?</body>
            <answers>
                <answer>
                    <body>Non-repudiation: Impossibility to inappropriately deny an action.
                        Authenticity: An action assigned to an entity was actually performed by that entity.
                        Auditability: Ability to reconstruct earlier states of a system.
                        Accountability: Ability to assign responsibility for actions to an entity.
                        Privacy: Refers to security of personal information.
                        Anonymity: The identity of an entity is hidden; one aspect of privacy.
                    </body>
                    <marks>
                        <mark type="keyword">non-repudiation</mark>
                        <mark type="keyword">authenticity</mark>
                        <mark type="keyword">auditability</mark>
                        <mark type="keyword">accountability</mark>
                        <mark type="keyword">privacy</mark>
                        <mark type="keyword">anonymity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1031">
            <body>What effect does increasing security usually have on usability?</body>
            <answers>
                <answer>
                    <body>It decreases usability.</body>
                    <marks>
                        <mark type="regex" regex-flags="i">decrease|worse</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1032">
            <body>What four kinds of factors have to be leveraged for security?</body>
            <answers>
                <answer>
                    <body>Technical: e.g. cryptography
                        Organizational: e.g. defining responsibilities
                        People-related: e.g. education
                        Legal: e.g. liability regulations
                    </body>
                    <marks>
                        <mark type="keyword">technic</mark>
                        <mark type="keyword">organization</mark>
                        <mark type="keyword">people</mark>
                        <mark type="keyword">legal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1033">
            <body>What five design principles for designing secure systems were covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Least privilege: Every subject should not have more privileges than necessary.
                        Complete mediation: Access to every object must be controlled in a way not circumventable.
                        Secure, fail-safe defaults: Security mechanisms should start in a secure state and return to a
                        secure default state in case of failures.
                        Compartmentalization: Organize resources into groups, isolated from others except for limited,
                        controlled means of communication.
                        Minimum exposure: Minimize the attack surface a system presents to a potential adversary.
                    </body>
                    <marks>
                        <mark type="keyword">least privilege</mark>
                        <mark type="keyword">complete mediation</mark>
                        <mark type="keyword">fail-safe defaults</mark>
                        <mark type="keyword">compartmentalization</mark>
                        <mark type="keyword">minimum exposure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1034">
            <body>What kinds of implementation-level attacks were discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>SQL injections, cross-site scripting (XSS), and buffer-overflow attacks.</body>
                    <marks>
                        <mark type="keyword">SQL</mark>
                        <mark type="keyword">XSS</mark>
                        <mark type="keyword">overflow</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1035">
            <body>What are the three different types of XSS?</body>
            <answers>
                <answer>
                    <body>Non-persistent (or reflective) attacks: Malicious code in a link that goes to the server and
                        back.
                        Persistent attacks: Malicious code in server store, sent from server to client.
                        DOM based attacks: Server web application not involved.
                    </body>
                    <marks>
                        <mark type="keyword">non-persistent</mark>
                        <mark type="regex" regex-flags="i">\bpersistent\b</mark>
                        <mark type="keyword">dom</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1036">
            <body>What is an attack tree and how is it used?</body>
            <answers>
                <answer>
                    <body>An attack tree is a fault tree considering the role of attackers. Nodes are assigned
                        attributes such as possibilities, probabilities, and estimated impact. This identifies the most
                        important attacks to deploy countermeasures for.
                    </body>
                    <marks>
                        <mark type="keyword">fault tree</mark>
                        <mark type="keyword">attribute</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1037">
            <body>What is the BSI baseline protection?</body>
            <answers>
                <answer>
                    <body>It is basically a catalog of what should be done in most situations in order to secure
                        standard
                        infrastructure.
                    </body>
                    <marks>
                        <mark type="keyword">catalog</mark>
                        <mark type="keyword">secur</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1038">
            <body>What is the General Data Protection Regulation (GDPR)?</body>
            <answers>
                <answer>
                    <body>The GDPR applies to every organization dealing with european citizens and regulates how these
                        organizations have to handle private data.
                    </body>
                    <marks>
                        <mark type="keyword">organization</mark>
                        <mark type="keyword">europe</mark>
                        <mark type="keyword">private data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1038">
            <body>With which four goals may information security interfere with?</body>
            <answers>
                <answer>
                    <body>Performance, usability, time to market, and cost objectives.</body>
                    <marks>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">usability</mark>
                        <mark type="keyword">time</mark>
                        <mark type="keyword">cost</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Chapter 2.7: Security -->
        <question type="extended-answer" id="1039">
            <body>What is a distributed system?</body>
            <answers>
                <answer>
                    <body>A distributed system consists of physically disjoint compute resources, interconnected by a
                        network.
                    </body>
                    <marks>
                        <mark type="keyword">disjoint</mark>
                        <mark type="keyword">connected</mark>
                        <mark type="keyword">network</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1040">
            <body>What are a five of the characteristics of distributed systems covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Reliability, Availability, Heterogeneity, Openness, Security, Scalability, Fault-tolerance and
                        failure handling, Concurrency, Transparency, Predictable performance
                    </body>
                    <marks>
                        <mark type="keyword">reliability</mark>
                        <mark type="keyword">availability</mark>
                        <mark type="keyword">heterogeneity</mark>
                        <mark type="keyword">openness</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">scalability</mark>
                        <mark type="keyword">fault-tolerance</mark>
                        <mark type="keyword">concurrency</mark>
                        <mark type="keyword">transparency</mark>
                        <mark type="keyword">predictable performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1041">
            <body>How are reliability and availability of a system related?</body>
            <answers>
                <answer>
                    <body>A reliable system has high availability but an available system may or may not be reliable.
                    </body>
                    <marks>
                        <mark type="keyword">system</mark>
                        <mark type="keyword">but</mark>
                        <mark type="keyword">not</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1042">
            <body>What are four of the aspects, that overall transparency depends on?</body>
            <answers>
                <answer>
                    <body>Access: Hide differences in data representation.
                        Location: Hide where a resource is located.
                        Migration: Hide that a resource may move to another location.
                        Relocation: Hide that a resource may be moved to another location while in use.
                        Replication Hide that a resource is replicated.
                        Concurrency: Hide that a resource may be shared by several competitive users.
                        Failure: Hide the failure and recovery of a resource.
                    </body>
                    <marks>
                        <mark type="keyword">access</mark>
                        <mark type="keyword">location</mark>
                        <mark type="keyword">migration</mark>
                        <mark type="keyword">relocation</mark>
                        <mark type="keyword">replication</mark>
                        <mark type="keyword">concurrency</mark>
                        <mark type="keyword">failure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1043">
            <body>What is middleware?</body>
            <answers>
                <answer>
                    <body>Middleware comprises services and abstractions that facilitate design, development and
                        deployment of distributed applications in heterogeneous, networked environments.
                    </body>
                    <marks>
                        <mark type="keyword">service</mark>
                        <mark type="keyword">abstract</mark>
                        <mark type="keyword">design</mark>
                        <mark type="keyword">develop</mark>
                        <mark type="keyword">deploy</mark>
                        <mark type="keyword">distributed</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1044">
            <body>What does middleware deal with?</body>
            <answers>
                <answer>
                    <body>Capturing common functionalities (like message passing), interoperability, and system
                        integration.
                    </body>
                    <marks>
                        <mark type="keyword">common function</mark>
                        <mark type="keyword">interoperability</mark>
                        <mark type="keyword">integration</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1045">
            <body>What are the three layers of the middleware stack?</body>
            <answers>
                <answer>
                    <body>Application layer; Middleware layer; IT infrastructure
                    </body>
                    <marks>
                        <mark type="keyword">application</mark>
                        <mark type="keyword">middleware</mark>
                        <mark type="keyword">infrastructure</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1045">
            <body>What is the main purpose of database-centric architectures?</body>
            <answers>
                <answer>
                    <body>The purpose is to handle data access and update.</body>
                    <marks>
                        <mark type="keyword">access</mark>
                        <mark type="keyword">update</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1046">
            <body>What is a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>The mainframe model uses the mainframe as a central repository for information as well as
                        processing for every application. Terminals enable input/output into the applications. All
                        administration takes place on the mainframe itself.
                    </body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">information</mark>
                        <mark type="keyword">processing</mark>
                        <mark type="keyword">terminal</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1047">
            <body>What are some advantages of a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>Hardware maintenance cost reduction; Single point of administration; One type of
                        administrative skill set; Simple architecture and low bandwidth requirements
                    </body>
                    <marks>
                        <mark type="keyword">maintenance</mark>
                        <mark type="keyword">admin</mark>
                        <mark type="keyword">simple architecture</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1048">
            <body>What are some disadvantages of a typical mainframe model?</body>
            <answers>
                <answer>
                    <body>Single point of failure; Character-based application only; Bottlenecks due to time-sharing
                        systems
                    </body>
                    <marks>
                        <mark type="keyword">single point of failure</mark>
                        <mark type="keyword">character-based</mark>
                        <mark type="keyword">bottleneck</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1049">
            <body>What layers does a typical three-layered client/server architecture consist of?</body>
            <answers>
                <answer>
                    <body>Client, Web server, and Data sources.</body>
                    <marks>
                        <mark type="keyword">client</mark>
                        <mark type="keyword">server</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1050">
            <body>What are some advantages of a typical three-layered client/server architecture?</body>
            <answers>
                <answer>
                    <body>Reduced hardware costs; No single point of failure; Flexibility; Scalable architecture
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">no single point of failure</mark>
                        <mark type="keyword">flexib</mark>
                        <mark type="keyword">scalab</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1051">
            <body>What are some disadvantages of a typical three-layered client/server architecture?</body>
            <answers>
                <answer>
                    <body>Heightened administrative costs; Increased security risk; Lack of centralized backup
                    </body>
                    <marks>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">backup</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1052">
            <body>What is a database view?</body>
            <answers>
                <answer>
                    <body>A view is a virtual relation (e.g. table) that does not actually exist in the database but is
                        produced upon request, at the time of request.
                    </body>
                    <marks>
                        <mark type="keyword">virtual</mark>
                        <mark type="keyword">produced</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1053">
            <body>What purposes can a database view fulfill?</body>
            <answers>
                <answer>
                    <body>Provides a powerful and flexible security mechanism by hiding parts; Permits customized data
                        access; Can simplify complex operations on base relations; Complex queries can be reused;
                        Logical data independence (view instantly incorporates changes in base relation)
                    </body>
                    <marks>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">custom</mark>
                        <mark type="keyword">simpl</mark>
                        <mark type="keyword">reuse</mark>
                        <mark type="keyword">logical data independence</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1054">
            <body>What are some advantages of database views?</body>
            <answers>
                <answer>
                    <body>Data independence; Improved security; Reduced complexity; Convenience; Customization; Data
                        integrity
                    </body>
                    <marks>
                        <mark type="keyword">data independence</mark>
                        <mark type="keyword">security</mark>
                        <mark type="keyword">complexity</mark>
                        <mark type="keyword">convenience</mark>
                        <mark type="keyword">customization</mark>
                        <mark type="keyword">data integrity</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1055">
            <body>What are some disadvantages of database views?</body>
            <answers>
                <answer>
                    <body>- Update restriction
                        - Structure restriction
                        - Performance
                    </body>
                    <marks>
                        <mark type="keyword">update</mark>
                        <mark type="keyword">structure</mark>
                        <mark type="keyword">performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1056">
            <body>What is the difference between a (stored) procedure and a function in a database-centric
                architecture?
            </body>
            <answers>
                <answer>
                    <body>Procedures and functions are identical except that functions always return a value while
                        procedures do not.
                    </body>
                    <marks>
                        <mark type="keyword">identical</mark>
                        <mark type="keyword">return</mark>
                        <mark type="keyword">value</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1057">
            <body>What are some advantages of procedures (and functions) in a database-centric architecture?</body>
            <answers>
                <answer>
                    <body>Extensibility; Reusability; Maintainability; Aid abstraction; Improved testability; Improved
                        performance; Improved security
                    </body>
                    <marks>
                        <mark type="keyword">extensibility</mark>
                        <mark type="keyword">reusability</mark>
                        <mark type="keyword">maintainability</mark>
                        <mark type="keyword">aid abstraction</mark>
                        <mark type="keyword">testability</mark>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">security</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1058">
            <body>What are some disadvantages of procedures (and functions) in a database-centric architecture?</body>
            <answers>
                <answer>
                    <body>Limited coding functionality; Portability issues; Reduced flexibility and agility</body>
                    <marks>
                        <mark type="keyword">limited</mark>
                        <mark type="keyword">functionality</mark>
                        <mark type="keyword">portability</mark>
                        <mark type="keyword">flexibility</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1059">
            <body>What is data warehousing?</body>
            <answers>
                <answer>
                    <body>It is a collection of methods, techniques and tools which is used to support knowledge workers
                        such as senior managers, directors, managers, and business analysts to conduct data analyses
                        that help with performing decision-making processes and improving information resources.
                    </body>
                    <marks>
                        <mark type="keyword">collection</mark>
                        <mark type="keyword">method</mark>
                        <mark type="keyword">technique</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">knowledge worker</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1060">
            <body>What are the three features of a data warehouse?</body>
            <answers>
                <answer>
                    <body>It is subject-oriented, integrated and consistent, and shows its evolution over time and it is
                        non-volatile.
                    </body>
                    <marks>
                        <mark type="keyword">subject</mark>
                        <mark type="keyword">consistent</mark>
                        <mark type="keyword">non-volatile</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1061">
            <body>How is data from operational systems prepared for a data warehouse?</body>
            <answers>
                <answer>
                    <body>It is extracted, cleansed, transformed and aggregated before it is loaded into the data
                        warehouse.
                    </body>
                    <marks>
                        <mark type="keyword">extract</mark>
                        <mark type="keyword">cleanse</mark>
                        <mark type="keyword">transform</mark>
                        <mark type="keyword">aggregate</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1062">
            <body>What is a data mart?</body>
            <answers>
                <answer>
                    <body>It is a subset or an aggregation of the data stored to a primary data warehouse. It includes
                        information relevant to a specific business area, corporate department, or category of users.
                    </body>
                    <marks>
                        <mark type="keyword">subset</mark>
                        <mark type="keyword">aggregat</mark>
                        <mark type="keyword">warehouse</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1063">
            <body>How do top-down and bottom-up approaches to data warehousing differ?</body>
            <answers>
                <answer>
                    <body>Top-down approaches start by designing the data warehouse first, then the data marts.
                        Bottom-up
                        approaches start by designing the data marts. Then the data marts may be integrated into a data
                        warehouse or no warehouse is created at all.
                    </body>
                    <marks>
                        <mark type="keyword">data warehouse</mark>
                        <mark type="keyword">data mart</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1064">
            <body>What does OLAP stand for?</body>
            <answers>
                <answer>
                    <body>Online analytical processing</body>
                    <marks>
                        <mark type="keyword">online analytical processing</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1065">
            <body>What does OLTP stand for?</body>
            <answers>
                <answer>
                    <body>Online transaction processing</body>
                    <marks>
                        <mark type="keyword">online transaction processing</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1066">
            <body>What are some essential differences between OLTP and OLAP?</body>
            <answers>
                <answer>
                    <body>OLTP is application-oriented current isolated data and used in day to day operations by lots
                        of IT professionals. OLAP is lots of subject-oriented historical consolidated data used by
                        knowledge workers for decision support.
                    </body>
                    <marks>
                        <mark type="keyword">application-oriented</mark>
                        <mark type="keyword">subject-oriented</mark>
                        <mark type="keyword">current</mark>
                        <mark type="keyword">historic</mark>
                        <mark type="keyword">isolated</mark>
                        <mark type="keyword">consolidated</mark>
                        <mark type="keyword">IT professional</mark>
                        <mark type="keyword">knowledge worker</mark>
                        <mark type="keyword">day to day</mark>
                        <mark type="keyword">decision</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1067">
            <body>What is an OLAP data cube?</body>
            <answers>
                <answer>
                    <body>It is a data analysis tool in OLAP allowing to use generalized GROUP BY queries and
                        to aggregate facts based on chosen dimensions.
                    </body>
                    <marks>
                        <mark type="keyword">analysis</mark>
                        <mark type="keyword">tool</mark>
                        <mark type="keyword">generaliz</mark>
                        <mark type="keyword">aggregat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1068">
            <body>What are the four interactive OLAP operations?</body>
            <answers>
                <answer>
                    <body>Slice, Dice, Drill down/up, Aggregation</body>
                    <marks>
                        <mark type="keyword">slice</mark>
                        <mark type="keyword">dice</mark>
                        <mark type="keyword">drill</mark>
                        <mark type="keyword">aggregat</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1069">
            <body>What are some advantages of a data cube?</body>
            <answers>
                <answer>
                    <body>They are good for visualization, multidimensional and intuitive.</body>
                    <marks>
                        <mark type="keyword">visualiz</mark>
                        <mark type="keyword">multidimensional</mark>
                        <mark type="keyword">intuitive</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1070">
            <body>What are the three data warehouse architectures covered in the lecture?</body>
            <answers>
                <answer>
                    <body>Central architecture, Federated architecture, and Tiered architecture.</body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">federated</mark>
                        <mark type="keyword">tiered</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1071">
            <body>What characterizes a central data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>All data is in one, central data warehouse that is directly accessed. This is easy to
                        manage.
                    </body>
                    <marks>
                        <mark type="keyword">one</mark>
                        <mark type="keyword">direct</mark>
                        <mark type="keyword">easy</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1072">
            <body>What characterizes a federated data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>Data is stored in separate data marts, aimed at special departments. The data warehouse is
                        logical (i.e. virtual) and the clients access the data marts. Performance is increased due to
                        distribution.
                    </body>
                    <marks>
                        <mark type="keyword">separate</mark>
                        <mark type="keyword">logical</mark>
                        <mark type="keyword">performance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1073">
            <body>What characterizes a tiered data warehouse architecture?</body>
            <answers>
                <answer>
                    <body>The central data warehouse is materialized and data is distributed to data marts in one or
                        more tiers, being aggregated/reduced as it moves through tiers. Clients access the data marts.
                        The This ensures great performance but is complex to manage.
                    </body>
                    <marks>
                        <mark type="keyword">central</mark>
                        <mark type="keyword">materialized</mark>
                        <mark type="keyword">distributed</mark>
                        <mark type="keyword">performance</mark>
                        <mark type="keyword">complex</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1074">
            <body>What are some issues with data warehousing?</body>
            <answers>
                <answer>
                    <body>Metadata management; DW project management; High HW+SW cost; Ethical issues</body>
                    <marks>
                        <mark type="keyword">metadata</mark>
                        <mark type="keyword">project</mark>
                        <mark type="keyword">cost</mark>
                        <mark type="keyword">ethical</mark>
                    </marks>
                </answer>
            </answers>
        </question>
    </body>
</exam>