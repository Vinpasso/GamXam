<?xml version="1.0" encoding="UTF-8" ?>
<exam xmlns="https://vpt1.org">
    <head>
        <title>Blockchain Based Systems Engineering</title>
        <version>1.0</version>
        <id>422</id>
    </head>
    <body>
        <!-- Exercise 1 -->
        <question type="extended-answer" id="0">
            <body>What are two general properties of hash functions?</body>
            <answers>
                <answer>
                    <body>Compression (maps an input space of arbitrary finite length to an output of fixed length) and
                        ease of computation.
                    </body>
                    <marks>
                        <mark type="keyword">compression</mark>
                        <mark type="keyword">ease of computation</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="1">
            <body>What 3 properties constitute cryptographic hash functions?</body>
            <answers>
                <answer>
                    <body>Pre-image resistance (impossible to find the original x if only h(x) is given), second
                        pre-image resistance (impossible to find y (different from x) if x and h(x) are given s.t.
                        h(x)==h(y)), collision resistance (impossible to find distinct x and y s.t. h(x)==h(y)).
                    </body>
                    <marks>
                        <mark type="keyword">pre-image resistance</mark>
                        <mark type="keyword">second pre-image resistance</mark>
                        <mark type="keyword">collision resistance</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="2">
            <body>What is an additionally beneficial (but not required) property of cryptographic hash functions?</body>
            <answers>
                <answer>
                    <body>Hiding (impossible to determine x in h(r||x) given only the result of the hash)</body>
                    <marks>
                        <mark type="keyword">hiding</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="3">
            <body>Why are public keys of identities hashed before they are used as an address? Name two reasons and
                explain.
            </body>
            <answers>
                <answer>
                    <body>Hashes are shorter and quantum computers can not break hash functions, preventing them from
                        finding the private key.
                    </body>
                    <marks>
                        <mark type="keyword">short</mark>
                        <mark type="keyword">quantum</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 2 -->
        <question type="extended-answer" id="4">
            <body>Name the three key properties of the Bitcoin Blockchain according to the lecture and explain them.
            </body>
            <answers>
                <answer>
                    <body>
                        Trust-free, tamper-proof, and transparent.
                    </body>
                    <marks>
                        <mark type="keyword">trust-free</mark>
                        <mark type="keyword">tamper-proof</mark>
                        <mark type="keyword">transparent</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="5">
            <body>Decide if changing the following contents of the block alters the hash of the block header: Tx
                ordering, Tx add/remove, difficulty, previous blocks, nonce
            </body>
            <answers>
                <answer>
                    <body>Changing any of these changes the hash.</body>
                    <marks>
                        <mark type="keyword">any</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="6">
            <body>How is chaining implemented in a blockchain?</body>
            <answers>
                <answer>
                    <body>Each block contains the previous block's hash in its header.</body>
                    <marks>
                        <mark type="keyword">hash</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="7">
            <body>Name two possible reasons, why Nakamoto might have included a newspaper article in the genesis
                block!
            </body>
            <answers>
                <answer>
                    <body>He wanted to prove that he did not create the Blockchain before that date or he wanted to
                        criticize the behavior of saving banks.
                    </body>
                    <marks>
                        <mark type="keyword">date</mark>
                        <mark type="keyword">criticize</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="8">
            <body>In what field did Nakamoto store the newspaper article information in the genesis block?</body>
            <answers>
                <answer>
                    <body>He stored it in the ScriptSig of the first transaction (coinbase transaction).</body>
                    <marks>
                        <mark type="keyword">scriptsig</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="9">
            <body>What are the four roles in the Bitcoin network discussed in the lecture?</body>
            <answers>
                <answer>
                    <body>Wallet Owner (owns private keys to UTXOs and can spend them by publishing transactions), Light
                        Node (can only validate single transactions and needs connections to full node), Full Node
                        (maintains complete blockchain, validates and relays new TX and blocks), Miner (full node that
                        tries to solve the mining puzzle)
                    </body>
                    <marks>
                        <mark type="keyword">wallet owner</mark>
                        <mark type="keyword">light node</mark>
                        <mark type="keyword">full node</mark>
                        <mark type="keyword">miner</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="10">
            <body>What is the function of the memory pool?</body>
            <answers>
                <answer>
                    <body>It stores all transactions which are not contained in a block yet.</body>
                    <marks>
                        <mark type="keyword">transactions</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="11">
            <body>What five steps does a (valid) BTC TX take?</body>
            <answers>
                <answer>
                    <body>Sender signs TX; TX is sent to full node for validation; full node publishes TX to network;
                        miner publishes block with TX; other nodes receive block and validate it
                    </body>
                    <marks>
                        <mark type="keyword">sign</mark>
                        <mark type="keyword">validation</mark>
                        <mark type="keyword">publish</mark>
                        <mark type="keyword">miner</mark>
                        <mark type="keyword">block</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="12">
            <body>What is the difference between hot storage and cold storage?</body>
            <answers>
                <answer>
                    <body>Hot storage is immediately available to use (e.g. exchange wallet) while cold storage stores
                        the keys in an isolated environment (e.g. printed paper).
                    </body>
                    <marks>
                        <mark type="keyword">immediately available</mark>
                        <mark type="keyword">isolated environment</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 3 -->
        <question type="extended-answer" id="13">
            <body>What fundamental commands are missing in Bitcoin script's opcodes and why?</body>
            <answers>
                <answer>
                    <body>It does not contain loops or jumps in order to avoid the halting problem.</body>
                    <marks>
                        <mark type="keyword">loop</mark>
                        <mark type="keyword">jump</mark>
                        <mark type="keyword">halting problem</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="14">
            <body>Why is it not advisable to protect an unspent transaction output with a password via Bitcoin script
                (and ONLY checking that password)?
            </body>
            <answers>
                <answer>
                    <body>Once you decide to spend the password-protected output, the transaction contains the password
                        in plain-text and anyone can use it to create a rivaling transaction transferring the money to
                        their wallet (i.e. stealing it).
                    </body>
                    <marks>
                        <mark type="keyword">plain-text</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="15">
            <body>What is the difference between the opcode locktimeverify and the time lock in the transaction
                itself?
            </body>
            <answers>
                <answer>
                    <body>The use of the opcode allows a transaction to be mined and makes the output spendable later.
                        The time lock in the TX itself prevents the TX from being mined before that time.
                    </body>
                    <marks>
                        <mark type="keyword">plain-text</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 4 -->
        <question type="extended-answer" id="16">
            <body>The nonce field is 32-bit long. This is not enough variation for very high difficulty times (e.g. May
                2020). How can a miner change a block to change the hash without making the block invalid (in ascending
                order in terms of difficulty)?
            </body>
            <answers>
                <answer>
                    <body>Possible fields are timestamp, scriptsig in coinbase tx, coinbase tx address, tx
                        ordering, and adding/removing tx.
                    </body>
                    <marks>
                        <mark type="keyword">time</mark>
                        <mark type="keyword">scriptsig</mark>
                        <mark type="keyword">address</mark>
                        <mark type="keyword">ordering</mark>
                        <mark type="keyword">add</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="17">
            <body>What does probabilistic consensus mean?</body>
            <answers>
                <answer>
                    <body>It means that, if a network agrees on a certain set of transactions to be executed, it is not
                        100% certain to be valid in the long term. Bitcoin and other blockchains which have a
                        probabilistic consensus have no settlement finality directive. This means, it is possible that
                        transactions can be reverted, however with a very low (and decreasing) probability.
                    </body>
                    <marks>
                        <mark type="keyword">reverted</mark>
                        <mark type="regex">decreasing.*probability</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="18">
            <body>Briefly describe two incentives for mining and full nodes to participate in the Bitcoin network.
            </body>
            <answers>
                <answer>
                    <body>Miners get block rewards and transaction fees. Full nodes have only indirect incentives. They
                        could be running the node to connect their wallet software or have a business which relies on
                        the data.
                    </body>
                    <marks>
                        <mark type="keyword">block reward</mark>
                        <mark type="keyword">transaction fee</mark>
                        <mark type="keyword">wallet software</mark>
                        <mark type="keyword">data</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="19">
            <body>Suppose a miner creates a double spending transaction and manages to mine the transaction in a block.
                What happens to the other transactions in the block?
            </body>
            <answers>
                <answer>
                    <body>These transactions still wait to be mined by a legit miner into a valid block.</body>
                    <marks>
                        <mark type="keyword">wait</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="20">
            <body>Explain two reasons behind transaction fees. Why is the block reward not sufficient?</body>
            <answers>
                <answer>
                    <body>Block rewards decrease over time (to limit total coins in circulation) which is why another
                        mining incentive is needed. Wallet owners can give their tx a higher priority by increasing tx
                        fee.
                    </body>
                    <marks>
                        <mark type="keyword">block reward decreases</mark>
                        <mark type="keyword">priority</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="21">
            <body>Explain why the mining difficulty in the Bitcoin network is adjusted every 2016th block.</body>
            <answers>
                <answer>
                    <body>The idea is to keep the block time at roughly 10 minutes to ensure a stable network.</body>
                    <marks>
                        <mark type="keyword">block time</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="22">
            <body>Why should the block time never get too slow?</body>
            <answers>
                <answer>
                    <body>Tx take longer to be included and the network capacity decreases.</body>
                    <marks>
                        <mark type="keyword">longer</mark>
                        <mark type="keyword">capacity decrease</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="23">
            <body>Why should the block time never get too fast?</body>
            <answers>
                <answer>
                    <body>Higher possibility of orphan blocks, empty blocks, and the network needs to keep up with the
                        blocks (at very high speed).
                    </body>
                    <marks>
                        <mark type="keyword">orphan</mark>
                        <mark type="keyword">empty</mark>
                        <mark type="keyword">network</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="24">
            <body>How many bitcoins will there be at the end?</body>
            <answers>
                <answer>
                    <body>21.000.000</body>
                    <marks>
                        <mark type="keyword">21.000.000</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="25">
            <body>How often is the mining reward halved?</body>
            <answers>
                <answer>
                    <body>Every 210.000 blocks.</body>
                    <marks>
                        <mark type="keyword">210.000</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="26">
            <body>A company accepts cryptocurrencies as a payment. What factors should it consider regarding the
                confirmation time to receive transactions safely?
            </body>
            <answers>
                <answer>
                    <body>The confirmation time should be adjusted based on: the maturity of the network, the amount of
                        the payment, and whether the counterparty can be identified.
                    </body>
                    <marks>
                        <mark type="keyword">maturity</mark>
                        <mark type="keyword">amount</mark>
                        <mark type="keyword">identif</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 5 -->
        <question type="extended-answer" id="27">
            <body>Assume, that the Bitcoin development team plans to increase the maximum block size limit from 1MB
                to 10MB. Explain if this change requires a hard fork or soft fork.
            </body>
            <answers>
                <answer>
                    <body>It requires a hard fork, because the block validation is becoming more permissive, making old
                        clients incompatible.
                    </body>
                    <marks>
                        <mark type="keyword">hard</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="28">
            <body>What are two risks of a hard fork?</body>
            <answers>
                <answer>
                    <body>The fork can lead to two chains, if the hash power of the new chain is bigger than the hash
                        power of the old version. If the chain splits, there is a risk of a replay attack, because tx on
                        the new chain are also valid on the old chain. A malicious node could propagate tx of the new
                        chain to the old chain.
                    </body>
                    <marks>
                        <mark type="keyword">two chains</mark>
                        <mark type="keyword">replay attack</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="29">
            <body>An adversary has more than 50% of the network hash power. Explain his options to attack the network.
            </body>
            <answers>
                <answer>
                    <body>He can block tx from the chain, he can DoS by proposing empty blocks, he can claim all mining
                        rewards, and he can perform double spend attacks.
                    </body>
                    <marks>
                        <mark type="keyword">block tx</mark>
                        <mark type="keyword">DoS</mark>
                        <mark type="keyword">claim all mining rewards</mark>
                        <mark type="keyword">double spend</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="30">
            <body>Explain the minimum hashrate required to launch a selfish mining attack, if alpha is 100%.</body>
            <answers>
                <answer>
                    <body>There is no hashrate requirement. When alpha is 100% there is never a downside to selfish
                        mining.
                    </body>
                    <marks>
                        <mark type="keyword">no</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 6 -->
        <question type="extended-answer" id="31">
            <body>Name the four use case examples of smart contracts from the lecture.</body>
            <answers>
                <answer>
                    <body>Token systems, Identity and reputation systems, Decentralized Autonomous Organization, and
                        Election and voting systems.
                    </body>
                    <marks>
                        <mark type="keyword">token</mark>
                        <mark type="keyword">Identity and reputation</mark>
                        <mark type="keyword">decentralized autonomous organization</mark>
                        <mark type="keyword">election and voting</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="32">
            <body>What is gas in the context of Ethereum?</body>
            <answers>
                <answer>
                    <body>Every instruction of the EVM has a certain cost assigned. This cost is called gas.</body>
                    <marks>
                        <mark type="keyword">cost</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="33">
            <body>What happens with spare gas if too much gas was provided for a transaction?</body>
            <answers>
                <answer>
                    <body>The spare gas gets refunded to the sender.</body>
                    <marks>
                        <mark type="keyword">refund</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="34">
            <body>Rank the following EVM instructions by their gas cost (lowest to highest): SHA3, PUSH4 0x00000000,
                SELFDESTRUCT (if no new acc is created), JUMP, CREATE, CALL, PUSH1 0xff, STOP
            </body>
            <answers>
                <answer>
                    <body>SELFDESTRUCT, STOP, PUSH1 0xff, PUSH4 0x00000000, JUMP, SHA3, CALL, CREATE</body>
                    <marks>
                        <mark type="keyword">SELFDESTRUCT, STOP, PUSH1 0xff, PUSH4 0x00000000, JUMP, SHA3, CALL, CREATE
                        </mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="35">
            <body>In contrast to the transaction based ledger of Bitcoin, Ethereum uses an account based ledger to
                maintain the world state. In Bitcoin double spend attacks are prevented by UTXOs: Once a UTXO is spent,
                it cannot be spent again which creates a chain of coin ownership. How does Ethereum prevent double
                spends?
            </body>
            <answers>
                <answer>
                    <body>Ethereum requires each transaction to have a nonce that is incremented with every transaction
                        of the same account. This gives transactions a clear order. If two share the same nonce, one
                        will be mined first and the other one will consequently be rejected.
                    </body>
                    <marks>
                        <mark type="keyword">nonce</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="36">
            <body>Messages in Ethereum are not published to the blockchain. How could the blockchain be in the same
                state without these messages?
            </body>
            <answers>
                <answer>
                    <body>The messages are generated by a transaction. A client syncing with the blockchain executes all
                        transactions in order and thus generates all messagses.
                    </body>
                    <marks>
                        <mark type="keyword">generate</mark>
                        <mark type="keyword">transaction</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="37">
            <body>Name four reasons why a transaction that is sent to the Ethereum network might not get mined.</body>
            <answers>
                <answer>
                    <body>Wrong signature; Sending account has insufficient funds; Sender set gas price too low
                        to be accepted by any miner; Transaction consumes more gas than the block gas limit
                    </body>
                    <marks>
                        <mark type="keyword">signature</mark>
                        <mark type="keyword">insufficient funds</mark>
                        <mark type="keyword">gas price</mark>
                        <mark type="keyword">block gas limit</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="38">
            <body>Name two different ways how a mined transaction can fail.</body>
            <answers>
                <answer>
                    <body>Transaction runs out of gas; Transaction gets reverted</body>
                    <marks>
                        <mark type="keyword">gas</mark>
                        <mark type="keyword">revert</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="39">
            <body>Why does a mined transaction that fails still cost gas?</body>
            <answers>
                <answer>
                    <body>In order to determine that a transaction fails, it has to be executed. This consumes computing
                        power and therefore, the sender should pay for it. It prevents spam.
                    </body>
                    <marks>
                        <mark type="keyword">execute</mark>
                        <mark type="keyword">spam</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="40">
            <body>What is the difference between memory and storage in Ethereum?</body>
            <answers>
                <answer>
                    <body>Memory is part of the EVM and storage is part of a smart contract. The former is
                        non-persistent and the latter is persistent.
                    </body>
                    <marks>
                        <mark type="keyword">evm</mark>
                        <mark type="keyword">smart contract</mark>
                        <mark type="keyword">persistent</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="41">
            <body>At a very low level, storing data to storage in Ethereum is performed by the EVM instruction SSTORE.
                According to the yellow paper, the gas cost of an SSTORE operation is 20,000 “when the storage value is
                set to non-zero from zero” and 5,000 “when the storage value’s zeroness remains unchanged or is set to
                zero.” Why is it cheaper to set a value to 0 than to set it from 0 to any other value?
            </body>
            <answers>
                <answer>
                    <body>All storage items of a contract are initially empty and thus assumed to be 0. Changing the
                        value from 0 to another value forces the nodes to allocate space for the variable, which is
                        expensive.
                    </body>
                    <marks>
                        <mark type="keyword">initially empty</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="42">
            <body>What is the base gas cost of a transaction in Ethereum?</body>
            <answers>
                <answer>
                    <body>21000</body>
                    <marks>
                        <mark type="keyword">21000</mark>
                    </marks>
                </answer>
            </answers>
        </question>

        <!-- Exercise 7 -->
        <question type="extended-answer" id="43">
            <body>What is the difference between an abstract contract, an interface, and a library in Solidity?</body>
            <answers>
                <answer>
                    <body>An abstract contract is a smart contract with at least one unimplemented function and can not
                        be compiled. An interface is not allowed to define a constructor, variables, structs, and enums.
                        Also it can not inherit from a contract or implement another interface. A library is a deployed
                        contract whose code can be reused by other contracts using a delegate call.
                    </body>
                    <marks>
                        <mark type="keyword">unimplemented</mark>
                        <mark type="keyword">not allowed to define</mark>
                        <mark type="keyword">deployed</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="44">
            <body>In Solidity every pure function is a view function. True or false?</body>
            <answers>
                <answer>
                    <body>True. Pure functions are a subset of view function that do not read from the state.</body>
                    <marks>
                        <mark type="keyword">true</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="45">
            <body>In Solidity a transaction that calls a view function does not cost any gas because it does not change
                state. True or false?
            </body>
            <answers>
                <answer>
                    <body>False. View functions do consume gas. However, they can be called without sending the
                        transaction to the network. Then the execution will not cost anything because there is no record
                        of it on the blockchain.
                    </body>
                    <marks>
                        <mark type="keyword">false</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="46">
            <body>In Ethereum, a smart contract that has no functions that are declared payable cannot receive any
                Ether. True or false?
            </body>
            <answers>
                <answer>
                    <body>False. It can receive Ether as result of a coinbase transaction or as a destination of a
                        selfdestruct.
                    </body>
                    <marks>
                        <mark type="keyword">false</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="47">
            <body>Solidity’s standard int and uint datatypes can each hold 2^32 different values. True or false?</body>
            <answers>
                <answer>
                    <body>False. They are 256bit long and thus can hold 2^256 different values.</body>
                    <marks>
                        <mark type="keyword">false</mark>
                    </marks>
                </answer>
            </answers>
        </question>
        <question type="extended-answer" id="48">
            <body>If msg.sender == tx.origin, then this code was called directly by an externally owned account and not
                by another smart contract. True or false?
            </body>
            <answers>
                <answer>
                    <body>True. tx.origin is the externally owned account that issued the transaction and msg.sender
                        is the direct caller of the function. If they are equal, the code was called directly by the
                        issuer of the transaction and therefore not by a smart contract.
                    </body>
                    <marks>
                        <mark type="keyword">true</mark>
                    </marks>
                </answer>
            </answers>
        </question>

    </body>
</exam>